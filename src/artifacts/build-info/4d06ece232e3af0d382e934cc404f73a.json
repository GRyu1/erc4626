{
	"id": "4d06ece232e3af0d382e934cc404f73a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/Vaults.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/mocks/docs/ERC4626Fees.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Vaults is ERC4626Fees {\n    address payable public owner;\n    uint256 public entryFeeBasisPoints;\n\n    constructor(IERC20 _asset, uint256 _BasisPoints) ERC4626(_asset) ERC20(\"Broken Man Hole\", \"vBMH\") {\n        owner = payable(msg.sender);\n        entryFeeBasisPoints = _BasisPoints;\n    }\n\n    function _entryFeeBasisPoints() internal view override returns (uint256) {\n        return entryFeeBasisPoints;\n    }\n\n    function _entryFeeRecipient() internal view override returns (address) {\n        return owner;\n    }\n}"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../../token/ERC20/IERC20.sol\";\nimport {ERC4626} from \"../../token/ERC20/extensions/ERC4626.sol\";\nimport {SafeERC20} from \"../../token/ERC20/utils/SafeERC20.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\n\n/// @dev ERC4626 vault with entry/exit fees expressed in https://en.wikipedia.org/wiki/Basis_point[basis point (bp)].\nabstract contract ERC4626Fees is ERC4626 {\n    using Math for uint256;\n\n    uint256 private constant _BASIS_POINT_SCALE = 1e4;\n\n    // === Overrides ===\n\n    /// @dev Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        return super.previewDeposit(assets - fee);\n    }\n\n    /// @dev Preview adding an entry fee on mint. See {IERC4626-previewMint}.\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewMint(shares);\n        return assets + _feeOnRaw(assets, _entryFeeBasisPoints());\n    }\n\n    /// @dev Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        return super.previewWithdraw(assets + fee);\n    }\n\n    /// @dev Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewRedeem(shares);\n        return assets - _feeOnTotal(assets, _exitFeeBasisPoints());\n    }\n\n    /// @dev Send entry fee to {_entryFeeRecipient}. See {IERC4626-_deposit}.\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        address recipient = _entryFeeRecipient();\n\n        super._deposit(caller, receiver, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }\n\n    /// @dev Send exit fee to {_exitFeeRecipient}. See {IERC4626-_deposit}.\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual override {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        address recipient = _exitFeeRecipient();\n\n        super._withdraw(caller, receiver, owner, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }\n\n    // === Fee configuration ===\n\n    function _entryFeeBasisPoints() internal view virtual returns (uint256) {\n        return 0; // replace with e.g. 100 for 1%\n    }\n\n    function _exitFeeBasisPoints() internal view virtual returns (uint256) {\n        return 0; // replace with e.g. 100 for 1%\n    }\n\n    function _entryFeeRecipient() internal view virtual returns (address) {\n        return address(0); // replace with e.g. a treasury address\n    }\n\n    function _exitFeeRecipient() internal view virtual returns (address) {\n        return address(0); // replace with e.g. a treasury address\n    }\n\n    // === Fee operations ===\n\n    /// @dev Calculates the fees that should be added to an amount `assets` that does not already include fees.\n    /// Used in {IERC4626-mint} and {IERC4626-withdraw} operations.\n    function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }\n\n    /// @dev Calculates the fee part of an amount `assets` that already includes fees.\n    /// Used in {IERC4626-deposit} and {IERC4626-redeem} operations.\n    function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
				"ds-test/=lib/solmate/lib/ds-test/src/",
				"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
				"forge-std/=lib/forge-std/src/",
				"openzeppelin-contracts/=lib/openzeppelin-contracts/",
				"solmate/=lib/solmate/src/"
			]
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": {
				"IERC4626": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "assetTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalManagedAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"asset()": {
								"details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"convertToAssets(uint256)": {
								"details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"convertToShares(uint256)": {
								"details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"deposit(uint256,address)": {
								"details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"maxDeposit(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
							},
							"maxMint(address)": {
								"details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
							},
							"maxRedeem(address)": {
								"details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
							},
							"maxWithdraw(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
							},
							"mint(uint256,address)": {
								"details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"previewMint(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
							},
							"previewRedeem(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
							},
							"previewWithdraw(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"redeem(uint256,address,address)": {
								"details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalAssets()": {
								"details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"withdraw(uint256,address,address)": {
								"details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol": {
				"ERC4626Fees": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC4626 vault with entry/exit fees expressed in https://en.wikipedia.org/wiki/Basis_point[basis point (bp)].",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}."
							},
							"previewMint(uint256)": {
								"details": "Preview adding an entry fee on mint. See {IERC4626-previewMint}."
							},
							"previewRedeem(uint256)": {
								"details": "Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}."
							},
							"previewWithdraw(uint256)": {
								"details": "Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}."
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC4626 vault with entry/exit fees expressed in https://en.wikipedia.org/wiki/Basis_point[basis point (bp)].\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\"},\"previewMint(uint256)\":{\"details\":\"Preview adding an entry fee on mint. See {IERC4626-previewMint}.\"},\"previewRedeem(uint256)\":{\"details\":\"Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\"},\"previewWithdraw(uint256)\":{\"details\":\"Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":\"ERC4626Fees\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":{\"keccak256\":\"0x2a8b251fab0e66d9e3d4db2d0af8deff9822da8f34c74f7cd7cd865639d6b981\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3441907ff96ae299bdf82574ef779885f7c5ecc48d0098bd2e123470d84b7ddc\",\"dweb:/ipfs/QmYrVhfCDgfKdnXCnHhALsUBLUvL8mtWJf1vsEs5B59PUT\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 650,
								"contract": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol:ERC4626Fees",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 656,
								"contract": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol:ERC4626Fees",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 658,
								"contract": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol:ERC4626Fees",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 660,
								"contract": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol:ERC4626Fees",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 662,
								"contract": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol:ERC4626Fees",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 650,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 656,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 658,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 660,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 662,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ERC4626": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this contract and not the \"assets\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this contract and not the \\\"assets\\\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":\"ERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 650,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 656,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 658,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 660,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 662,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200ff204e18851c32d1f87fbcaa41d604ceb98df0eabc8a747fba351b235c0e4d564736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200ff204e18851c32d1f87fbcaa41d604ceb98df0eabc8a747fba351b235c0e4d564736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF CALLCODE DIV 0xE1 DUP9 MLOAD 0xC3 0x2D 0x1F DUP8 0xFB 0xCA LOG4 SAR PUSH1 0x4C 0xEB SWAP9 0xDF 0xE 0xAB 0xC8 0xA7 SELFBALANCE 0xFB LOG3 MLOAD 0xB2 CALLDATALOAD 0xC0 0xE4 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200ff204e18851c32d1f87fbcaa41d604ceb98df0eabc8a747fba351b235c0e4d564736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF CALLCODE DIV 0xE1 DUP9 MLOAD 0xC3 0x2D 0x1F DUP8 0xFB 0xCA LOG4 SAR PUSH1 0x4C 0xEB SWAP9 0xDF 0xE 0xAB 0xC8 0xA7 SELFBALANCE 0xFB LOG3 MLOAD 0xB2 CALLDATALOAD 0xC0 0xE4 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200ff204e18851c32d1f87fbcaa41d604ceb98df0eabc8a747fba351b235c0e4d564736f6c63430008190033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"src/Vaults.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":195:6261  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":195:6261  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f2b7e0f05f2a474f8ad444b0e6542f4e985f97c2210dcd1b250897452d2b1ba964736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f2b7e0f05f2a474f8ad444b0e6542f4e985f97c2210dcd1b250897452d2b1ba964736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xB7 0xE0 CREATE PUSH0 0x2A SELFBALANCE 0x4F DUP11 0xD4 PREVRANDAO 0xB0 0xE6 SLOAD 0x2F 0x4E SWAP9 PUSH0 SWAP8 0xC2 0x21 0xD 0xCD SHL 0x25 ADDMOD SWAP8 GASLIMIT 0x2D 0x2B SHL 0xA9 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f2b7e0f05f2a474f8ad444b0e6542f4e985f97c2210dcd1b250897452d2b1ba964736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xB7 0xE0 CREATE PUSH0 0x2A SELFBALANCE 0x4F DUP11 0xD4 PREVRANDAO 0xB0 0xE6 SLOAD 0x2F 0x4E SWAP9 PUSH0 SWAP8 0xC2 0x21 0xD 0xCD SHL 0x25 ADDMOD SWAP8 GASLIMIT 0x2D 0x2B SHL 0xA9 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f2b7e0f05f2a474f8ad444b0e6542f4e985f97c2210dcd1b250897452d2b1ba964736f6c63430008190033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"src/Vaults.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220af33bb5b78c957a0948f1ead136aaf83af7eb9a6b43134118fe243ea68c6cb2664736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220af33bb5b78c957a0948f1ead136aaf83af7eb9a6b43134118fe243ea68c6cb2664736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF CALLER 0xBB JUMPDEST PUSH25 0xC957A0948F1EAD136AAF83AF7EB9A6B43134118FE243EA68C6 0xCB 0x26 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "203:14914:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220af33bb5b78c957a0948f1ead136aaf83af7eb9a6b43134118fe243ea68c6cb2664736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF CALLER 0xBB JUMPDEST PUSH25 0xC957A0948F1EAD136AAF83AF7EB9A6B43134118FE243EA68C6 0xCB 0x26 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "203:14914:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220af33bb5b78c957a0948f1ead136aaf83af7eb9a6b43134118fe243ea68c6cb2664736f6c63430008190033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"src/Vaults.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Vaults.sol": {
				"Vaults": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "_asset",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_BasisPoints",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "entryFeeBasisPoints",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}."
							},
							"previewMint(uint256)": {
								"details": "Preview adding an entry fee on mint. See {IERC4626-previewMint}."
							},
							"previewRedeem(uint256)": {
								"details": "Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}."
							},
							"previewWithdraw(uint256)": {
								"details": "Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}."
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Vaults.sol\":175:703  contract Vaults is ERC4626Fees {... */\n  mstore(0x40, 0xc0)\n    /* \"src/Vaults.sol\":287:473  constructor(IERC20 _asset, uint256 _BasisPoints) ERC4626(_asset) ERC20(\"Broken Man Hole\", \"vBMH\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/Vaults.sol\":344:350  _asset */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0f\n  dup2\n  mstore\n  0x20\n  add\n  0x42726f6b656e204d616e20486f6c650000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  0x76424d4800000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4203:4215  bool success */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4217:4236  uint8 assetDecimals */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  tag_12\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4261:4267  asset_ */\n  dup4\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4260  _tryGetAssetDecimals */\n  shl(0x20, tag_13)\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  0x20\n  shr\n  jump\t// in\ntag_12:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4202:4268  (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_) */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4307  success */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  tag_14\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4326:4328  18 */\n  0x12\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  jump(tag_15)\ntag_14:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4310:4323  assetDecimals */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\ntag_15:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4278:4328  _underlyingDecimals = success ? assetDecimals : 18 */\n  0xff\n  and\n  0xa0\n  dup2\n  0xff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4347:4353  asset_ */\n  dup3\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4338:4353  _asset = asset_ */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4192:4360  {... */\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4165:4360  constructor(IERC20 asset_) {... */\n  pop\n    /* \"src/Vaults.sol\":411:421  msg.sender */\n  caller\n    /* \"src/Vaults.sol\":395:400  owner */\n  0x05\n  0x00\n    /* \"src/Vaults.sol\":395:422  owner = payable(msg.sender) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"src/Vaults.sol\":454:466  _BasisPoints */\n  dup1\n    /* \"src/Vaults.sol\":432:451  entryFeeBasisPoints */\n  0x06\n    /* \"src/Vaults.sol\":432:466  entryFeeBasisPoints = _BasisPoints */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"src/Vaults.sol\":287:473  constructor(IERC20 _asset, uint256 _BasisPoints) ERC4626(_asset) ERC20(\"Broken Man Hole\", \"vBMH\") {... */\n  pop\n  pop\n    /* \"src/Vaults.sol\":175:703  contract Vaults is ERC4626Fees {... */\n  jump(tag_17)\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_13:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4570:4574  bool */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4576:4581  uint8 */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4594:4606  bool success */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4608:4636  bytes memory encodedDecimals */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4648:4654  asset_ */\n  dup5\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4666  address(asset_).staticcall */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  add(0x24, mload(0x40))\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n  shl(0xe0, 0x313ce567)\n  0x20\n  dup3\n  add\n  dup1\n  mload\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n  dup4\n  dup2\n  dup4\n  and\n  or\n  dup4\n  mstore\n  pop\n  pop\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4733  address(asset_).staticcall(... */\n  mload(0x40)\n  tag_19\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  0x00\n  mload(0x40)\n  dup1\n  dup4\n  sub\n  dup2\n  dup6\n  gas\n  staticcall\n  swap2\n  pop\n  pop\n  returndatasize\n  dup1\n  0x00\n  dup2\n  eq\n  tag_23\n  jumpi\n  mload(0x40)\n  swap2\n  pop\n  and(add(returndatasize, 0x3f), not(0x1f))\n  dup3\n  add\n  0x40\n  mstore\n  returndatasize\n  dup3\n  mstore\n  returndatasize\n  0x00\n  0x20\n  dup5\n  add\n  returndatacopy\n  jump(tag_22)\ntag_23:\n  0x60\n  swap2\n  pop\ntag_22:\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4593:4733  (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(... */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4754  success */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\n  dup1\n  iszero\n  tag_24\n  jumpi\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4784:4786  32 */\n  0x20\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4773  encodedDecimals */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4780  encodedDecimals.length */\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4786  encodedDecimals.length >= 32 */\n  lt\n  iszero\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\ntag_24:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\n  iszero\n  tag_25\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4826  uint256 returnedDecimals */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4840:4855  encodedDecimals */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4829:4867  abi.decode(encodedDecimals, (uint256)) */\n  dup1\n  0x20\n  add\n  swap1\n  mload\n  dup2\n  add\n  swap1\n  tag_26\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4867  uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256)) */\n  swap1\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4905:4920  type(uint8).max */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  dup1\n  and\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4901  returnedDecimals */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  gt\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\n  tag_28\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4948:4952  true */\n  0x01\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4960:4976  returnedDecimals */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4940:4978  return (true, uint8(returnedDecimals)) */\n  swap5\n  pop\n  swap5\n  pop\n  pop\n  pop\n  pop\n  jump(tag_18)\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\ntag_28:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4788:5003  {... */\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\ntag_25:\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5020:5025  false */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5027:5028  0 */\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5012:5029  return (false, 0) */\n  swap4\n  pop\n  swap4\n  pop\n  pop\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_18:\n  swap2\n  pop\n  swap2\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_30:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_32:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_33:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_69\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_32\n  jump\t// in\ntag_69:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:679   */\ntag_34:\n    /* \"#utility.yul\":620:627   */\n  0x00\n    /* \"#utility.yul\":649:673   */\n  tag_71\n    /* \"#utility.yul\":667:672   */\n  dup3\n    /* \"#utility.yul\":649:673   */\n  tag_33\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":638:673   */\n  swap1\n  pop\n    /* \"#utility.yul\":568:679   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":685:837   */\ntag_35:\n    /* \"#utility.yul\":773:812   */\n  tag_73\n    /* \"#utility.yul\":806:811   */\n  dup2\n    /* \"#utility.yul\":773:812   */\n  tag_34\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":766:771   */\n  dup2\n    /* \"#utility.yul\":763:813   */\n  eq\n    /* \"#utility.yul\":753:831   */\n  tag_74\n  jumpi\n    /* \"#utility.yul\":827:828   */\n  0x00\n    /* \"#utility.yul\":824:825   */\n  dup1\n    /* \"#utility.yul\":817:829   */\n  revert\n    /* \"#utility.yul\":753:831   */\ntag_74:\n    /* \"#utility.yul\":685:837   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":843:1016   */\ntag_36:\n    /* \"#utility.yul\":915:920   */\n  0x00\n    /* \"#utility.yul\":946:952   */\n  dup2\n    /* \"#utility.yul\":940:953   */\n  mload\n    /* \"#utility.yul\":931:953   */\n  swap1\n  pop\n    /* \"#utility.yul\":962:1010   */\n  tag_76\n    /* \"#utility.yul\":1004:1009   */\n  dup2\n    /* \"#utility.yul\":962:1010   */\n  tag_35\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":843:1016   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1022:1099   */\ntag_37:\n    /* \"#utility.yul\":1059:1066   */\n  0x00\n    /* \"#utility.yul\":1088:1093   */\n  dup2\n    /* \"#utility.yul\":1077:1093   */\n  swap1\n  pop\n    /* \"#utility.yul\":1022:1099   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1105:1227   */\ntag_38:\n    /* \"#utility.yul\":1178:1202   */\n  tag_79\n    /* \"#utility.yul\":1196:1201   */\n  dup2\n    /* \"#utility.yul\":1178:1202   */\n  tag_37\n  jump\t// in\ntag_79:\n    /* \"#utility.yul\":1171:1176   */\n  dup2\n    /* \"#utility.yul\":1168:1203   */\n  eq\n    /* \"#utility.yul\":1158:1221   */\n  tag_80\n  jumpi\n    /* \"#utility.yul\":1217:1218   */\n  0x00\n    /* \"#utility.yul\":1214:1215   */\n  dup1\n    /* \"#utility.yul\":1207:1219   */\n  revert\n    /* \"#utility.yul\":1158:1221   */\ntag_80:\n    /* \"#utility.yul\":1105:1227   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1233:1376   */\ntag_39:\n    /* \"#utility.yul\":1290:1295   */\n  0x00\n    /* \"#utility.yul\":1321:1327   */\n  dup2\n    /* \"#utility.yul\":1315:1328   */\n  mload\n    /* \"#utility.yul\":1306:1328   */\n  swap1\n  pop\n    /* \"#utility.yul\":1337:1370   */\n  tag_82\n    /* \"#utility.yul\":1364:1369   */\n  dup2\n    /* \"#utility.yul\":1337:1370   */\n  tag_38\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":1233:1376   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1382:1919   */\ntag_3:\n    /* \"#utility.yul\":1476:1482   */\n  0x00\n    /* \"#utility.yul\":1484:1490   */\n  dup1\n    /* \"#utility.yul\":1533:1535   */\n  0x40\n    /* \"#utility.yul\":1521:1530   */\n  dup4\n    /* \"#utility.yul\":1512:1519   */\n  dup6\n    /* \"#utility.yul\":1508:1531   */\n  sub\n    /* \"#utility.yul\":1504:1536   */\n  slt\n    /* \"#utility.yul\":1501:1620   */\n  iszero\n  tag_84\n  jumpi\n    /* \"#utility.yul\":1539:1618   */\n  tag_85\n  tag_30\n  jump\t// in\ntag_85:\n    /* \"#utility.yul\":1501:1620   */\ntag_84:\n    /* \"#utility.yul\":1659:1660   */\n  0x00\n    /* \"#utility.yul\":1684:1763   */\n  tag_86\n    /* \"#utility.yul\":1755:1762   */\n  dup6\n    /* \"#utility.yul\":1746:1752   */\n  dup3\n    /* \"#utility.yul\":1735:1744   */\n  dup7\n    /* \"#utility.yul\":1731:1753   */\n  add\n    /* \"#utility.yul\":1684:1763   */\n  tag_36\n  jump\t// in\ntag_86:\n    /* \"#utility.yul\":1674:1763   */\n  swap3\n  pop\n    /* \"#utility.yul\":1630:1773   */\n  pop\n    /* \"#utility.yul\":1812:1814   */\n  0x20\n    /* \"#utility.yul\":1838:1902   */\n  tag_87\n    /* \"#utility.yul\":1894:1901   */\n  dup6\n    /* \"#utility.yul\":1885:1891   */\n  dup3\n    /* \"#utility.yul\":1874:1883   */\n  dup7\n    /* \"#utility.yul\":1870:1892   */\n  add\n    /* \"#utility.yul\":1838:1902   */\n  tag_39\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":1828:1902   */\n  swap2\n  pop\n    /* \"#utility.yul\":1783:1912   */\n  pop\n    /* \"#utility.yul\":1382:1919   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1925:2024   */\ntag_40:\n    /* \"#utility.yul\":1977:1983   */\n  0x00\n    /* \"#utility.yul\":2011:2016   */\n  dup2\n    /* \"#utility.yul\":2005:2017   */\n  mload\n    /* \"#utility.yul\":1995:2017   */\n  swap1\n  pop\n    /* \"#utility.yul\":1925:2024   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2030:2210   */\ntag_41:\n    /* \"#utility.yul\":2078:2155   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":2075:2076   */\n  0x00\n    /* \"#utility.yul\":2068:2156   */\n  mstore\n    /* \"#utility.yul\":2175:2179   */\n  0x41\n    /* \"#utility.yul\":2172:2173   */\n  0x04\n    /* \"#utility.yul\":2165:2180   */\n  mstore\n    /* \"#utility.yul\":2199:2203   */\n  0x24\n    /* \"#utility.yul\":2196:2197   */\n  0x00\n    /* \"#utility.yul\":2189:2204   */\n  revert\n    /* \"#utility.yul\":2216:2396   */\ntag_42:\n    /* \"#utility.yul\":2264:2341   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":2261:2262   */\n  0x00\n    /* \"#utility.yul\":2254:2342   */\n  mstore\n    /* \"#utility.yul\":2361:2365   */\n  0x22\n    /* \"#utility.yul\":2358:2359   */\n  0x04\n    /* \"#utility.yul\":2351:2366   */\n  mstore\n    /* \"#utility.yul\":2385:2389   */\n  0x24\n    /* \"#utility.yul\":2382:2383   */\n  0x00\n    /* \"#utility.yul\":2375:2390   */\n  revert\n    /* \"#utility.yul\":2402:2722   */\ntag_43:\n    /* \"#utility.yul\":2446:2452   */\n  0x00\n    /* \"#utility.yul\":2483:2484   */\n  0x02\n    /* \"#utility.yul\":2477:2481   */\n  dup3\n    /* \"#utility.yul\":2473:2485   */\n  div\n    /* \"#utility.yul\":2463:2485   */\n  swap1\n  pop\n    /* \"#utility.yul\":2530:2531   */\n  0x01\n    /* \"#utility.yul\":2524:2528   */\n  dup3\n    /* \"#utility.yul\":2520:2532   */\n  and\n    /* \"#utility.yul\":2551:2569   */\n  dup1\n    /* \"#utility.yul\":2541:2622   */\n  tag_92\n  jumpi\n    /* \"#utility.yul\":2607:2611   */\n  0x7f\n    /* \"#utility.yul\":2599:2605   */\n  dup3\n    /* \"#utility.yul\":2595:2612   */\n  and\n    /* \"#utility.yul\":2585:2612   */\n  swap2\n  pop\n    /* \"#utility.yul\":2541:2622   */\ntag_92:\n    /* \"#utility.yul\":2669:2671   */\n  0x20\n    /* \"#utility.yul\":2661:2667   */\n  dup3\n    /* \"#utility.yul\":2658:2672   */\n  lt\n    /* \"#utility.yul\":2638:2656   */\n  dup2\n    /* \"#utility.yul\":2635:2673   */\n  sub\n    /* \"#utility.yul\":2632:2716   */\n  tag_93\n  jumpi\n    /* \"#utility.yul\":2688:2706   */\n  tag_94\n  tag_42\n  jump\t// in\ntag_94:\n    /* \"#utility.yul\":2632:2716   */\ntag_93:\n    /* \"#utility.yul\":2453:2722   */\n  pop\n    /* \"#utility.yul\":2402:2722   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2728:2869   */\ntag_44:\n    /* \"#utility.yul\":2777:2781   */\n  0x00\n    /* \"#utility.yul\":2800:2803   */\n  dup2\n    /* \"#utility.yul\":2792:2803   */\n  swap1\n  pop\n    /* \"#utility.yul\":2823:2826   */\n  dup2\n    /* \"#utility.yul\":2820:2821   */\n  0x00\n    /* \"#utility.yul\":2813:2827   */\n  mstore\n    /* \"#utility.yul\":2857:2861   */\n  0x20\n    /* \"#utility.yul\":2854:2855   */\n  0x00\n    /* \"#utility.yul\":2844:2862   */\n  keccak256\n    /* \"#utility.yul\":2836:2862   */\n  swap1\n  pop\n    /* \"#utility.yul\":2728:2869   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2875:2968   */\ntag_45:\n    /* \"#utility.yul\":2912:2918   */\n  0x00\n    /* \"#utility.yul\":2959:2961   */\n  0x20\n    /* \"#utility.yul\":2954:2956   */\n  0x1f\n    /* \"#utility.yul\":2947:2952   */\n  dup4\n    /* \"#utility.yul\":2943:2957   */\n  add\n    /* \"#utility.yul\":2939:2962   */\n  div\n    /* \"#utility.yul\":2929:2962   */\n  swap1\n  pop\n    /* \"#utility.yul\":2875:2968   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2974:3081   */\ntag_46:\n    /* \"#utility.yul\":3018:3026   */\n  0x00\n    /* \"#utility.yul\":3068:3073   */\n  dup3\n    /* \"#utility.yul\":3062:3066   */\n  dup3\n    /* \"#utility.yul\":3058:3074   */\n  shl\n    /* \"#utility.yul\":3037:3074   */\n  swap1\n  pop\n    /* \"#utility.yul\":2974:3081   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3087:3480   */\ntag_47:\n    /* \"#utility.yul\":3156:3162   */\n  0x00\n    /* \"#utility.yul\":3206:3207   */\n  0x08\n    /* \"#utility.yul\":3194:3204   */\n  dup4\n    /* \"#utility.yul\":3190:3208   */\n  mul\n    /* \"#utility.yul\":3229:3326   */\n  tag_99\n    /* \"#utility.yul\":3259:3325   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":3248:3257   */\n  dup3\n    /* \"#utility.yul\":3229:3326   */\n  tag_46\n  jump\t// in\ntag_99:\n    /* \"#utility.yul\":3347:3386   */\n  tag_100\n    /* \"#utility.yul\":3377:3385   */\n  dup7\n    /* \"#utility.yul\":3366:3375   */\n  dup4\n    /* \"#utility.yul\":3347:3386   */\n  tag_46\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":3335:3386   */\n  swap6\n  pop\n    /* \"#utility.yul\":3419:3423   */\n  dup1\n    /* \"#utility.yul\":3415:3424   */\n  not\n    /* \"#utility.yul\":3408:3413   */\n  dup5\n    /* \"#utility.yul\":3404:3425   */\n  and\n    /* \"#utility.yul\":3395:3425   */\n  swap4\n  pop\n    /* \"#utility.yul\":3468:3472   */\n  dup1\n    /* \"#utility.yul\":3458:3466   */\n  dup7\n    /* \"#utility.yul\":3454:3473   */\n  and\n    /* \"#utility.yul\":3447:3452   */\n  dup5\n    /* \"#utility.yul\":3444:3474   */\n  or\n    /* \"#utility.yul\":3434:3474   */\n  swap3\n  pop\n    /* \"#utility.yul\":3163:3480   */\n  pop\n  pop\n    /* \"#utility.yul\":3087:3480   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3486:3546   */\ntag_48:\n    /* \"#utility.yul\":3514:3517   */\n  0x00\n    /* \"#utility.yul\":3535:3540   */\n  dup2\n    /* \"#utility.yul\":3528:3540   */\n  swap1\n  pop\n    /* \"#utility.yul\":3486:3546   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3552:3694   */\ntag_49:\n    /* \"#utility.yul\":3602:3611   */\n  0x00\n    /* \"#utility.yul\":3635:3688   */\n  tag_103\n    /* \"#utility.yul\":3653:3687   */\n  tag_104\n    /* \"#utility.yul\":3662:3686   */\n  tag_105\n    /* \"#utility.yul\":3680:3685   */\n  dup5\n    /* \"#utility.yul\":3662:3686   */\n  tag_37\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":3653:3687   */\n  tag_48\n  jump\t// in\ntag_104:\n    /* \"#utility.yul\":3635:3688   */\n  tag_37\n  jump\t// in\ntag_103:\n    /* \"#utility.yul\":3622:3688   */\n  swap1\n  pop\n    /* \"#utility.yul\":3552:3694   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3700:3775   */\ntag_50:\n    /* \"#utility.yul\":3743:3746   */\n  0x00\n    /* \"#utility.yul\":3764:3769   */\n  dup2\n    /* \"#utility.yul\":3757:3769   */\n  swap1\n  pop\n    /* \"#utility.yul\":3700:3775   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3781:4050   */\ntag_51:\n    /* \"#utility.yul\":3891:3930   */\n  tag_108\n    /* \"#utility.yul\":3922:3929   */\n  dup4\n    /* \"#utility.yul\":3891:3930   */\n  tag_49\n  jump\t// in\ntag_108:\n    /* \"#utility.yul\":3952:4043   */\n  tag_109\n    /* \"#utility.yul\":4001:4042   */\n  tag_110\n    /* \"#utility.yul\":4025:4041   */\n  dup3\n    /* \"#utility.yul\":4001:4042   */\n  tag_50\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":3993:3999   */\n  dup5\n    /* \"#utility.yul\":3986:3990   */\n  dup5\n    /* \"#utility.yul\":3980:3991   */\n  sload\n    /* \"#utility.yul\":3952:4043   */\n  tag_47\n  jump\t// in\ntag_109:\n    /* \"#utility.yul\":3946:3950   */\n  dup3\n    /* \"#utility.yul\":3939:4044   */\n  sstore\n    /* \"#utility.yul\":3857:4050   */\n  pop\n    /* \"#utility.yul\":3781:4050   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4056:4129   */\ntag_52:\n    /* \"#utility.yul\":4101:4104   */\n  0x00\n    /* \"#utility.yul\":4056:4129   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":4135:4324   */\ntag_53:\n    /* \"#utility.yul\":4212:4244   */\n  tag_113\n  tag_52\n  jump\t// in\ntag_113:\n    /* \"#utility.yul\":4253:4318   */\n  tag_114\n    /* \"#utility.yul\":4311:4317   */\n  dup2\n    /* \"#utility.yul\":4303:4309   */\n  dup5\n    /* \"#utility.yul\":4297:4301   */\n  dup5\n    /* \"#utility.yul\":4253:4318   */\n  tag_51\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":4188:4324   */\n  pop\n    /* \"#utility.yul\":4135:4324   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4330:4516   */\ntag_54:\n    /* \"#utility.yul\":4390:4510   */\ntag_116:\n    /* \"#utility.yul\":4407:4410   */\n  dup2\n    /* \"#utility.yul\":4400:4405   */\n  dup2\n    /* \"#utility.yul\":4397:4411   */\n  lt\n    /* \"#utility.yul\":4390:4510   */\n  iszero\n  tag_118\n  jumpi\n    /* \"#utility.yul\":4461:4500   */\n  tag_119\n    /* \"#utility.yul\":4498:4499   */\n  0x00\n    /* \"#utility.yul\":4491:4496   */\n  dup3\n    /* \"#utility.yul\":4461:4500   */\n  tag_53\n  jump\t// in\ntag_119:\n    /* \"#utility.yul\":4434:4435   */\n  0x01\n    /* \"#utility.yul\":4427:4432   */\n  dup2\n    /* \"#utility.yul\":4423:4436   */\n  add\n    /* \"#utility.yul\":4414:4436   */\n  swap1\n  pop\n    /* \"#utility.yul\":4390:4510   */\n  jump(tag_116)\ntag_118:\n    /* \"#utility.yul\":4330:4516   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4522:5065   */\ntag_55:\n    /* \"#utility.yul\":4623:4625   */\n  0x1f\n    /* \"#utility.yul\":4618:4621   */\n  dup3\n    /* \"#utility.yul\":4615:4626   */\n  gt\n    /* \"#utility.yul\":4612:5058   */\n  iszero\n  tag_121\n  jumpi\n    /* \"#utility.yul\":4657:4695   */\n  tag_122\n    /* \"#utility.yul\":4689:4694   */\n  dup2\n    /* \"#utility.yul\":4657:4695   */\n  tag_44\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":4741:4770   */\n  tag_123\n    /* \"#utility.yul\":4759:4769   */\n  dup5\n    /* \"#utility.yul\":4741:4770   */\n  tag_45\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":4731:4739   */\n  dup2\n    /* \"#utility.yul\":4727:4771   */\n  add\n    /* \"#utility.yul\":4924:4926   */\n  0x20\n    /* \"#utility.yul\":4912:4922   */\n  dup6\n    /* \"#utility.yul\":4909:4927   */\n  lt\n    /* \"#utility.yul\":4906:4955   */\n  iszero\n  tag_124\n  jumpi\n    /* \"#utility.yul\":4945:4953   */\n  dup2\n    /* \"#utility.yul\":4930:4953   */\n  swap1\n  pop\n    /* \"#utility.yul\":4906:4955   */\ntag_124:\n    /* \"#utility.yul\":4968:5048   */\n  tag_125\n    /* \"#utility.yul\":5024:5046   */\n  tag_126\n    /* \"#utility.yul\":5042:5045   */\n  dup6\n    /* \"#utility.yul\":5024:5046   */\n  tag_45\n  jump\t// in\ntag_126:\n    /* \"#utility.yul\":5014:5022   */\n  dup4\n    /* \"#utility.yul\":5010:5047   */\n  add\n    /* \"#utility.yul\":4997:5008   */\n  dup3\n    /* \"#utility.yul\":4968:5048   */\n  tag_54\n  jump\t// in\ntag_125:\n    /* \"#utility.yul\":4627:5058   */\n  pop\n  pop\n    /* \"#utility.yul\":4612:5058   */\ntag_121:\n    /* \"#utility.yul\":4522:5065   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5071:5188   */\ntag_56:\n    /* \"#utility.yul\":5125:5133   */\n  0x00\n    /* \"#utility.yul\":5175:5180   */\n  dup3\n    /* \"#utility.yul\":5169:5173   */\n  dup3\n    /* \"#utility.yul\":5165:5181   */\n  shr\n    /* \"#utility.yul\":5144:5181   */\n  swap1\n  pop\n    /* \"#utility.yul\":5071:5188   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5194:5363   */\ntag_57:\n    /* \"#utility.yul\":5238:5244   */\n  0x00\n    /* \"#utility.yul\":5271:5322   */\n  tag_129\n    /* \"#utility.yul\":5319:5320   */\n  0x00\n    /* \"#utility.yul\":5315:5321   */\n  not\n    /* \"#utility.yul\":5307:5312   */\n  dup5\n    /* \"#utility.yul\":5304:5305   */\n  0x08\n    /* \"#utility.yul\":5300:5313   */\n  mul\n    /* \"#utility.yul\":5271:5322   */\n  tag_56\n  jump\t// in\ntag_129:\n    /* \"#utility.yul\":5267:5323   */\n  not\n    /* \"#utility.yul\":5352:5356   */\n  dup1\n    /* \"#utility.yul\":5346:5350   */\n  dup4\n    /* \"#utility.yul\":5342:5357   */\n  and\n    /* \"#utility.yul\":5332:5357   */\n  swap2\n  pop\n    /* \"#utility.yul\":5245:5363   */\n  pop\n    /* \"#utility.yul\":5194:5363   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5368:5663   */\ntag_58:\n    /* \"#utility.yul\":5444:5448   */\n  0x00\n    /* \"#utility.yul\":5590:5619   */\n  tag_131\n    /* \"#utility.yul\":5615:5618   */\n  dup4\n    /* \"#utility.yul\":5609:5613   */\n  dup4\n    /* \"#utility.yul\":5590:5619   */\n  tag_57\n  jump\t// in\ntag_131:\n    /* \"#utility.yul\":5582:5619   */\n  swap2\n  pop\n    /* \"#utility.yul\":5652:5655   */\n  dup3\n    /* \"#utility.yul\":5649:5650   */\n  0x02\n    /* \"#utility.yul\":5645:5656   */\n  mul\n    /* \"#utility.yul\":5639:5643   */\n  dup3\n    /* \"#utility.yul\":5636:5657   */\n  or\n    /* \"#utility.yul\":5628:5657   */\n  swap1\n  pop\n    /* \"#utility.yul\":5368:5663   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5668:7063   */\ntag_9:\n    /* \"#utility.yul\":5785:5822   */\n  tag_133\n    /* \"#utility.yul\":5818:5821   */\n  dup3\n    /* \"#utility.yul\":5785:5822   */\n  tag_40\n  jump\t// in\ntag_133:\n    /* \"#utility.yul\":5887:5905   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5879:5885   */\n  dup2\n    /* \"#utility.yul\":5876:5906   */\n  gt\n    /* \"#utility.yul\":5873:5929   */\n  iszero\n  tag_134\n  jumpi\n    /* \"#utility.yul\":5909:5927   */\n  tag_135\n  tag_41\n  jump\t// in\ntag_135:\n    /* \"#utility.yul\":5873:5929   */\ntag_134:\n    /* \"#utility.yul\":5953:5991   */\n  tag_136\n    /* \"#utility.yul\":5985:5989   */\n  dup3\n    /* \"#utility.yul\":5979:5990   */\n  sload\n    /* \"#utility.yul\":5953:5991   */\n  tag_43\n  jump\t// in\ntag_136:\n    /* \"#utility.yul\":6038:6105   */\n  tag_137\n    /* \"#utility.yul\":6098:6104   */\n  dup3\n    /* \"#utility.yul\":6090:6096   */\n  dup3\n    /* \"#utility.yul\":6084:6088   */\n  dup6\n    /* \"#utility.yul\":6038:6105   */\n  tag_55\n  jump\t// in\ntag_137:\n    /* \"#utility.yul\":6132:6133   */\n  0x00\n    /* \"#utility.yul\":6156:6160   */\n  0x20\n    /* \"#utility.yul\":6143:6160   */\n  swap1\n  pop\n    /* \"#utility.yul\":6188:6190   */\n  0x1f\n    /* \"#utility.yul\":6180:6186   */\n  dup4\n    /* \"#utility.yul\":6177:6191   */\n  gt\n    /* \"#utility.yul\":6205:6206   */\n  0x01\n    /* \"#utility.yul\":6200:6818   */\n  dup2\n  eq\n  tag_139\n  jumpi\n    /* \"#utility.yul\":6862:6863   */\n  0x00\n    /* \"#utility.yul\":6879:6885   */\n  dup5\n    /* \"#utility.yul\":6876:6953   */\n  iszero\n  tag_140\n  jumpi\n    /* \"#utility.yul\":6928:6937   */\n  dup3\n    /* \"#utility.yul\":6923:6926   */\n  dup8\n    /* \"#utility.yul\":6919:6938   */\n  add\n    /* \"#utility.yul\":6913:6939   */\n  mload\n    /* \"#utility.yul\":6904:6939   */\n  swap1\n  pop\n    /* \"#utility.yul\":6876:6953   */\ntag_140:\n    /* \"#utility.yul\":6979:7046   */\n  tag_141\n    /* \"#utility.yul\":7039:7045   */\n  dup6\n    /* \"#utility.yul\":7032:7037   */\n  dup3\n    /* \"#utility.yul\":6979:7046   */\n  tag_58\n  jump\t// in\ntag_141:\n    /* \"#utility.yul\":6973:6977   */\n  dup7\n    /* \"#utility.yul\":6966:7047   */\n  sstore\n    /* \"#utility.yul\":6835:7057   */\n  pop\n    /* \"#utility.yul\":6170:7057   */\n  jump(tag_138)\n    /* \"#utility.yul\":6200:6818   */\ntag_139:\n    /* \"#utility.yul\":6252:6256   */\n  0x1f\n    /* \"#utility.yul\":6248:6257   */\n  not\n    /* \"#utility.yul\":6240:6246   */\n  dup5\n    /* \"#utility.yul\":6236:6258   */\n  and\n    /* \"#utility.yul\":6286:6323   */\n  tag_142\n    /* \"#utility.yul\":6318:6322   */\n  dup7\n    /* \"#utility.yul\":6286:6323   */\n  tag_44\n  jump\t// in\ntag_142:\n    /* \"#utility.yul\":6345:6346   */\n  0x00\n    /* \"#utility.yul\":6359:6567   */\ntag_143:\n    /* \"#utility.yul\":6373:6380   */\n  dup3\n    /* \"#utility.yul\":6370:6371   */\n  dup2\n    /* \"#utility.yul\":6367:6381   */\n  lt\n    /* \"#utility.yul\":6359:6567   */\n  iszero\n  tag_145\n  jumpi\n    /* \"#utility.yul\":6452:6461   */\n  dup5\n    /* \"#utility.yul\":6447:6450   */\n  dup10\n    /* \"#utility.yul\":6443:6462   */\n  add\n    /* \"#utility.yul\":6437:6463   */\n  mload\n    /* \"#utility.yul\":6429:6435   */\n  dup3\n    /* \"#utility.yul\":6422:6464   */\n  sstore\n    /* \"#utility.yul\":6503:6504   */\n  0x01\n    /* \"#utility.yul\":6495:6501   */\n  dup3\n    /* \"#utility.yul\":6491:6505   */\n  add\n    /* \"#utility.yul\":6481:6505   */\n  swap2\n  pop\n    /* \"#utility.yul\":6550:6552   */\n  0x20\n    /* \"#utility.yul\":6539:6548   */\n  dup6\n    /* \"#utility.yul\":6535:6553   */\n  add\n    /* \"#utility.yul\":6522:6553   */\n  swap5\n  pop\n    /* \"#utility.yul\":6396:6400   */\n  0x20\n    /* \"#utility.yul\":6393:6394   */\n  dup2\n    /* \"#utility.yul\":6389:6401   */\n  add\n    /* \"#utility.yul\":6384:6401   */\n  swap1\n  pop\n    /* \"#utility.yul\":6359:6567   */\n  jump(tag_143)\ntag_145:\n    /* \"#utility.yul\":6595:6601   */\n  dup7\n    /* \"#utility.yul\":6586:6593   */\n  dup4\n    /* \"#utility.yul\":6583:6602   */\n  lt\n    /* \"#utility.yul\":6580:6759   */\n  iszero\n  tag_146\n  jumpi\n    /* \"#utility.yul\":6653:6662   */\n  dup5\n    /* \"#utility.yul\":6648:6651   */\n  dup10\n    /* \"#utility.yul\":6644:6663   */\n  add\n    /* \"#utility.yul\":6638:6664   */\n  mload\n    /* \"#utility.yul\":6696:6744   */\n  tag_147\n    /* \"#utility.yul\":6738:6742   */\n  0x1f\n    /* \"#utility.yul\":6730:6736   */\n  dup10\n    /* \"#utility.yul\":6726:6743   */\n  and\n    /* \"#utility.yul\":6715:6724   */\n  dup3\n    /* \"#utility.yul\":6696:6744   */\n  tag_57\n  jump\t// in\ntag_147:\n    /* \"#utility.yul\":6688:6694   */\n  dup4\n    /* \"#utility.yul\":6681:6745   */\n  sstore\n    /* \"#utility.yul\":6603:6759   */\n  pop\n    /* \"#utility.yul\":6580:6759   */\ntag_146:\n    /* \"#utility.yul\":6805:6806   */\n  0x01\n    /* \"#utility.yul\":6801:6802   */\n  0x02\n    /* \"#utility.yul\":6793:6799   */\n  dup9\n    /* \"#utility.yul\":6789:6803   */\n  mul\n    /* \"#utility.yul\":6785:6807   */\n  add\n    /* \"#utility.yul\":6779:6783   */\n  dup9\n    /* \"#utility.yul\":6772:6808   */\n  sstore\n    /* \"#utility.yul\":6207:6818   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":6170:7057   */\ntag_138:\n  pop\n    /* \"#utility.yul\":5760:7063   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5668:7063   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7069:7167   */\ntag_59:\n    /* \"#utility.yul\":7120:7126   */\n  0x00\n    /* \"#utility.yul\":7154:7159   */\n  dup2\n    /* \"#utility.yul\":7148:7160   */\n  mload\n    /* \"#utility.yul\":7138:7160   */\n  swap1\n  pop\n    /* \"#utility.yul\":7069:7167   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7173:7320   */\ntag_60:\n    /* \"#utility.yul\":7274:7285   */\n  0x00\n    /* \"#utility.yul\":7311:7314   */\n  dup2\n    /* \"#utility.yul\":7296:7314   */\n  swap1\n  pop\n    /* \"#utility.yul\":7173:7320   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7326:7465   */\ntag_61:\n    /* \"#utility.yul\":7415:7421   */\n  dup3\n    /* \"#utility.yul\":7410:7413   */\n  dup2\n    /* \"#utility.yul\":7405:7408   */\n  dup4\n    /* \"#utility.yul\":7399:7422   */\n  mcopy\n    /* \"#utility.yul\":7456:7457   */\n  0x00\n    /* \"#utility.yul\":7447:7453   */\n  dup4\n    /* \"#utility.yul\":7442:7445   */\n  dup4\n    /* \"#utility.yul\":7438:7454   */\n  add\n    /* \"#utility.yul\":7431:7458   */\n  mstore\n    /* \"#utility.yul\":7326:7465   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7471:7857   */\ntag_62:\n    /* \"#utility.yul\":7575:7578   */\n  0x00\n    /* \"#utility.yul\":7603:7641   */\n  tag_152\n    /* \"#utility.yul\":7635:7640   */\n  dup3\n    /* \"#utility.yul\":7603:7641   */\n  tag_59\n  jump\t// in\ntag_152:\n    /* \"#utility.yul\":7657:7745   */\n  tag_153\n    /* \"#utility.yul\":7738:7744   */\n  dup2\n    /* \"#utility.yul\":7733:7736   */\n  dup6\n    /* \"#utility.yul\":7657:7745   */\n  tag_60\n  jump\t// in\ntag_153:\n    /* \"#utility.yul\":7650:7745   */\n  swap4\n  pop\n    /* \"#utility.yul\":7754:7819   */\n  tag_154\n    /* \"#utility.yul\":7812:7818   */\n  dup2\n    /* \"#utility.yul\":7807:7810   */\n  dup6\n    /* \"#utility.yul\":7800:7804   */\n  0x20\n    /* \"#utility.yul\":7793:7798   */\n  dup7\n    /* \"#utility.yul\":7789:7805   */\n  add\n    /* \"#utility.yul\":7754:7819   */\n  tag_61\n  jump\t// in\ntag_154:\n    /* \"#utility.yul\":7844:7850   */\n  dup1\n    /* \"#utility.yul\":7839:7842   */\n  dup5\n    /* \"#utility.yul\":7835:7851   */\n  add\n    /* \"#utility.yul\":7828:7851   */\n  swap2\n  pop\n    /* \"#utility.yul\":7579:7857   */\n  pop\n    /* \"#utility.yul\":7471:7857   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7863:8134   */\ntag_20:\n    /* \"#utility.yul\":7993:7996   */\n  0x00\n    /* \"#utility.yul\":8015:8108   */\n  tag_156\n    /* \"#utility.yul\":8104:8107   */\n  dup3\n    /* \"#utility.yul\":8095:8101   */\n  dup5\n    /* \"#utility.yul\":8015:8108   */\n  tag_62\n  jump\t// in\ntag_156:\n    /* \"#utility.yul\":8008:8108   */\n  swap2\n  pop\n    /* \"#utility.yul\":8125:8128   */\n  dup2\n    /* \"#utility.yul\":8118:8128   */\n  swap1\n  pop\n    /* \"#utility.yul\":7863:8134   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":8140:8491   */\ntag_27:\n    /* \"#utility.yul\":8210:8216   */\n  0x00\n    /* \"#utility.yul\":8259:8261   */\n  0x20\n    /* \"#utility.yul\":8247:8256   */\n  dup3\n    /* \"#utility.yul\":8238:8245   */\n  dup5\n    /* \"#utility.yul\":8234:8257   */\n  sub\n    /* \"#utility.yul\":8230:8262   */\n  slt\n    /* \"#utility.yul\":8227:8346   */\n  iszero\n  tag_158\n  jumpi\n    /* \"#utility.yul\":8265:8344   */\n  tag_159\n  tag_30\n  jump\t// in\ntag_159:\n    /* \"#utility.yul\":8227:8346   */\ntag_158:\n    /* \"#utility.yul\":8385:8386   */\n  0x00\n    /* \"#utility.yul\":8410:8474   */\n  tag_160\n    /* \"#utility.yul\":8466:8473   */\n  dup5\n    /* \"#utility.yul\":8457:8463   */\n  dup3\n    /* \"#utility.yul\":8446:8455   */\n  dup6\n    /* \"#utility.yul\":8442:8464   */\n  add\n    /* \"#utility.yul\":8410:8474   */\n  tag_39\n  jump\t// in\ntag_160:\n    /* \"#utility.yul\":8400:8474   */\n  swap2\n  pop\n    /* \"#utility.yul\":8356:8484   */\n  pop\n    /* \"#utility.yul\":8140:8491   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"src/Vaults.sol\":175:703  contract Vaults is ERC4626Fees {... */\ntag_17:\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xf5e5f362c88d870042340181c8ba3c810faeaf69b620e2b6c1b44f2a54634680\")\n  0x00\n  assignImmutable(\"0x2b94863e8a5710fa2a2df950f83723d3cf9047cafa56ad6e529f5e55ac56c9e6\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/Vaults.sol\":175:703  contract Vaults is ERC4626Fees {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xba0af7a9\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xce96cb77\n      gt\n      tag_32\n      jumpi\n      dup1\n      0xce96cb77\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xd905777e\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xef8b30f7\n      eq\n      tag_29\n      jumpi\n      jump(tag_2)\n    tag_32:\n      dup1\n      0xba0af7a9\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xc63d75b6\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xc6e6f592\n      eq\n      tag_25\n      jumpi\n      jump(tag_2)\n    tag_31:\n      dup1\n      0xa9059cbb\n      gt\n      tag_33\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb3d7f6b9\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xb460af94\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xba087652\n      eq\n      tag_22\n      jumpi\n      jump(tag_2)\n    tag_33:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x94bf804d\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_30:\n      dup1\n      0x23b872dd\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x402d267d\n      gt\n      tag_35\n      jumpi\n      dup1\n      0x402d267d\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4cdad506\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x6e553f65\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_35:\n      dup1\n      0x23b872dd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x38d52e0f\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_34:\n      dup1\n      0x01e1d114\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x07a2d13a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x0a28a477\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_3:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_40\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_5:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1249:1460  function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {... */\n    tag_7:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_8:\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_61\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_9:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_10:\n      tag_67\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_11:\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      tag_73\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_75\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_76\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1547:1762  function previewRedeem(uint256 shares) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_80\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_81\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7809:8201  function deposit(uint256 assets, address receiver) public virtual returns (uint256) {... */\n    tag_14:\n      tag_84\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_85\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_88\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_15:\n      tag_89\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_90\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      tag_92\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/Vaults.sol\":212:240  address payable public owner */\n    tag_16:\n      tag_93\n      tag_94\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n    tag_17:\n      tag_97\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_98\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      tag_100\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      tag_101\n      tag_102\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      tag_103\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_103:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_19:\n      tag_104\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_105\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_105:\n      tag_106\n      jump\t// in\n    tag_104:\n      mload(0x40)\n      tag_107\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_107:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":948:1158  function previewMint(uint256 shares) public view virtual override returns (uint256) {... */\n    tag_20:\n      tag_108\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_109\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n    tag_108:\n      mload(0x40)\n      tag_111\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_111:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8895:9308  function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_21:\n      tag_112\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_113\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      tag_115\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      tag_116\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_116:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_22:\n      tag_117\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_118\n      swap2\n      swap1\n      tag_114\n      jump\t// in\n    tag_118:\n      tag_119\n      jump\t// in\n    tag_117:\n      mload(0x40)\n      tag_120\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/Vaults.sol\":246:280  uint256 public entryFeeBasisPoints */\n    tag_23:\n      tag_121\n      tag_122\n      jump\t// in\n    tag_121:\n      mload(0x40)\n      tag_123\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_123:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_24:\n      tag_124\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_125\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_125:\n      tag_126\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      tag_127\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_127:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_25:\n      tag_128\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_129\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_129:\n      tag_130\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      tag_131\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_131:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n    tag_26:\n      tag_132\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_133\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_133:\n      tag_134\n      jump\t// in\n    tag_132:\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_27:\n      tag_136\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_137\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_137:\n      tag_138\n      jump\t// in\n    tag_136:\n      mload(0x40)\n      tag_139\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_28:\n      tag_140\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_142\n      jump\t// in\n    tag_141:\n      tag_143\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      tag_144\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_144:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":652:864  function previewDeposit(uint256 assets) public view virtual override returns (uint256) {... */\n    tag_29:\n      tag_145\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_146\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_146:\n      tag_147\n      jump\t// in\n    tag_145:\n      mload(0x40)\n      tag_148\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_148:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_37:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5832:5839  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5864  _asset */\n      immutable(\"0x2b94863e8a5710fa2a2df950f83723d3cf9047cafa56ad6e529f5e55ac56c9e6\")\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5874  _asset.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5883:5887  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_150\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_150:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_152\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_152:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_153\n      swap2\n      swap1\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5851:5889  return _asset.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_41:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_156\n      swap1\n      tag_157\n      jump\t// in\n    tag_156:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_158\n      swap1\n      tag_157\n      jump\t// in\n    tag_158:\n      dup1\n      iszero\n      tag_159\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_160\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_159)\n    tag_160:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_161:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_161\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_159:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_47:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6222:6229  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_163\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6265:6271  shares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6273:6292  Math.Rounding.Floor */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6264  _convertToAssets */\n      tag_164\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_163:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6241:6293  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_52:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4382:4395  address owner */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      tag_166\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4398:4408  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      jump\t// in\n    tag_166:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4382:4410  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_168\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4429:4434  owner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_169\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_168:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1249:1460  function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {... */\n    tag_57:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1328:1335  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1347:1358  uint256 fee */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1361:1401  _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      tag_171\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1371:1377  assets */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1379:1400  _exitFeeBasisPoints() */\n      tag_172\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1379:1398  _exitFeeBasisPoints */\n      tag_173\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1379:1400  _exitFeeBasisPoints() */\n      jump\t// in\n    tag_172:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1361:1370  _feeOnRaw */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1361:1401  _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      jump\t// in\n    tag_171:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1347:1401  uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1418:1453  super.previewWithdraw(assets + fee) */\n      tag_175\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1449:1452  fee */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1440:1446  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1440:1452  assets + fee */\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1418:1439  super.previewWithdraw */\n      tag_178\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1418:1453  super.previewWithdraw(assets + fee) */\n      jump\t// in\n    tag_175:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1411:1453  return super.previewWithdraw(assets + fee) */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1249:1460  function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_60:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3196:3203  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3215:3234  return _totalSupply */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_65:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5142:5157  address spender */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      tag_181\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5160:5170  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      jump\t// in\n    tag_181:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5142:5172  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_182\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5204:5211  spender */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_183\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_182:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_184\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_185\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_184:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5265:5276  return true */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_68:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5522:5527  uint8 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      tag_187\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5583  _decimalsOffset */\n      tag_188\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      jump\t// in\n    tag_187:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5565  _underlyingDecimals */\n      immutable(\"0xf5e5f362c88d870042340181c8ba3c810faeaf69b620e2b6c1b44f2a54634680\")\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5585  _underlyingDecimals + _decimalsOffset() */\n      tag_189\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5539:5585  return _underlyingDecimals + _decimalsOffset() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_72:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5682:5689  address */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5716:5722  _asset */\n      immutable(\"0x2b94863e8a5710fa2a2df950f83723d3cf9047cafa56ad6e529f5e55ac56c9e6\")\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5701:5723  return address(_asset) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_78:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6407:6414  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6433:6450  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6426:6450  return type(uint256).max */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1547:1762  function previewRedeem(uint256 shares) public view virtual override returns (uint256) {... */\n    tag_82:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1624:1631  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1643:1657  uint256 assets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1660:1687  super.previewRedeem(shares) */\n      tag_194\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1680:1686  shares */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1660:1679  super.previewRedeem */\n      tag_195\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1660:1687  super.previewRedeem(shares) */\n      jump\t// in\n    tag_194:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1643:1687  uint256 assets = super.previewRedeem(shares) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1713:1755  _feeOnTotal(assets, _exitFeeBasisPoints()) */\n      tag_196\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1725:1731  assets */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1733:1754  _exitFeeBasisPoints() */\n      tag_197\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1733:1752  _exitFeeBasisPoints */\n      tag_173\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1733:1754  _exitFeeBasisPoints() */\n      jump\t// in\n    tag_197:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1713:1724  _feeOnTotal */\n      tag_198\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1713:1755  _feeOnTotal(assets, _exitFeeBasisPoints()) */\n      jump\t// in\n    tag_196:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1704:1710  assets */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1704:1755  assets - _feeOnTotal(assets, _exitFeeBasisPoints()) */\n      tag_199\n      swap2\n      swap1\n      tag_200\n      jump\t// in\n    tag_199:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1697:1755  return assets - _feeOnTotal(assets, _exitFeeBasisPoints()) */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1547:1762  function previewRedeem(uint256 shares) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7809:8201  function deposit(uint256 assets, address receiver) public virtual returns (uint256) {... */\n    tag_87:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7884:7891  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7903:7920  uint256 maxAssets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7943  maxDeposit(receiver) */\n      tag_202\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7934:7942  receiver */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7933  maxDeposit */\n      tag_78\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7943  maxDeposit(receiver) */\n      jump\t// in\n    tag_202:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7903:7943  uint256 maxAssets = maxDeposit(receiver) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7966:7975  maxAssets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7957:7963  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7957:7975  assets > maxAssets */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7953:8063  if (assets > maxAssets) {... */\n      iszero\n      tag_203\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8024:8032  receiver */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8034:8040  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8042:8051  maxAssets */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7998:8052  ERC4626ExceededMaxDeposit(receiver, assets, maxAssets) */\n      mload(0x40)\n      0x79012fb200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_204\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_204:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7953:8063  if (assets > maxAssets) {... */\n    tag_203:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8073:8087  uint256 shares */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8112  previewDeposit(assets) */\n      tag_206\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8105:8111  assets */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8104  previewDeposit */\n      tag_147\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8112  previewDeposit(assets) */\n      jump\t// in\n    tag_206:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8073:8112  uint256 shares = previewDeposit(assets) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8170  _deposit(_msgSender(), receiver, assets, shares) */\n      tag_207\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8143  _msgSender() */\n      tag_208\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8141  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8143  _msgSender() */\n      jump\t// in\n    tag_208:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8145:8153  receiver */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8155:8161  assets */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8130  _deposit */\n      tag_209\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8170  _deposit(_msgSender(), receiver, assets, shares) */\n      jump\t// in\n    tag_207:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8188:8194  shares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8181:8194  return shares */\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7809:8201  function deposit(uint256 assets, address receiver) public virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_91:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3400:3407  account */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3383:3408  return _balances[account] */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/Vaults.sol\":212:240  address payable public owner */\n    tag_94:\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n    tag_99:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8540:8547  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8559:8576  uint256 maxShares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8596  maxMint(receiver) */\n      tag_212\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8587:8595  receiver */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8586  maxMint */\n      tag_126\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8596  maxMint(receiver) */\n      jump\t// in\n    tag_212:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8559:8596  uint256 maxShares = maxMint(receiver) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8619:8628  maxShares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8610:8616  shares */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8610:8628  shares > maxShares */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8606:8713  if (shares > maxShares) {... */\n      iszero\n      tag_213\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8674:8682  receiver */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8684:8690  shares */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8692:8701  maxShares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8651:8702  ERC4626ExceededMaxMint(receiver, shares, maxShares) */\n      mload(0x40)\n      0x284ff66700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_214\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_214:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8606:8713  if (shares > maxShares) {... */\n    tag_213:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8723:8737  uint256 assets */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8759  previewMint(shares) */\n      tag_215\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8752:8758  shares */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8751  previewMint */\n      tag_110\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8759  previewMint(shares) */\n      jump\t// in\n    tag_215:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8723:8759  uint256 assets = previewMint(shares) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8817  _deposit(_msgSender(), receiver, assets, shares) */\n      tag_216\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8790  _msgSender() */\n      tag_217\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8788  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8790  _msgSender() */\n      jump\t// in\n    tag_217:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8792:8800  receiver */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8802:8808  assets */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8810:8816  shares */\n      dup9\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8777  _deposit */\n      tag_209\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8817  _deposit(_msgSender(), receiver, assets, shares) */\n      jump\t// in\n    tag_216:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8835:8841  assets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8828:8841  return assets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_102:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_219\n      swap1\n      tag_157\n      jump\t// in\n    tag_219:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_220\n      swap1\n      tag_157\n      jump\t// in\n    tag_220:\n      dup1\n      iszero\n      tag_221\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_222\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_221)\n    tag_222:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_223:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_223\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_221:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_106:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3695:3708  address owner */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      tag_225\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3711:3721  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      jump\t// in\n    tag_225:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3695:3723  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_226\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3743:3748  owner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_185\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n    tag_226:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3777:3781  true */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3770:3781  return true */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":948:1158  function previewMint(uint256 shares) public view virtual override returns (uint256) {... */\n    tag_110:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1023:1030  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1042:1056  uint256 assets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1059:1084  super.previewMint(shares) */\n      tag_228\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1077:1083  shares */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1059:1076  super.previewMint */\n      tag_229\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1059:1084  super.previewMint(shares) */\n      jump\t// in\n    tag_228:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1042:1084  uint256 assets = super.previewMint(shares) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1110:1151  _feeOnRaw(assets, _entryFeeBasisPoints()) */\n      tag_230\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1120:1126  assets */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1128:1150  _entryFeeBasisPoints() */\n      tag_231\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1128:1148  _entryFeeBasisPoints */\n      tag_232\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1128:1150  _entryFeeBasisPoints() */\n      jump\t// in\n    tag_231:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1110:1119  _feeOnRaw */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1110:1151  _feeOnRaw(assets, _entryFeeBasisPoints()) */\n      jump\t// in\n    tag_230:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1101:1107  assets */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1101:1151  assets + _feeOnRaw(assets, _entryFeeBasisPoints()) */\n      tag_233\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_233:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1094:1151  return assets + _feeOnRaw(assets, _entryFeeBasisPoints()) */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":948:1158  function previewMint(uint256 shares) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8895:9308  function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_115:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8986:8993  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9005:9022  uint256 maxAssets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9043  maxWithdraw(owner) */\n      tag_235\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9037:9042  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9036  maxWithdraw */\n      tag_134\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9043  maxWithdraw(owner) */\n      jump\t// in\n    tag_235:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9005:9043  uint256 maxAssets = maxWithdraw(owner) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9066:9075  maxAssets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9057:9063  assets */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9057:9075  assets > maxAssets */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n      iszero\n      tag_236\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9125:9130  owner */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9132:9138  assets */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9140:9149  maxAssets */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9098:9150  ERC4626ExceededMaxWithdraw(owner, assets, maxAssets) */\n      mload(0x40)\n      0xfe9cceec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_237:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n    tag_236:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9171:9185  uint256 shares */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9211  previewWithdraw(assets) */\n      tag_238\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9204:9210  assets */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9203  previewWithdraw */\n      tag_57\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9211  previewWithdraw(assets) */\n      jump\t// in\n    tag_238:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9171:9211  uint256 shares = previewWithdraw(assets) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9277  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      tag_239\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9243  _msgSender() */\n      tag_240\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9241  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9243  _msgSender() */\n      jump\t// in\n    tag_240:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9245:9253  receiver */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9255:9260  owner */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9262:9268  assets */\n      dup10\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9270:9276  shares */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9230  _withdraw */\n      tag_241\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9277  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      jump\t// in\n    tag_239:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9295:9301  shares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9288:9301  return shares */\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":8895:9308  function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_119:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9442:9449  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9478  uint256 maxShares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      tag_243\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9491:9496  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9490  maxRedeem */\n      tag_138\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      jump\t// in\n    tag_243:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9497  uint256 maxShares = maxRedeem(owner) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9520:9529  maxShares */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9517  shares */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9529  shares > maxShares */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n      iszero\n      tag_244\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9577:9582  owner */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9584:9590  shares */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9592:9601  maxShares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      mload(0x40)\n      0xb94abeec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_245\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_245:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n    tag_244:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9637  uint256 assets */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      tag_246\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9654:9660  shares */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9653  previewRedeem */\n      tag_82\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      jump\t// in\n    tag_246:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9661  uint256 assets = previewRedeem(shares) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      tag_247\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      tag_248\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9691  _msgSender */\n      tag_167\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      jump\t// in\n    tag_248:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9695:9703  receiver */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9705:9710  owner */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9712:9718  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9720:9726  shares */\n      dup11\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9680  _withdraw */\n      tag_241\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      jump\t// in\n    tag_247:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9745:9751  assets */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9738:9751  return assets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/Vaults.sol\":246:280  uint256 public entryFeeBasisPoints */\n    tag_122:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_126:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6558:6565  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6584:6601  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6577:6601  return type(uint256).max */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_130:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6020:6027  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_251\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6063:6069  assets */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6071:6090  Math.Rounding.Floor */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6062  _convertToShares */\n      tag_252\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_251:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6039:6091  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n    tag_134:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6723:6730  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_254\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      tag_255\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6776:6781  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6775  balanceOf */\n      tag_91\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      jump\t// in\n    tag_255:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6784:6803  Math.Rounding.Floor */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6765  _convertToAssets */\n      tag_164\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      jump\t// in\n    tag_254:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6742:6804  return _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_138:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6922:6929  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      tag_257\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6958:6963  owner */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6957  balanceOf */\n      tag_91\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      jump\t// in\n    tag_257:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6941:6964  return balanceOf(owner) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_143:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3964:3969  owner */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3971:3978  spender */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3945:3979  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":652:864  function previewDeposit(uint256 assets) public view virtual override returns (uint256) {... */\n    tag_147:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":730:737  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":749:760  uint256 fee */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":763:806  _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      tag_260\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":775:781  assets */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":783:805  _entryFeeBasisPoints() */\n      tag_261\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":783:803  _entryFeeBasisPoints */\n      tag_232\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":783:805  _entryFeeBasisPoints() */\n      jump\t// in\n    tag_261:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":763:774  _feeOnTotal */\n      tag_198\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":763:806  _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      jump\t// in\n    tag_260:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":749:806  uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":823:857  super.previewDeposit(assets - fee) */\n      tag_262\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":853:856  fee */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":844:850  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":844:856  assets - fee */\n      tag_263\n      swap2\n      swap1\n      tag_200\n      jump\t// in\n    tag_263:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":823:843  super.previewDeposit */\n      tag_264\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":823:857  super.previewDeposit(assets - fee) */\n      jump\t// in\n    tag_262:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":816:857  return super.previewDeposit(assets - fee) */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":652:864  function previewDeposit(uint256 assets) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_164:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10316:10323  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      tag_266\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10372:10373  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      tag_267\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10367  totalAssets */\n      tag_37\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      jump\t// in\n    tag_267:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10373  totalAssets() + 1 */\n      tag_268\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_268:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      tag_269\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10412  _decimalsOffset */\n      tag_188\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      jump\t// in\n    tag_269:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10393  10 */\n      0x0a\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10414  10 ** _decimalsOffset() */\n      tag_270\n      swap2\n      swap1\n      tag_271\n      jump\t// in\n    tag_270:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      tag_272\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10386  totalSupply */\n      tag_60\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      jump\t// in\n    tag_272:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10414  totalSupply() + 10 ** _decimalsOffset() */\n      tag_273\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_273:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10416:10424  rounding */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10348  shares */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10355  shares.mulDiv */\n      tag_274\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_266:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10335:10425  return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_167:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_169:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_277\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_278\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_277:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3021:3149  function _exitFeeBasisPoints() internal view virtual returns (uint256) {... */\n    tag_173:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3083:3090  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3021:3149  function _exitFeeBasisPoints() internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3665:3848  function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {... */\n    tag_174:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3746:3753  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3772:3841  assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      tag_281\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3786:3800  feeBasisPoints */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":532:535  1e4 */\n      0x2710\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3822:3840  Math.Rounding.Ceil */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3772:3778  assets */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3772:3785  assets.mulDiv */\n      tag_274\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3772:3841  assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_281:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3765:3841  return assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3665:3848  function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n    tag_178:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7488:7495  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      tag_283\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7531:7537  assets */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7539:7557  Math.Rounding.Ceil */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7530  _convertToShares */\n      tag_252\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_283:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7507:7558  return _convertToShares(assets, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_183:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      tag_285\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10799:10804  owner */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10806:10813  spender */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10789:10798  allowance */\n      tag_143\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      jump\t// in\n    tag_285:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10762:10814  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10848:10865  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10828:10844  currentAllowance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_286\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_287\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10963:10970  spender */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10972:10988  currentAllowance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10990:10995  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_288\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_288:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_287:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_289\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_278\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_289:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_286:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_185:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5739:5743  from */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_291\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_292\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_292:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_291:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5848:5849  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5834:5836  to */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_293\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_294\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_294:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_293:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_295\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_296\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n    tag_295:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n    tag_188:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12371:12376  uint8 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n    tag_195:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7685:7692  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_299\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7728:7734  shares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7736:7755  Math.Rounding.Floor */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7727  _convertToAssets */\n      tag_164\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_299:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7704:7756  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4010:4212  function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {... */\n    tag_198:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4093:4100  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4119:4205  assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      tag_301\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4133:4147  feeBasisPoints */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":532:535  1e4 */\n      0x2710\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4149:4163  feeBasisPoints */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4149:4184  feeBasisPoints + _BASIS_POINT_SCALE */\n      tag_302\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_302:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4186:4204  Math.Rounding.Ceil */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4119:4125  assets */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4119:4132  assets.mulDiv */\n      tag_274\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4119:4205  assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_301:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4112:4205  return assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":4010:4212  function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1846:2272  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {... */\n    tag_209:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1966:1977  uint256 fee */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1980:2023  _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      tag_304\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1992:1998  assets */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2000:2022  _entryFeeBasisPoints() */\n      tag_305\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2000:2020  _entryFeeBasisPoints */\n      tag_232\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2000:2022  _entryFeeBasisPoints() */\n      jump\t// in\n    tag_305:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1980:1991  _feeOnTotal */\n      tag_198\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1980:2023  _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      jump\t// in\n    tag_304:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1966:2023  uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints()) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2033:2050  address recipient */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2053:2073  _entryFeeRecipient() */\n      tag_306\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2053:2071  _entryFeeRecipient */\n      tag_307\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2053:2073  _entryFeeRecipient() */\n      jump\t// in\n    tag_306:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2033:2073  address recipient = _entryFeeRecipient() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2084:2132  super._deposit(caller, receiver, assets, shares) */\n      tag_308\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2099:2105  caller */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2107:2115  receiver */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2117:2123  assets */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2125:2131  shares */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2084:2098  super._deposit */\n      tag_309\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2084:2132  super._deposit(caller, receiver, assets, shares) */\n      jump\t// in\n    tag_308:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2153:2154  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2147:2150  fee */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2147:2154  fee > 0 */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2147:2184  fee > 0 && recipient != address(this) */\n      dup1\n      iszero\n      tag_310\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2179:2183  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2158:2184  recipient != address(this) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2158:2167  recipient */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2158:2184  recipient != address(this) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2147:2184  fee > 0 && recipient != address(this) */\n    tag_310:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2143:2266  if (fee > 0 && recipient != address(this)) {... */\n      iszero\n      tag_311\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2200:2255  SafeERC20.safeTransfer(IERC20(asset()), recipient, fee) */\n      tag_312\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2230:2237  asset() */\n      tag_313\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2230:2235  asset */\n      tag_72\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2230:2237  asset() */\n      jump\t// in\n    tag_313:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2240:2249  recipient */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2251:2254  fee */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2200:2222  SafeERC20.safeTransfer */\n      tag_314\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2200:2255  SafeERC20.safeTransfer(IERC20(asset()), recipient, fee) */\n      jump\t// in\n    tag_312:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2143:2266  if (fee > 0 && recipient != address(this)) {... */\n    tag_311:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1956:2272  {... */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":1846:2272  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n    tag_229:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7287:7294  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      tag_316\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7330:7336  shares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7329  _convertToAssets */\n      tag_164\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_316:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7306:7357  return _convertToAssets(shares, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/Vaults.sol\":479:595  function _entryFeeBasisPoints() internal view override returns (uint256) {... */\n    tag_232:\n        /* \"src/Vaults.sol\":543:550  uint256 */\n      0x00\n        /* \"src/Vaults.sol\":569:588  entryFeeBasisPoints */\n      sload(0x06)\n        /* \"src/Vaults.sol\":562:588  return entryFeeBasisPoints */\n      swap1\n      pop\n        /* \"src/Vaults.sol\":479:595  function _entryFeeBasisPoints() internal view override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2354:2846  function _withdraw(... */\n    tag_241:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2536:2547  uint256 fee */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2550:2590  _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      tag_319\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2560:2566  assets */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2568:2589  _exitFeeBasisPoints() */\n      tag_320\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2568:2587  _exitFeeBasisPoints */\n      tag_173\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2568:2589  _exitFeeBasisPoints() */\n      jump\t// in\n    tag_320:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2550:2559  _feeOnRaw */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2550:2590  _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      jump\t// in\n    tag_319:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2536:2590  uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints()) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2600:2617  address recipient */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2620:2639  _exitFeeRecipient() */\n      tag_321\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2620:2637  _exitFeeRecipient */\n      tag_322\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2620:2639  _exitFeeRecipient() */\n      jump\t// in\n    tag_321:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2600:2639  address recipient = _exitFeeRecipient() */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2650:2706  super._withdraw(caller, receiver, owner, assets, shares) */\n      tag_323\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2666:2672  caller */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2674:2682  receiver */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2684:2689  owner */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2691:2697  assets */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2699:2705  shares */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2650:2665  super._withdraw */\n      tag_324\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2650:2706  super._withdraw(caller, receiver, owner, assets, shares) */\n      jump\t// in\n    tag_323:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2727:2728  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2721:2724  fee */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2721:2728  fee > 0 */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2721:2758  fee > 0 && recipient != address(this) */\n      dup1\n      iszero\n      tag_325\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2753:2757  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2732:2758  recipient != address(this) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2732:2741  recipient */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2732:2758  recipient != address(this) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2721:2758  fee > 0 && recipient != address(this) */\n    tag_325:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2717:2840  if (fee > 0 && recipient != address(this)) {... */\n      iszero\n      tag_326\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2774:2829  SafeERC20.safeTransfer(IERC20(asset()), recipient, fee) */\n      tag_327\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2804:2811  asset() */\n      tag_328\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2804:2809  asset */\n      tag_72\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2804:2811  asset() */\n      jump\t// in\n    tag_328:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2814:2823  recipient */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2825:2828  fee */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2774:2796  SafeERC20.safeTransfer */\n      tag_314\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2774:2829  SafeERC20.safeTransfer(IERC20(asset()), recipient, fee) */\n      jump\t// in\n    tag_327:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2717:2840  if (fee > 0 && recipient != address(this)) {... */\n    tag_326:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2526:2846  {... */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":2354:2846  function _withdraw(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_252:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9979:9986  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10088  assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      tag_330\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10058  _decimalsOffset() */\n      tag_331\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10056  _decimalsOffset */\n      tag_188\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10058  _decimalsOffset() */\n      jump\t// in\n    tag_331:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10035:10037  10 */\n      0x0a\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10035:10058  10 ** _decimalsOffset() */\n      tag_332\n      swap2\n      swap1\n      tag_271\n      jump\t// in\n    tag_332:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10032  totalSupply() */\n      tag_333\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10030  totalSupply */\n      tag_60\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10032  totalSupply() */\n      jump\t// in\n    tag_333:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10058  totalSupply() + 10 ** _decimalsOffset() */\n      tag_334\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_334:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10076:10077  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      tag_335\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10071  totalAssets */\n      tag_37\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      jump\t// in\n    tag_335:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10077  totalAssets() + 1 */\n      tag_336\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_336:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10079:10087  rounding */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10011  assets */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10018  assets.mulDiv */\n      tag_274\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10088  assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_330:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9998:10088  return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n    tag_264:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7093:7100  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_338\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7136:7142  assets */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7144:7163  Math.Rounding.Floor */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7135  _convertToShares */\n      tag_252\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_338:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7112:7164  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n    tag_274:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8152:8159  uint256 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8171:8185  uint256 result */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_340\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8195:8196  x */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8198:8199  y */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8201:8212  denominator */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8188:8194  mulDiv */\n      tag_341\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      jump\t// in\n    tag_340:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8171:8213  uint256 result = mulDiv(x, y, denominator) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      tag_342\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8244:8252  rounding */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8227:8243  unsignedRoundsUp */\n      tag_343\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      jump\t// in\n    tag_342:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n      dup1\n      iszero\n      tag_344\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8285:8286  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8270:8281  denominator */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      dup1\n      tag_345\n      jumpi\n      tag_346\n      tag_347\n      jump\t// in\n    tag_346:\n    tag_345:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8267:8268  y */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8264:8265  x */\n      dup9\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      mulmod\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8257:8286  mulmod(x, y, denominator) > 0 */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n    tag_344:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n      iszero\n      tag_348\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8312:8313  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8302:8313  result += 1 */\n      dup2\n      tag_349\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_349:\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n    tag_348:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8340:8346  result */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8333:8346  return result */\n      swap2\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_278:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10078:10079  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10061:10066  owner */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_351\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_352\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_352:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_351:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10178:10179  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10159:10166  spender */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_353\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_354\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_354:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_353:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10284:10289  value */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10266:10271  owner */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10273:10280  spender */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10303:10312  emitEvent */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      iszero\n      tag_355\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_356\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_356:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n    tag_355:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_296:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6376:6377  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6360:6364  from */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_358\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_359\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_359:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      jump(tag_360)\n    tag_358:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6580:6584  from */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6548:6585  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6617:6622  value */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6603:6614  fromBalance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6674:6678  from */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6680:6691  fromBalance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6693:6698  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_362\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_362:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_361:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6866:6871  value */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6852:6863  fromBalance */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6844:6848  from */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6534:6896  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_360:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6924:6925  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6910:6912  to */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_363\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7089:7094  value */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_364)\n    tag_363:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7301:7306  value */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7294:7296  to */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_364:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_365\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_365:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/Vaults.sol\":601:701  function _entryFeeRecipient() internal view override returns (address) {... */\n    tag_307:\n        /* \"src/Vaults.sol\":663:670  address */\n      0x00\n        /* \"src/Vaults.sol\":689:694  owner */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/Vaults.sol\":682:694  return owner */\n      swap1\n      pop\n        /* \"src/Vaults.sol\":601:701  function _entryFeeRecipient() internal view override returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n    tag_309:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11229  SafeERC20.safeTransferFrom(_asset, caller, address(this), assets) */\n      tag_368\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11191:11197  _asset */\n      immutable(\"0x2b94863e8a5710fa2a2df950f83723d3cf9047cafa56ad6e529f5e55ac56c9e6\")\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11199:11205  caller */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11215:11219  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11222:11228  assets */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11190  SafeERC20.safeTransferFrom */\n      tag_369\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11229  SafeERC20.safeTransferFrom(_asset, caller, address(this), assets) */\n      jump\t// in\n    tag_368:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11262  _mint(receiver, shares) */\n      tag_370\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11245:11253  receiver */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11255:11261  shares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11244  _mint */\n      tag_371\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11262  _mint(receiver, shares) */\n      jump\t// in\n    tag_370:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11294:11302  receiver */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11286:11292  caller */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11304:11310  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11312:11318  shares */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      mload(0x40)\n      tag_372\n      swap3\n      swap2\n      swap1\n      tag_373\n      jump\t// in\n    tag_372:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_314:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_375\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1405:1410  token */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1432  token */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1441  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1444:1446  to */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1448:1453  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      add(0x24, mload(0x40))\n      tag_376\n      swap3\n      swap2\n      swap1\n      tag_377\n      jump\t// in\n    tag_376:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1404  _callOptionalReturn */\n      tag_378\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      jump\t// in\n    tag_375:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3305:3448  function _exitFeeRecipient() internal view virtual returns (address) {... */\n    tag_322:\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3365:3372  address */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":3305:3448  function _exitFeeRecipient() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n    tag_324:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11580:11585  owner */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11576  caller */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n      tag_381\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      tag_382\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11617:11622  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11624:11630  caller */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11632:11638  shares */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11616  _spendAllowance */\n      tag_183\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      jump\t// in\n    tag_382:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n    tag_381:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      tag_383\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12163:12168  owner */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12170:12176  shares */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12162  _burn */\n      tag_384\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      jump\t// in\n    tag_383:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      tag_385\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12210:12216  _asset */\n      immutable(\"0x2b94863e8a5710fa2a2df950f83723d3cf9047cafa56ad6e529f5e55ac56c9e6\")\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12218:12226  receiver */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12228:12234  assets */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12209  SafeERC20.safeTransfer */\n      tag_314\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      jump\t// in\n    tag_385:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12278:12283  owner */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12268:12276  receiver */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12260:12266  caller */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xfbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12285:12291  assets */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12293:12299  shares */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      mload(0x40)\n      tag_386\n      swap3\n      swap2\n      swap1\n      tag_373\n      jump\t// in\n    tag_386:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_341:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":3885:3899  uint256 result */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4232:4245  uint256 prod0 */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4252:4253  y */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4248:4249  x */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4248:4253  x * y */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4232:4253  uint256 prod0 = x * y */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4312:4325  uint256 prod1 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4437:4438  0 */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4433:4439  not(0) */\n      not\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4430:4431  y */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4427:4428  x */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4420:4440  mulmod(x, y, not(0)) */\n      mulmod\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4493:4498  prod0 */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4489:4491  mm */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4486:4499  lt(mm, prod0) */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4478:4483  prod0 */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4474:4476  mm */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4470:4484  sub(mm, prod0) */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4466:4500  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4457:4500  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4392:4514  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4604:4605  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4595:4600  prod1 */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4595:4605  prod1 == 0 */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n      tag_388\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4933:4944  denominator */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4925:4930  prod0 */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4925:4944  prod0 / denominator */\n      dup2\n      tag_389\n      jumpi\n      tag_390\n      tag_347\n      jump\t// in\n    tag_390:\n    tag_389:\n      div\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4918:4944  return prod0 / denominator */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_387)\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n    tag_388:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5080:5085  prod1 */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5065:5076  denominator */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5065:5085  denominator <= prod1 */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n      tag_391\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5112:5134  MathOverflowedMulDiv() */\n      mload(0x40)\n      0x227bc15300000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n    tag_391:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5404:5421  uint256 remainder */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5539:5550  denominator */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5536:5537  y */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5533:5534  x */\n      dup9\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5526:5551  mulmod(x, y, denominator) */\n      mulmod\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5513:5551  remainder := mulmod(x, y, denominator) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5667:5672  prod0 */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5656:5665  remainder */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5653:5673  gt(remainder, prod0) */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5646:5651  prod1 */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5642:5674  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5633:5674  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5711:5720  remainder */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5704:5709  prod0 */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5700:5721  sub(prod0, remainder) */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5691:5721  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5939:5951  uint256 twos */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5973:5984  denominator */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5969:5970  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5969:5984  0 - denominator */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5954:5965  denominator */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5954:5985  denominator & (0 - denominator) */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":5939:5985  uint256 twos = denominator & (0 - denominator) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6105:6109  twos */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6092:6103  denominator */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6088:6110  div(denominator, twos) */\n      div\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6073:6110  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6197:6201  twos */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6190:6195  prod0 */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6186:6202  div(prod0, twos) */\n      div\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6177:6202  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6354:6355  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6347:6351  twos */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6340:6344  twos */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6337:6338  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6333:6345  sub(0, twos) */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6329:6352  div(sub(0, twos), twos) */\n      div\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6325:6356  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6317:6356  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6453:6457  twos */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6445:6450  prod1 */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6445:6457  prod1 * twos */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6436:6457  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6775:6790  uint256 inverse */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6813:6814  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6798:6809  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6794:6795  3 */\n      0x03\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6794:6809  3 * denominator */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6793:6814  (3 * denominator) ^ 2 */\n      xor\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":6775:6814  uint256 inverse = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7060:7067  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7046:7057  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7046:7067  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7042:7043  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7042:7067  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7031:7067  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7129:7136  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7115:7126  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7115:7136  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7111:7112  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7111:7136  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7100:7136  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7199:7206  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7185:7196  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7185:7206  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7181:7182  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7181:7206  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7170:7206  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7269:7276  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7255:7266  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7255:7276  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7251:7252  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7251:7276  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7240:7276  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7339:7346  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7325:7336  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7325:7346  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7321:7322  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7321:7346  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7310:7346  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7410:7417  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7396:7407  denominator */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7396:7417  denominator * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7392:7393  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7392:7417  2 - denominator * inverse */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7381:7417  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7868:7875  inverse */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7860:7865  prod0 */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7860:7875  prod0 * inverse */\n      mul\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7851:7875  result = prod0 * inverse */\n      swap6\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":7889:7902  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_387:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n    tag_343:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15061:15065  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15107:15108  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15102:15103  2 */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15090:15098  rounding */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15084:15099  uint8(rounding) */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_393\n      jumpi\n      tag_394\n      tag_395\n      jump\t// in\n    tag_394:\n    tag_393:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15084:15103  uint8(rounding) % 2 */\n      tag_396\n      swap2\n      swap1\n      tag_397\n      jump\t// in\n    tag_396:\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15084:15108  uint8(rounding) % 2 == 1 */\n      0xff\n      and\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":15077:15108  return uint8(rounding) % 2 == 1 */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_369:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      tag_399\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1822:1827  token */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1849  token */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1862  token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1865:1869  from */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1871:1873  to */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1875:1880  value */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      add(0x24, mload(0x40))\n      tag_400\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_401\n      jump\t// in\n    tag_400:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1821  _callOptionalReturn */\n      tag_378\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      jump\t// in\n    tag_399:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_371:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7810:7811  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7791:7798  account */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_403\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_404\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_404:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_403:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_405\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_296\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n    tag_405:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_378:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4501  bytes memory returndata */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      tag_407\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4532:4536  data */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4512:4517  token */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4531  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_408\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_407:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4537  bytes memory returndata = address(token).functionCall(data) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4572:4573  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4561  returndata */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4568  returndata.length */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      eq\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      dup1\n      iszero\n      tag_409\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4589:4599  returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_410\n      swap2\n      swap1\n      tag_411\n      jump\t// in\n    tag_410:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4577:4608  !abi.decode(returndata, (bool)) */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_409:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      iszero\n      tag_412\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4664:4669  token */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      0x5274afe700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_413\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_413:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_412:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4129:4688  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_384:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8336:8337  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8317:8324  account */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_415\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_416\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_416:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_415:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_417\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_296\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n    tag_417:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_408:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2780:2792  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      tag_419\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2833:2839  target */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2841:2845  data */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2811:2832  functionCallWithValue */\n      tag_420\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      jump\t// in\n    tag_419:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2804:2849  return functionCallWithValue(target, data, 0) */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n    tag_420:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3279:3291  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3331:3336  value */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3307:3328  address(this).balance */\n      selfbalance\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3307:3336  address(this).balance < value */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n      iszero\n      tag_422\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3394:3398  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3359:3400  AddressInsufficientBalance(address(this)) */\n      mload(0x40)\n      0xcd78605900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_423\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_423:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n    tag_422:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3421:3433  bool success */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3435:3458  bytes memory returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3462:3468  target */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3462:3473  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3481:3486  value */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3488:3492  data */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      mload(0x40)\n      tag_424\n      swap2\n      swap1\n      tag_425\n      jump\t// in\n    tag_424:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_428\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_427)\n    tag_428:\n      0x60\n      swap2\n      pop\n    tag_427:\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3420:3493  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_429\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3537:3543  target */\n      dup7\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3545:3552  success */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3554:3564  returndata */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3510:3536  verifyCallResultFromTarget */\n      tag_430\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      jump\t// in\n    tag_429:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3503:3565  return verifyCallResultFromTarget(target, success, returndata) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_430:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4769:4781  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4798:4805  success */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      tag_432\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      tag_433\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4829:4839  returndata */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4821:4828  _revert */\n      tag_434\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      jump\t// in\n    tag_433:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      jump(tag_435)\n    tag_432:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5066:5067  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5045:5055  returndata */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5045:5062  returndata.length */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      iszero\n      tag_436\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5093:5094  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5071:5077  target */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_436:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      iszero\n      tag_437\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5138:5144  target */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      mload(0x40)\n      0x9996b31500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_438\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_438:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_437:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5180:5190  returndata */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5173:5190  return returndata */\n      swap1\n      pop\n      jump(tag_431)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_435:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_431:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5743:6259  function _revert(bytes memory returndata) private pure {... */\n    tag_434:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5894:5895  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5874:5884  returndata */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n      iszero\n      tag_440\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6102:6112  returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6096:6113  mload(returndata) */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6158:6173  returndata_size */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6145:6155  returndata */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6141:6143  32 */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6137:6156  add(32, returndata) */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6130:6174  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_440:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      mload(0x40)\n      0x1425ea4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":7:84   */\n    tag_442:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:208   */\n    tag_443:\n        /* \"#utility.yul\":177:201   */\n      tag_479\n        /* \"#utility.yul\":195:200   */\n      dup2\n        /* \"#utility.yul\":177:201   */\n      tag_442\n      jump\t// in\n    tag_479:\n        /* \"#utility.yul\":172:175   */\n      dup3\n        /* \"#utility.yul\":165:202   */\n      mstore\n        /* \"#utility.yul\":90:208   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":214:436   */\n    tag_39:\n        /* \"#utility.yul\":307:311   */\n      0x00\n        /* \"#utility.yul\":345:347   */\n      0x20\n        /* \"#utility.yul\":334:343   */\n      dup3\n        /* \"#utility.yul\":330:348   */\n      add\n        /* \"#utility.yul\":322:348   */\n      swap1\n      pop\n        /* \"#utility.yul\":358:429   */\n      tag_481\n        /* \"#utility.yul\":426:427   */\n      0x00\n        /* \"#utility.yul\":415:424   */\n      dup4\n        /* \"#utility.yul\":411:428   */\n      add\n        /* \"#utility.yul\":402:408   */\n      dup5\n        /* \"#utility.yul\":358:429   */\n      tag_443\n      jump\t// in\n    tag_481:\n        /* \"#utility.yul\":214:436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":442:541   */\n    tag_444:\n        /* \"#utility.yul\":494:500   */\n      0x00\n        /* \"#utility.yul\":528:533   */\n      dup2\n        /* \"#utility.yul\":522:534   */\n      mload\n        /* \"#utility.yul\":512:534   */\n      swap1\n      pop\n        /* \"#utility.yul\":442:541   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":547:716   */\n    tag_445:\n        /* \"#utility.yul\":631:642   */\n      0x00\n        /* \"#utility.yul\":665:671   */\n      dup3\n        /* \"#utility.yul\":660:663   */\n      dup3\n        /* \"#utility.yul\":653:672   */\n      mstore\n        /* \"#utility.yul\":705:709   */\n      0x20\n        /* \"#utility.yul\":700:703   */\n      dup3\n        /* \"#utility.yul\":696:710   */\n      add\n        /* \"#utility.yul\":681:710   */\n      swap1\n      pop\n        /* \"#utility.yul\":547:716   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":722:861   */\n    tag_446:\n        /* \"#utility.yul\":811:817   */\n      dup3\n        /* \"#utility.yul\":806:809   */\n      dup2\n        /* \"#utility.yul\":801:804   */\n      dup4\n        /* \"#utility.yul\":795:818   */\n      mcopy\n        /* \"#utility.yul\":852:853   */\n      0x00\n        /* \"#utility.yul\":843:849   */\n      dup4\n        /* \"#utility.yul\":838:841   */\n      dup4\n        /* \"#utility.yul\":834:850   */\n      add\n        /* \"#utility.yul\":827:854   */\n      mstore\n        /* \"#utility.yul\":722:861   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":867:969   */\n    tag_447:\n        /* \"#utility.yul\":908:914   */\n      0x00\n        /* \"#utility.yul\":959:961   */\n      0x1f\n        /* \"#utility.yul\":955:962   */\n      not\n        /* \"#utility.yul\":950:952   */\n      0x1f\n        /* \"#utility.yul\":943:948   */\n      dup4\n        /* \"#utility.yul\":939:953   */\n      add\n        /* \"#utility.yul\":935:963   */\n      and\n        /* \"#utility.yul\":925:963   */\n      swap1\n      pop\n        /* \"#utility.yul\":867:969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":975:1352   */\n    tag_448:\n        /* \"#utility.yul\":1063:1066   */\n      0x00\n        /* \"#utility.yul\":1091:1130   */\n      tag_487\n        /* \"#utility.yul\":1124:1129   */\n      dup3\n        /* \"#utility.yul\":1091:1130   */\n      tag_444\n      jump\t// in\n    tag_487:\n        /* \"#utility.yul\":1146:1217   */\n      tag_488\n        /* \"#utility.yul\":1210:1216   */\n      dup2\n        /* \"#utility.yul\":1205:1208   */\n      dup6\n        /* \"#utility.yul\":1146:1217   */\n      tag_445\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":1139:1217   */\n      swap4\n      pop\n        /* \"#utility.yul\":1226:1291   */\n      tag_489\n        /* \"#utility.yul\":1284:1290   */\n      dup2\n        /* \"#utility.yul\":1279:1282   */\n      dup6\n        /* \"#utility.yul\":1272:1276   */\n      0x20\n        /* \"#utility.yul\":1265:1270   */\n      dup7\n        /* \"#utility.yul\":1261:1277   */\n      add\n        /* \"#utility.yul\":1226:1291   */\n      tag_446\n      jump\t// in\n    tag_489:\n        /* \"#utility.yul\":1316:1345   */\n      tag_490\n        /* \"#utility.yul\":1338:1344   */\n      dup2\n        /* \"#utility.yul\":1316:1345   */\n      tag_447\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":1311:1314   */\n      dup5\n        /* \"#utility.yul\":1307:1346   */\n      add\n        /* \"#utility.yul\":1300:1346   */\n      swap2\n      pop\n        /* \"#utility.yul\":1067:1352   */\n      pop\n        /* \"#utility.yul\":975:1352   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1358:1671   */\n    tag_43:\n        /* \"#utility.yul\":1471:1475   */\n      0x00\n        /* \"#utility.yul\":1509:1511   */\n      0x20\n        /* \"#utility.yul\":1498:1507   */\n      dup3\n        /* \"#utility.yul\":1494:1512   */\n      add\n        /* \"#utility.yul\":1486:1512   */\n      swap1\n      pop\n        /* \"#utility.yul\":1558:1567   */\n      dup2\n        /* \"#utility.yul\":1552:1556   */\n      dup2\n        /* \"#utility.yul\":1548:1568   */\n      sub\n        /* \"#utility.yul\":1544:1545   */\n      0x00\n        /* \"#utility.yul\":1533:1542   */\n      dup4\n        /* \"#utility.yul\":1529:1546   */\n      add\n        /* \"#utility.yul\":1522:1569   */\n      mstore\n        /* \"#utility.yul\":1586:1664   */\n      tag_492\n        /* \"#utility.yul\":1659:1663   */\n      dup2\n        /* \"#utility.yul\":1650:1656   */\n      dup5\n        /* \"#utility.yul\":1586:1664   */\n      tag_448\n      jump\t// in\n    tag_492:\n        /* \"#utility.yul\":1578:1664   */\n      swap1\n      pop\n        /* \"#utility.yul\":1358:1671   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1758:1875   */\n    tag_450:\n        /* \"#utility.yul\":1867:1868   */\n      0x00\n        /* \"#utility.yul\":1864:1865   */\n      dup1\n        /* \"#utility.yul\":1857:1869   */\n      revert\n        /* \"#utility.yul\":2004:2126   */\n    tag_452:\n        /* \"#utility.yul\":2077:2101   */\n      tag_497\n        /* \"#utility.yul\":2095:2100   */\n      dup2\n        /* \"#utility.yul\":2077:2101   */\n      tag_442\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":2070:2075   */\n      dup2\n        /* \"#utility.yul\":2067:2102   */\n      eq\n        /* \"#utility.yul\":2057:2120   */\n      tag_498\n      jumpi\n        /* \"#utility.yul\":2116:2117   */\n      0x00\n        /* \"#utility.yul\":2113:2114   */\n      dup1\n        /* \"#utility.yul\":2106:2118   */\n      revert\n        /* \"#utility.yul\":2057:2120   */\n    tag_498:\n        /* \"#utility.yul\":2004:2126   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2132:2271   */\n    tag_453:\n        /* \"#utility.yul\":2178:2183   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup2\n        /* \"#utility.yul\":2203:2223   */\n      calldataload\n        /* \"#utility.yul\":2194:2223   */\n      swap1\n      pop\n        /* \"#utility.yul\":2232:2265   */\n      tag_500\n        /* \"#utility.yul\":2259:2264   */\n      dup2\n        /* \"#utility.yul\":2232:2265   */\n      tag_452\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":2132:2271   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2277:2606   */\n    tag_46:\n        /* \"#utility.yul\":2336:2342   */\n      0x00\n        /* \"#utility.yul\":2385:2387   */\n      0x20\n        /* \"#utility.yul\":2373:2382   */\n      dup3\n        /* \"#utility.yul\":2364:2371   */\n      dup5\n        /* \"#utility.yul\":2360:2383   */\n      sub\n        /* \"#utility.yul\":2356:2388   */\n      slt\n        /* \"#utility.yul\":2353:2472   */\n      iszero\n      tag_502\n      jumpi\n        /* \"#utility.yul\":2391:2470   */\n      tag_503\n      tag_450\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":2353:2472   */\n    tag_502:\n        /* \"#utility.yul\":2511:2512   */\n      0x00\n        /* \"#utility.yul\":2536:2589   */\n      tag_504\n        /* \"#utility.yul\":2581:2588   */\n      dup5\n        /* \"#utility.yul\":2572:2578   */\n      dup3\n        /* \"#utility.yul\":2561:2570   */\n      dup6\n        /* \"#utility.yul\":2557:2579   */\n      add\n        /* \"#utility.yul\":2536:2589   */\n      tag_453\n      jump\t// in\n    tag_504:\n        /* \"#utility.yul\":2526:2589   */\n      swap2\n      pop\n        /* \"#utility.yul\":2482:2599   */\n      pop\n        /* \"#utility.yul\":2277:2606   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2612:2738   */\n    tag_454:\n        /* \"#utility.yul\":2649:2656   */\n      0x00\n        /* \"#utility.yul\":2689:2731   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2682:2687   */\n      dup3\n        /* \"#utility.yul\":2678:2732   */\n      and\n        /* \"#utility.yul\":2667:2732   */\n      swap1\n      pop\n        /* \"#utility.yul\":2612:2738   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2744:2840   */\n    tag_455:\n        /* \"#utility.yul\":2781:2788   */\n      0x00\n        /* \"#utility.yul\":2810:2834   */\n      tag_507\n        /* \"#utility.yul\":2828:2833   */\n      dup3\n        /* \"#utility.yul\":2810:2834   */\n      tag_454\n      jump\t// in\n    tag_507:\n        /* \"#utility.yul\":2799:2834   */\n      swap1\n      pop\n        /* \"#utility.yul\":2744:2840   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2846:2968   */\n    tag_456:\n        /* \"#utility.yul\":2919:2943   */\n      tag_509\n        /* \"#utility.yul\":2937:2942   */\n      dup2\n        /* \"#utility.yul\":2919:2943   */\n      tag_455\n      jump\t// in\n    tag_509:\n        /* \"#utility.yul\":2912:2917   */\n      dup2\n        /* \"#utility.yul\":2909:2944   */\n      eq\n        /* \"#utility.yul\":2899:2962   */\n      tag_510\n      jumpi\n        /* \"#utility.yul\":2958:2959   */\n      0x00\n        /* \"#utility.yul\":2955:2956   */\n      dup1\n        /* \"#utility.yul\":2948:2960   */\n      revert\n        /* \"#utility.yul\":2899:2962   */\n    tag_510:\n        /* \"#utility.yul\":2846:2968   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2974:3113   */\n    tag_457:\n        /* \"#utility.yul\":3020:3025   */\n      0x00\n        /* \"#utility.yul\":3058:3064   */\n      dup2\n        /* \"#utility.yul\":3045:3065   */\n      calldataload\n        /* \"#utility.yul\":3036:3065   */\n      swap1\n      pop\n        /* \"#utility.yul\":3074:3107   */\n      tag_512\n        /* \"#utility.yul\":3101:3106   */\n      dup2\n        /* \"#utility.yul\":3074:3107   */\n      tag_456\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":2974:3113   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3119:3593   */\n    tag_51:\n        /* \"#utility.yul\":3187:3193   */\n      0x00\n        /* \"#utility.yul\":3195:3201   */\n      dup1\n        /* \"#utility.yul\":3244:3246   */\n      0x40\n        /* \"#utility.yul\":3232:3241   */\n      dup4\n        /* \"#utility.yul\":3223:3230   */\n      dup6\n        /* \"#utility.yul\":3219:3242   */\n      sub\n        /* \"#utility.yul\":3215:3247   */\n      slt\n        /* \"#utility.yul\":3212:3331   */\n      iszero\n      tag_514\n      jumpi\n        /* \"#utility.yul\":3250:3329   */\n      tag_515\n      tag_450\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":3212:3331   */\n    tag_514:\n        /* \"#utility.yul\":3370:3371   */\n      0x00\n        /* \"#utility.yul\":3395:3448   */\n      tag_516\n        /* \"#utility.yul\":3440:3447   */\n      dup6\n        /* \"#utility.yul\":3431:3437   */\n      dup3\n        /* \"#utility.yul\":3420:3429   */\n      dup7\n        /* \"#utility.yul\":3416:3438   */\n      add\n        /* \"#utility.yul\":3395:3448   */\n      tag_457\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":3385:3448   */\n      swap3\n      pop\n        /* \"#utility.yul\":3341:3458   */\n      pop\n        /* \"#utility.yul\":3497:3499   */\n      0x20\n        /* \"#utility.yul\":3523:3576   */\n      tag_517\n        /* \"#utility.yul\":3568:3575   */\n      dup6\n        /* \"#utility.yul\":3559:3565   */\n      dup3\n        /* \"#utility.yul\":3548:3557   */\n      dup7\n        /* \"#utility.yul\":3544:3566   */\n      add\n        /* \"#utility.yul\":3523:3576   */\n      tag_453\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":3513:3576   */\n      swap2\n      pop\n        /* \"#utility.yul\":3468:3586   */\n      pop\n        /* \"#utility.yul\":3119:3593   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3599:3689   */\n    tag_458:\n        /* \"#utility.yul\":3633:3640   */\n      0x00\n        /* \"#utility.yul\":3676:3681   */\n      dup2\n        /* \"#utility.yul\":3669:3682   */\n      iszero\n        /* \"#utility.yul\":3662:3683   */\n      iszero\n        /* \"#utility.yul\":3651:3683   */\n      swap1\n      pop\n        /* \"#utility.yul\":3599:3689   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3695:3804   */\n    tag_459:\n        /* \"#utility.yul\":3776:3797   */\n      tag_520\n        /* \"#utility.yul\":3791:3796   */\n      dup2\n        /* \"#utility.yul\":3776:3797   */\n      tag_458\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":3771:3774   */\n      dup3\n        /* \"#utility.yul\":3764:3798   */\n      mstore\n        /* \"#utility.yul\":3695:3804   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3810:4020   */\n    tag_54:\n        /* \"#utility.yul\":3897:3901   */\n      0x00\n        /* \"#utility.yul\":3935:3937   */\n      0x20\n        /* \"#utility.yul\":3924:3933   */\n      dup3\n        /* \"#utility.yul\":3920:3938   */\n      add\n        /* \"#utility.yul\":3912:3938   */\n      swap1\n      pop\n        /* \"#utility.yul\":3948:4013   */\n      tag_522\n        /* \"#utility.yul\":4010:4011   */\n      0x00\n        /* \"#utility.yul\":3999:4008   */\n      dup4\n        /* \"#utility.yul\":3995:4012   */\n      add\n        /* \"#utility.yul\":3986:3992   */\n      dup5\n        /* \"#utility.yul\":3948:4013   */\n      tag_459\n      jump\t// in\n    tag_522:\n        /* \"#utility.yul\":3810:4020   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4026:4645   */\n    tag_64:\n        /* \"#utility.yul\":4103:4109   */\n      0x00\n        /* \"#utility.yul\":4111:4117   */\n      dup1\n        /* \"#utility.yul\":4119:4125   */\n      0x00\n        /* \"#utility.yul\":4168:4170   */\n      0x60\n        /* \"#utility.yul\":4156:4165   */\n      dup5\n        /* \"#utility.yul\":4147:4154   */\n      dup7\n        /* \"#utility.yul\":4143:4166   */\n      sub\n        /* \"#utility.yul\":4139:4171   */\n      slt\n        /* \"#utility.yul\":4136:4255   */\n      iszero\n      tag_524\n      jumpi\n        /* \"#utility.yul\":4174:4253   */\n      tag_525\n      tag_450\n      jump\t// in\n    tag_525:\n        /* \"#utility.yul\":4136:4255   */\n    tag_524:\n        /* \"#utility.yul\":4294:4295   */\n      0x00\n        /* \"#utility.yul\":4319:4372   */\n      tag_526\n        /* \"#utility.yul\":4364:4371   */\n      dup7\n        /* \"#utility.yul\":4355:4361   */\n      dup3\n        /* \"#utility.yul\":4344:4353   */\n      dup8\n        /* \"#utility.yul\":4340:4362   */\n      add\n        /* \"#utility.yul\":4319:4372   */\n      tag_457\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":4309:4372   */\n      swap4\n      pop\n        /* \"#utility.yul\":4265:4382   */\n      pop\n        /* \"#utility.yul\":4421:4423   */\n      0x20\n        /* \"#utility.yul\":4447:4500   */\n      tag_527\n        /* \"#utility.yul\":4492:4499   */\n      dup7\n        /* \"#utility.yul\":4483:4489   */\n      dup3\n        /* \"#utility.yul\":4472:4481   */\n      dup8\n        /* \"#utility.yul\":4468:4490   */\n      add\n        /* \"#utility.yul\":4447:4500   */\n      tag_457\n      jump\t// in\n    tag_527:\n        /* \"#utility.yul\":4437:4500   */\n      swap3\n      pop\n        /* \"#utility.yul\":4392:4510   */\n      pop\n        /* \"#utility.yul\":4549:4551   */\n      0x40\n        /* \"#utility.yul\":4575:4628   */\n      tag_528\n        /* \"#utility.yul\":4620:4627   */\n      dup7\n        /* \"#utility.yul\":4611:4617   */\n      dup3\n        /* \"#utility.yul\":4600:4609   */\n      dup8\n        /* \"#utility.yul\":4596:4618   */\n      add\n        /* \"#utility.yul\":4575:4628   */\n      tag_453\n      jump\t// in\n    tag_528:\n        /* \"#utility.yul\":4565:4628   */\n      swap2\n      pop\n        /* \"#utility.yul\":4520:4638   */\n      pop\n        /* \"#utility.yul\":4026:4645   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4651:4737   */\n    tag_460:\n        /* \"#utility.yul\":4686:4693   */\n      0x00\n        /* \"#utility.yul\":4726:4730   */\n      0xff\n        /* \"#utility.yul\":4719:4724   */\n      dup3\n        /* \"#utility.yul\":4715:4731   */\n      and\n        /* \"#utility.yul\":4704:4731   */\n      swap1\n      pop\n        /* \"#utility.yul\":4651:4737   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4743:4855   */\n    tag_461:\n        /* \"#utility.yul\":4826:4848   */\n      tag_531\n        /* \"#utility.yul\":4842:4847   */\n      dup2\n        /* \"#utility.yul\":4826:4848   */\n      tag_460\n      jump\t// in\n    tag_531:\n        /* \"#utility.yul\":4821:4824   */\n      dup3\n        /* \"#utility.yul\":4814:4849   */\n      mstore\n        /* \"#utility.yul\":4743:4855   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4861:5075   */\n    tag_70:\n        /* \"#utility.yul\":4950:4954   */\n      0x00\n        /* \"#utility.yul\":4988:4990   */\n      0x20\n        /* \"#utility.yul\":4977:4986   */\n      dup3\n        /* \"#utility.yul\":4973:4991   */\n      add\n        /* \"#utility.yul\":4965:4991   */\n      swap1\n      pop\n        /* \"#utility.yul\":5001:5068   */\n      tag_533\n        /* \"#utility.yul\":5065:5066   */\n      0x00\n        /* \"#utility.yul\":5054:5063   */\n      dup4\n        /* \"#utility.yul\":5050:5067   */\n      add\n        /* \"#utility.yul\":5041:5047   */\n      dup5\n        /* \"#utility.yul\":5001:5068   */\n      tag_461\n      jump\t// in\n    tag_533:\n        /* \"#utility.yul\":4861:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5199   */\n    tag_462:\n        /* \"#utility.yul\":5168:5192   */\n      tag_535\n        /* \"#utility.yul\":5186:5191   */\n      dup2\n        /* \"#utility.yul\":5168:5192   */\n      tag_455\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":5163:5166   */\n      dup3\n        /* \"#utility.yul\":5156:5193   */\n      mstore\n        /* \"#utility.yul\":5081:5199   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5205:5427   */\n    tag_74:\n        /* \"#utility.yul\":5298:5302   */\n      0x00\n        /* \"#utility.yul\":5336:5338   */\n      0x20\n        /* \"#utility.yul\":5325:5334   */\n      dup3\n        /* \"#utility.yul\":5321:5339   */\n      add\n        /* \"#utility.yul\":5313:5339   */\n      swap1\n      pop\n        /* \"#utility.yul\":5349:5420   */\n      tag_537\n        /* \"#utility.yul\":5417:5418   */\n      0x00\n        /* \"#utility.yul\":5406:5415   */\n      dup4\n        /* \"#utility.yul\":5402:5419   */\n      add\n        /* \"#utility.yul\":5393:5399   */\n      dup5\n        /* \"#utility.yul\":5349:5420   */\n      tag_462\n      jump\t// in\n    tag_537:\n        /* \"#utility.yul\":5205:5427   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5433:5762   */\n    tag_77:\n        /* \"#utility.yul\":5492:5498   */\n      0x00\n        /* \"#utility.yul\":5541:5543   */\n      0x20\n        /* \"#utility.yul\":5529:5538   */\n      dup3\n        /* \"#utility.yul\":5520:5527   */\n      dup5\n        /* \"#utility.yul\":5516:5539   */\n      sub\n        /* \"#utility.yul\":5512:5544   */\n      slt\n        /* \"#utility.yul\":5509:5628   */\n      iszero\n      tag_539\n      jumpi\n        /* \"#utility.yul\":5547:5626   */\n      tag_540\n      tag_450\n      jump\t// in\n    tag_540:\n        /* \"#utility.yul\":5509:5628   */\n    tag_539:\n        /* \"#utility.yul\":5667:5668   */\n      0x00\n        /* \"#utility.yul\":5692:5745   */\n      tag_541\n        /* \"#utility.yul\":5737:5744   */\n      dup5\n        /* \"#utility.yul\":5728:5734   */\n      dup3\n        /* \"#utility.yul\":5717:5726   */\n      dup6\n        /* \"#utility.yul\":5713:5735   */\n      add\n        /* \"#utility.yul\":5692:5745   */\n      tag_457\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":5682:5745   */\n      swap2\n      pop\n        /* \"#utility.yul\":5638:5755   */\n      pop\n        /* \"#utility.yul\":5433:5762   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5768:6242   */\n    tag_86:\n        /* \"#utility.yul\":5836:5842   */\n      0x00\n        /* \"#utility.yul\":5844:5850   */\n      dup1\n        /* \"#utility.yul\":5893:5895   */\n      0x40\n        /* \"#utility.yul\":5881:5890   */\n      dup4\n        /* \"#utility.yul\":5872:5879   */\n      dup6\n        /* \"#utility.yul\":5868:5891   */\n      sub\n        /* \"#utility.yul\":5864:5896   */\n      slt\n        /* \"#utility.yul\":5861:5980   */\n      iszero\n      tag_543\n      jumpi\n        /* \"#utility.yul\":5899:5978   */\n      tag_544\n      tag_450\n      jump\t// in\n    tag_544:\n        /* \"#utility.yul\":5861:5980   */\n    tag_543:\n        /* \"#utility.yul\":6019:6020   */\n      0x00\n        /* \"#utility.yul\":6044:6097   */\n      tag_545\n        /* \"#utility.yul\":6089:6096   */\n      dup6\n        /* \"#utility.yul\":6080:6086   */\n      dup3\n        /* \"#utility.yul\":6069:6078   */\n      dup7\n        /* \"#utility.yul\":6065:6087   */\n      add\n        /* \"#utility.yul\":6044:6097   */\n      tag_453\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":6034:6097   */\n      swap3\n      pop\n        /* \"#utility.yul\":5990:6107   */\n      pop\n        /* \"#utility.yul\":6146:6148   */\n      0x20\n        /* \"#utility.yul\":6172:6225   */\n      tag_546\n        /* \"#utility.yul\":6217:6224   */\n      dup6\n        /* \"#utility.yul\":6208:6214   */\n      dup3\n        /* \"#utility.yul\":6197:6206   */\n      dup7\n        /* \"#utility.yul\":6193:6215   */\n      add\n        /* \"#utility.yul\":6172:6225   */\n      tag_457\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":6162:6225   */\n      swap2\n      pop\n        /* \"#utility.yul\":6117:6235   */\n      pop\n        /* \"#utility.yul\":5768:6242   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6248:6352   */\n    tag_463:\n        /* \"#utility.yul\":6293:6300   */\n      0x00\n        /* \"#utility.yul\":6322:6346   */\n      tag_548\n        /* \"#utility.yul\":6340:6345   */\n      dup3\n        /* \"#utility.yul\":6322:6346   */\n      tag_454\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":6311:6346   */\n      swap1\n      pop\n        /* \"#utility.yul\":6248:6352   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6358:6500   */\n    tag_464:\n        /* \"#utility.yul\":6461:6493   */\n      tag_550\n        /* \"#utility.yul\":6487:6492   */\n      dup2\n        /* \"#utility.yul\":6461:6493   */\n      tag_463\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":6456:6459   */\n      dup3\n        /* \"#utility.yul\":6449:6494   */\n      mstore\n        /* \"#utility.yul\":6358:6500   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6506:6760   */\n    tag_96:\n        /* \"#utility.yul\":6615:6619   */\n      0x00\n        /* \"#utility.yul\":6653:6655   */\n      0x20\n        /* \"#utility.yul\":6642:6651   */\n      dup3\n        /* \"#utility.yul\":6638:6656   */\n      add\n        /* \"#utility.yul\":6630:6656   */\n      swap1\n      pop\n        /* \"#utility.yul\":6666:6753   */\n      tag_552\n        /* \"#utility.yul\":6750:6751   */\n      0x00\n        /* \"#utility.yul\":6739:6748   */\n      dup4\n        /* \"#utility.yul\":6735:6752   */\n      add\n        /* \"#utility.yul\":6726:6732   */\n      dup5\n        /* \"#utility.yul\":6666:6753   */\n      tag_464\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":6506:6760   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6766:7385   */\n    tag_114:\n        /* \"#utility.yul\":6843:6849   */\n      0x00\n        /* \"#utility.yul\":6851:6857   */\n      dup1\n        /* \"#utility.yul\":6859:6865   */\n      0x00\n        /* \"#utility.yul\":6908:6910   */\n      0x60\n        /* \"#utility.yul\":6896:6905   */\n      dup5\n        /* \"#utility.yul\":6887:6894   */\n      dup7\n        /* \"#utility.yul\":6883:6906   */\n      sub\n        /* \"#utility.yul\":6879:6911   */\n      slt\n        /* \"#utility.yul\":6876:6995   */\n      iszero\n      tag_554\n      jumpi\n        /* \"#utility.yul\":6914:6993   */\n      tag_555\n      tag_450\n      jump\t// in\n    tag_555:\n        /* \"#utility.yul\":6876:6995   */\n    tag_554:\n        /* \"#utility.yul\":7034:7035   */\n      0x00\n        /* \"#utility.yul\":7059:7112   */\n      tag_556\n        /* \"#utility.yul\":7104:7111   */\n      dup7\n        /* \"#utility.yul\":7095:7101   */\n      dup3\n        /* \"#utility.yul\":7084:7093   */\n      dup8\n        /* \"#utility.yul\":7080:7102   */\n      add\n        /* \"#utility.yul\":7059:7112   */\n      tag_453\n      jump\t// in\n    tag_556:\n        /* \"#utility.yul\":7049:7112   */\n      swap4\n      pop\n        /* \"#utility.yul\":7005:7122   */\n      pop\n        /* \"#utility.yul\":7161:7163   */\n      0x20\n        /* \"#utility.yul\":7187:7240   */\n      tag_557\n        /* \"#utility.yul\":7232:7239   */\n      dup7\n        /* \"#utility.yul\":7223:7229   */\n      dup3\n        /* \"#utility.yul\":7212:7221   */\n      dup8\n        /* \"#utility.yul\":7208:7230   */\n      add\n        /* \"#utility.yul\":7187:7240   */\n      tag_457\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":7177:7240   */\n      swap3\n      pop\n        /* \"#utility.yul\":7132:7250   */\n      pop\n        /* \"#utility.yul\":7289:7291   */\n      0x40\n        /* \"#utility.yul\":7315:7368   */\n      tag_558\n        /* \"#utility.yul\":7360:7367   */\n      dup7\n        /* \"#utility.yul\":7351:7357   */\n      dup3\n        /* \"#utility.yul\":7340:7349   */\n      dup8\n        /* \"#utility.yul\":7336:7358   */\n      add\n        /* \"#utility.yul\":7315:7368   */\n      tag_457\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":7305:7368   */\n      swap2\n      pop\n        /* \"#utility.yul\":7260:7378   */\n      pop\n        /* \"#utility.yul\":6766:7385   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":7391:7865   */\n    tag_142:\n        /* \"#utility.yul\":7459:7465   */\n      0x00\n        /* \"#utility.yul\":7467:7473   */\n      dup1\n        /* \"#utility.yul\":7516:7518   */\n      0x40\n        /* \"#utility.yul\":7504:7513   */\n      dup4\n        /* \"#utility.yul\":7495:7502   */\n      dup6\n        /* \"#utility.yul\":7491:7514   */\n      sub\n        /* \"#utility.yul\":7487:7519   */\n      slt\n        /* \"#utility.yul\":7484:7603   */\n      iszero\n      tag_560\n      jumpi\n        /* \"#utility.yul\":7522:7601   */\n      tag_561\n      tag_450\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":7484:7603   */\n    tag_560:\n        /* \"#utility.yul\":7642:7643   */\n      0x00\n        /* \"#utility.yul\":7667:7720   */\n      tag_562\n        /* \"#utility.yul\":7712:7719   */\n      dup6\n        /* \"#utility.yul\":7703:7709   */\n      dup3\n        /* \"#utility.yul\":7692:7701   */\n      dup7\n        /* \"#utility.yul\":7688:7710   */\n      add\n        /* \"#utility.yul\":7667:7720   */\n      tag_457\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":7657:7720   */\n      swap3\n      pop\n        /* \"#utility.yul\":7613:7730   */\n      pop\n        /* \"#utility.yul\":7769:7771   */\n      0x20\n        /* \"#utility.yul\":7795:7848   */\n      tag_563\n        /* \"#utility.yul\":7840:7847   */\n      dup6\n        /* \"#utility.yul\":7831:7837   */\n      dup3\n        /* \"#utility.yul\":7820:7829   */\n      dup7\n        /* \"#utility.yul\":7816:7838   */\n      add\n        /* \"#utility.yul\":7795:7848   */\n      tag_457\n      jump\t// in\n    tag_563:\n        /* \"#utility.yul\":7785:7848   */\n      swap2\n      pop\n        /* \"#utility.yul\":7740:7858   */\n      pop\n        /* \"#utility.yul\":7391:7865   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7871:8014   */\n    tag_465:\n        /* \"#utility.yul\":7928:7933   */\n      0x00\n        /* \"#utility.yul\":7959:7965   */\n      dup2\n        /* \"#utility.yul\":7953:7966   */\n      mload\n        /* \"#utility.yul\":7944:7966   */\n      swap1\n      pop\n        /* \"#utility.yul\":7975:8008   */\n      tag_565\n        /* \"#utility.yul\":8002:8007   */\n      dup2\n        /* \"#utility.yul\":7975:8008   */\n      tag_452\n      jump\t// in\n    tag_565:\n        /* \"#utility.yul\":7871:8014   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8020:8371   */\n    tag_154:\n        /* \"#utility.yul\":8090:8096   */\n      0x00\n        /* \"#utility.yul\":8139:8141   */\n      0x20\n        /* \"#utility.yul\":8127:8136   */\n      dup3\n        /* \"#utility.yul\":8118:8125   */\n      dup5\n        /* \"#utility.yul\":8114:8137   */\n      sub\n        /* \"#utility.yul\":8110:8142   */\n      slt\n        /* \"#utility.yul\":8107:8226   */\n      iszero\n      tag_567\n      jumpi\n        /* \"#utility.yul\":8145:8224   */\n      tag_568\n      tag_450\n      jump\t// in\n    tag_568:\n        /* \"#utility.yul\":8107:8226   */\n    tag_567:\n        /* \"#utility.yul\":8265:8266   */\n      0x00\n        /* \"#utility.yul\":8290:8354   */\n      tag_569\n        /* \"#utility.yul\":8346:8353   */\n      dup5\n        /* \"#utility.yul\":8337:8343   */\n      dup3\n        /* \"#utility.yul\":8326:8335   */\n      dup6\n        /* \"#utility.yul\":8322:8344   */\n      add\n        /* \"#utility.yul\":8290:8354   */\n      tag_465\n      jump\t// in\n    tag_569:\n        /* \"#utility.yul\":8280:8354   */\n      swap2\n      pop\n        /* \"#utility.yul\":8236:8364   */\n      pop\n        /* \"#utility.yul\":8020:8371   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8377:8557   */\n    tag_466:\n        /* \"#utility.yul\":8425:8502   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8422:8423   */\n      0x00\n        /* \"#utility.yul\":8415:8503   */\n      mstore\n        /* \"#utility.yul\":8522:8526   */\n      0x22\n        /* \"#utility.yul\":8519:8520   */\n      0x04\n        /* \"#utility.yul\":8512:8527   */\n      mstore\n        /* \"#utility.yul\":8546:8550   */\n      0x24\n        /* \"#utility.yul\":8543:8544   */\n      0x00\n        /* \"#utility.yul\":8536:8551   */\n      revert\n        /* \"#utility.yul\":8563:8883   */\n    tag_157:\n        /* \"#utility.yul\":8607:8613   */\n      0x00\n        /* \"#utility.yul\":8644:8645   */\n      0x02\n        /* \"#utility.yul\":8638:8642   */\n      dup3\n        /* \"#utility.yul\":8634:8646   */\n      div\n        /* \"#utility.yul\":8624:8646   */\n      swap1\n      pop\n        /* \"#utility.yul\":8691:8692   */\n      0x01\n        /* \"#utility.yul\":8685:8689   */\n      dup3\n        /* \"#utility.yul\":8681:8693   */\n      and\n        /* \"#utility.yul\":8712:8730   */\n      dup1\n        /* \"#utility.yul\":8702:8783   */\n      tag_572\n      jumpi\n        /* \"#utility.yul\":8768:8772   */\n      0x7f\n        /* \"#utility.yul\":8760:8766   */\n      dup3\n        /* \"#utility.yul\":8756:8773   */\n      and\n        /* \"#utility.yul\":8746:8773   */\n      swap2\n      pop\n        /* \"#utility.yul\":8702:8783   */\n    tag_572:\n        /* \"#utility.yul\":8830:8832   */\n      0x20\n        /* \"#utility.yul\":8822:8828   */\n      dup3\n        /* \"#utility.yul\":8819:8833   */\n      lt\n        /* \"#utility.yul\":8799:8817   */\n      dup2\n        /* \"#utility.yul\":8796:8834   */\n      sub\n        /* \"#utility.yul\":8793:8877   */\n      tag_573\n      jumpi\n        /* \"#utility.yul\":8849:8867   */\n      tag_574\n      tag_466\n      jump\t// in\n    tag_574:\n        /* \"#utility.yul\":8793:8877   */\n    tag_573:\n        /* \"#utility.yul\":8614:8883   */\n      pop\n        /* \"#utility.yul\":8563:8883   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8889:9069   */\n    tag_467:\n        /* \"#utility.yul\":8937:9014   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8934:8935   */\n      0x00\n        /* \"#utility.yul\":8927:9015   */\n      mstore\n        /* \"#utility.yul\":9034:9038   */\n      0x11\n        /* \"#utility.yul\":9031:9032   */\n      0x04\n        /* \"#utility.yul\":9024:9039   */\n      mstore\n        /* \"#utility.yul\":9058:9062   */\n      0x24\n        /* \"#utility.yul\":9055:9056   */\n      0x00\n        /* \"#utility.yul\":9048:9063   */\n      revert\n        /* \"#utility.yul\":9075:9266   */\n    tag_177:\n        /* \"#utility.yul\":9115:9118   */\n      0x00\n        /* \"#utility.yul\":9134:9154   */\n      tag_577\n        /* \"#utility.yul\":9152:9153   */\n      dup3\n        /* \"#utility.yul\":9134:9154   */\n      tag_442\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":9129:9154   */\n      swap2\n      pop\n        /* \"#utility.yul\":9168:9188   */\n      tag_578\n        /* \"#utility.yul\":9186:9187   */\n      dup4\n        /* \"#utility.yul\":9168:9188   */\n      tag_442\n      jump\t// in\n    tag_578:\n        /* \"#utility.yul\":9163:9188   */\n      swap3\n      pop\n        /* \"#utility.yul\":9211:9212   */\n      dup3\n        /* \"#utility.yul\":9208:9209   */\n      dup3\n        /* \"#utility.yul\":9204:9213   */\n      add\n        /* \"#utility.yul\":9197:9213   */\n      swap1\n      pop\n        /* \"#utility.yul\":9232:9235   */\n      dup1\n        /* \"#utility.yul\":9229:9230   */\n      dup3\n        /* \"#utility.yul\":9226:9236   */\n      gt\n        /* \"#utility.yul\":9223:9259   */\n      iszero\n      tag_579\n      jumpi\n        /* \"#utility.yul\":9239:9257   */\n      tag_580\n      tag_467\n      jump\t// in\n    tag_580:\n        /* \"#utility.yul\":9223:9259   */\n    tag_579:\n        /* \"#utility.yul\":9075:9266   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9272:9460   */\n    tag_190:\n        /* \"#utility.yul\":9310:9313   */\n      0x00\n        /* \"#utility.yul\":9329:9347   */\n      tag_582\n        /* \"#utility.yul\":9345:9346   */\n      dup3\n        /* \"#utility.yul\":9329:9347   */\n      tag_460\n      jump\t// in\n    tag_582:\n        /* \"#utility.yul\":9324:9347   */\n      swap2\n      pop\n        /* \"#utility.yul\":9361:9379   */\n      tag_583\n        /* \"#utility.yul\":9377:9378   */\n      dup4\n        /* \"#utility.yul\":9361:9379   */\n      tag_460\n      jump\t// in\n    tag_583:\n        /* \"#utility.yul\":9356:9379   */\n      swap3\n      pop\n        /* \"#utility.yul\":9402:9403   */\n      dup3\n        /* \"#utility.yul\":9399:9400   */\n      dup3\n        /* \"#utility.yul\":9395:9404   */\n      add\n        /* \"#utility.yul\":9388:9404   */\n      swap1\n      pop\n        /* \"#utility.yul\":9425:9429   */\n      0xff\n        /* \"#utility.yul\":9420:9423   */\n      dup2\n        /* \"#utility.yul\":9417:9430   */\n      gt\n        /* \"#utility.yul\":9414:9453   */\n      iszero\n      tag_584\n      jumpi\n        /* \"#utility.yul\":9433:9451   */\n      tag_585\n      tag_467\n      jump\t// in\n    tag_585:\n        /* \"#utility.yul\":9414:9453   */\n    tag_584:\n        /* \"#utility.yul\":9272:9460   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9466:9660   */\n    tag_200:\n        /* \"#utility.yul\":9506:9510   */\n      0x00\n        /* \"#utility.yul\":9526:9546   */\n      tag_587\n        /* \"#utility.yul\":9544:9545   */\n      dup3\n        /* \"#utility.yul\":9526:9546   */\n      tag_442\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":9521:9546   */\n      swap2\n      pop\n        /* \"#utility.yul\":9560:9580   */\n      tag_588\n        /* \"#utility.yul\":9578:9579   */\n      dup4\n        /* \"#utility.yul\":9560:9580   */\n      tag_442\n      jump\t// in\n    tag_588:\n        /* \"#utility.yul\":9555:9580   */\n      swap3\n      pop\n        /* \"#utility.yul\":9604:9605   */\n      dup3\n        /* \"#utility.yul\":9601:9602   */\n      dup3\n        /* \"#utility.yul\":9597:9606   */\n      sub\n        /* \"#utility.yul\":9589:9606   */\n      swap1\n      pop\n        /* \"#utility.yul\":9628:9629   */\n      dup2\n        /* \"#utility.yul\":9622:9626   */\n      dup2\n        /* \"#utility.yul\":9619:9630   */\n      gt\n        /* \"#utility.yul\":9616:9653   */\n      iszero\n      tag_589\n      jumpi\n        /* \"#utility.yul\":9633:9651   */\n      tag_590\n      tag_467\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":9616:9653   */\n    tag_589:\n        /* \"#utility.yul\":9466:9660   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9666:10108   */\n    tag_205:\n        /* \"#utility.yul\":9815:9819   */\n      0x00\n        /* \"#utility.yul\":9853:9855   */\n      0x60\n        /* \"#utility.yul\":9842:9851   */\n      dup3\n        /* \"#utility.yul\":9838:9856   */\n      add\n        /* \"#utility.yul\":9830:9856   */\n      swap1\n      pop\n        /* \"#utility.yul\":9866:9937   */\n      tag_592\n        /* \"#utility.yul\":9934:9935   */\n      0x00\n        /* \"#utility.yul\":9923:9932   */\n      dup4\n        /* \"#utility.yul\":9919:9936   */\n      add\n        /* \"#utility.yul\":9910:9916   */\n      dup7\n        /* \"#utility.yul\":9866:9937   */\n      tag_462\n      jump\t// in\n    tag_592:\n        /* \"#utility.yul\":9947:10019   */\n      tag_593\n        /* \"#utility.yul\":10015:10017   */\n      0x20\n        /* \"#utility.yul\":10004:10013   */\n      dup4\n        /* \"#utility.yul\":10000:10018   */\n      add\n        /* \"#utility.yul\":9991:9997   */\n      dup6\n        /* \"#utility.yul\":9947:10019   */\n      tag_443\n      jump\t// in\n    tag_593:\n        /* \"#utility.yul\":10029:10101   */\n      tag_594\n        /* \"#utility.yul\":10097:10099   */\n      0x40\n        /* \"#utility.yul\":10086:10095   */\n      dup4\n        /* \"#utility.yul\":10082:10100   */\n      add\n        /* \"#utility.yul\":10073:10079   */\n      dup5\n        /* \"#utility.yul\":10029:10101   */\n      tag_443\n      jump\t// in\n    tag_594:\n        /* \"#utility.yul\":9666:10108   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10114:10216   */\n    tag_468:\n        /* \"#utility.yul\":10156:10164   */\n      0x00\n        /* \"#utility.yul\":10203:10208   */\n      dup2\n        /* \"#utility.yul\":10200:10201   */\n      0x01\n        /* \"#utility.yul\":10196:10209   */\n      shr\n        /* \"#utility.yul\":10175:10209   */\n      swap1\n      pop\n        /* \"#utility.yul\":10114:10216   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10222:11070   */\n    tag_469:\n        /* \"#utility.yul\":10283:10288   */\n      0x00\n        /* \"#utility.yul\":10290:10294   */\n      dup1\n        /* \"#utility.yul\":10314:10320   */\n      dup3\n        /* \"#utility.yul\":10305:10320   */\n      swap2\n      pop\n        /* \"#utility.yul\":10338:10343   */\n      dup4\n        /* \"#utility.yul\":10329:10343   */\n      swap1\n      pop\n        /* \"#utility.yul\":10352:11064   */\n    tag_597:\n        /* \"#utility.yul\":10373:10374   */\n      0x01\n        /* \"#utility.yul\":10363:10371   */\n      dup6\n        /* \"#utility.yul\":10360:10375   */\n      gt\n        /* \"#utility.yul\":10352:11064   */\n      iszero\n      tag_599\n      jumpi\n        /* \"#utility.yul\":10468:10472   */\n      dup1\n        /* \"#utility.yul\":10463:10466   */\n      dup7\n        /* \"#utility.yul\":10459:10473   */\n      div\n        /* \"#utility.yul\":10453:10457   */\n      dup2\n        /* \"#utility.yul\":10450:10474   */\n      gt\n        /* \"#utility.yul\":10447:10497   */\n      iszero\n      tag_600\n      jumpi\n        /* \"#utility.yul\":10477:10495   */\n      tag_601\n      tag_467\n      jump\t// in\n    tag_601:\n        /* \"#utility.yul\":10447:10497   */\n    tag_600:\n        /* \"#utility.yul\":10527:10528   */\n      0x01\n        /* \"#utility.yul\":10517:10525   */\n      dup6\n        /* \"#utility.yul\":10513:10529   */\n      and\n        /* \"#utility.yul\":10510:10961   */\n      iszero\n      tag_602\n      jumpi\n        /* \"#utility.yul\":10942:10946   */\n      dup1\n        /* \"#utility.yul\":10935:10940   */\n      dup3\n        /* \"#utility.yul\":10931:10947   */\n      mul\n        /* \"#utility.yul\":10922:10947   */\n      swap2\n      pop\n        /* \"#utility.yul\":10510:10961   */\n    tag_602:\n        /* \"#utility.yul\":10992:10996   */\n      dup1\n        /* \"#utility.yul\":10986:10990   */\n      dup2\n        /* \"#utility.yul\":10982:10997   */\n      mul\n        /* \"#utility.yul\":10974:10997   */\n      swap1\n      pop\n        /* \"#utility.yul\":11022:11054   */\n      tag_603\n        /* \"#utility.yul\":11045:11053   */\n      dup6\n        /* \"#utility.yul\":11022:11054   */\n      tag_468\n      jump\t// in\n    tag_603:\n        /* \"#utility.yul\":11010:11054   */\n      swap5\n      pop\n        /* \"#utility.yul\":10352:11064   */\n      jump(tag_597)\n    tag_599:\n        /* \"#utility.yul\":10222:11070   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11076:12149   */\n    tag_470:\n        /* \"#utility.yul\":11130:11135   */\n      0x00\n        /* \"#utility.yul\":11321:11329   */\n      dup3\n        /* \"#utility.yul\":11311:11351   */\n      tag_605\n      jumpi\n        /* \"#utility.yul\":11342:11343   */\n      0x01\n        /* \"#utility.yul\":11333:11343   */\n      swap1\n      pop\n        /* \"#utility.yul\":11344:11349   */\n      jump(tag_604)\n        /* \"#utility.yul\":11311:11351   */\n    tag_605:\n        /* \"#utility.yul\":11370:11374   */\n      dup2\n        /* \"#utility.yul\":11360:11396   */\n      tag_606\n      jumpi\n        /* \"#utility.yul\":11387:11388   */\n      0x00\n        /* \"#utility.yul\":11378:11388   */\n      swap1\n      pop\n        /* \"#utility.yul\":11389:11394   */\n      jump(tag_604)\n        /* \"#utility.yul\":11360:11396   */\n    tag_606:\n        /* \"#utility.yul\":11456:11460   */\n      dup2\n        /* \"#utility.yul\":11504:11505   */\n      0x01\n        /* \"#utility.yul\":11499:11526   */\n      dup2\n      eq\n      tag_608\n      jumpi\n        /* \"#utility.yul\":11540:11541   */\n      0x02\n        /* \"#utility.yul\":11535:11726   */\n      dup2\n      eq\n      tag_609\n      jumpi\n        /* \"#utility.yul\":11449:11726   */\n      jump(tag_607)\n        /* \"#utility.yul\":11499:11526   */\n    tag_608:\n        /* \"#utility.yul\":11517:11518   */\n      0x01\n        /* \"#utility.yul\":11508:11518   */\n      swap2\n      pop\n        /* \"#utility.yul\":11519:11524   */\n      pop\n      jump(tag_604)\n        /* \"#utility.yul\":11535:11726   */\n    tag_609:\n        /* \"#utility.yul\":11580:11583   */\n      0xff\n        /* \"#utility.yul\":11570:11578   */\n      dup5\n        /* \"#utility.yul\":11567:11584   */\n      gt\n        /* \"#utility.yul\":11564:11607   */\n      iszero\n      tag_610\n      jumpi\n        /* \"#utility.yul\":11587:11605   */\n      tag_611\n      tag_467\n      jump\t// in\n    tag_611:\n        /* \"#utility.yul\":11564:11607   */\n    tag_610:\n        /* \"#utility.yul\":11636:11644   */\n      dup4\n        /* \"#utility.yul\":11633:11634   */\n      0x02\n        /* \"#utility.yul\":11629:11645   */\n      exp\n        /* \"#utility.yul\":11620:11645   */\n      swap2\n      pop\n        /* \"#utility.yul\":11671:11674   */\n      dup5\n        /* \"#utility.yul\":11664:11669   */\n      dup3\n        /* \"#utility.yul\":11661:11675   */\n      gt\n        /* \"#utility.yul\":11658:11698   */\n      iszero\n      tag_612\n      jumpi\n        /* \"#utility.yul\":11678:11696   */\n      tag_613\n      tag_467\n      jump\t// in\n    tag_613:\n        /* \"#utility.yul\":11658:11698   */\n    tag_612:\n        /* \"#utility.yul\":11711:11716   */\n      pop\n      jump(tag_604)\n        /* \"#utility.yul\":11449:11726   */\n    tag_607:\n      pop\n        /* \"#utility.yul\":11835:11837   */\n      0x20\n        /* \"#utility.yul\":11825:11833   */\n      dup4\n        /* \"#utility.yul\":11822:11838   */\n      lt\n        /* \"#utility.yul\":11816:11819   */\n      0x0133\n        /* \"#utility.yul\":11810:11814   */\n      dup4\n        /* \"#utility.yul\":11807:11820   */\n      lt\n        /* \"#utility.yul\":11803:11839   */\n      and\n        /* \"#utility.yul\":11785:11787   */\n      0x4e\n        /* \"#utility.yul\":11775:11783   */\n      dup5\n        /* \"#utility.yul\":11772:11788   */\n      lt\n        /* \"#utility.yul\":11767:11769   */\n      0x0b\n        /* \"#utility.yul\":11761:11765   */\n      dup5\n        /* \"#utility.yul\":11758:11770   */\n      lt\n        /* \"#utility.yul\":11754:11789   */\n      and\n        /* \"#utility.yul\":11738:11849   */\n      or\n        /* \"#utility.yul\":11735:11981   */\n      iszero\n      tag_614\n      jumpi\n        /* \"#utility.yul\":11891:11899   */\n      dup3\n        /* \"#utility.yul\":11885:11889   */\n      dup3\n        /* \"#utility.yul\":11881:11900   */\n      exp\n        /* \"#utility.yul\":11872:11900   */\n      swap1\n      pop\n        /* \"#utility.yul\":11926:11929   */\n      dup4\n        /* \"#utility.yul\":11919:11924   */\n      dup2\n        /* \"#utility.yul\":11916:11930   */\n      gt\n        /* \"#utility.yul\":11913:11953   */\n      iszero\n      tag_615\n      jumpi\n        /* \"#utility.yul\":11933:11951   */\n      tag_616\n      tag_467\n      jump\t// in\n    tag_616:\n        /* \"#utility.yul\":11913:11953   */\n    tag_615:\n        /* \"#utility.yul\":11966:11971   */\n      jump(tag_604)\n        /* \"#utility.yul\":11735:11981   */\n    tag_614:\n        /* \"#utility.yul\":12006:12048   */\n      tag_617\n        /* \"#utility.yul\":12044:12047   */\n      dup5\n        /* \"#utility.yul\":12034:12042   */\n      dup5\n        /* \"#utility.yul\":12028:12032   */\n      dup5\n        /* \"#utility.yul\":12025:12026   */\n      0x01\n        /* \"#utility.yul\":12006:12048   */\n      tag_469\n      jump\t// in\n    tag_617:\n        /* \"#utility.yul\":11991:12048   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":12080:12084   */\n      dup2\n        /* \"#utility.yul\":12075:12078   */\n      dup5\n        /* \"#utility.yul\":12071:12085   */\n      div\n        /* \"#utility.yul\":12064:12069   */\n      dup2\n        /* \"#utility.yul\":12061:12086   */\n      gt\n        /* \"#utility.yul\":12058:12109   */\n      iszero\n      tag_618\n      jumpi\n        /* \"#utility.yul\":12089:12107   */\n      tag_619\n      tag_467\n      jump\t// in\n    tag_619:\n        /* \"#utility.yul\":12058:12109   */\n    tag_618:\n        /* \"#utility.yul\":12138:12142   */\n      dup2\n        /* \"#utility.yul\":12131:12136   */\n      dup2\n        /* \"#utility.yul\":12127:12143   */\n      mul\n        /* \"#utility.yul\":12118:12143   */\n      swap1\n      pop\n        /* \"#utility.yul\":11076:12149   */\n    tag_604:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12155:12436   */\n    tag_271:\n        /* \"#utility.yul\":12213:12218   */\n      0x00\n        /* \"#utility.yul\":12237:12260   */\n      tag_621\n        /* \"#utility.yul\":12255:12259   */\n      dup3\n        /* \"#utility.yul\":12237:12260   */\n      tag_442\n      jump\t// in\n    tag_621:\n        /* \"#utility.yul\":12229:12260   */\n      swap2\n      pop\n        /* \"#utility.yul\":12281:12306   */\n      tag_622\n        /* \"#utility.yul\":12297:12305   */\n      dup4\n        /* \"#utility.yul\":12281:12306   */\n      tag_460\n      jump\t// in\n    tag_622:\n        /* \"#utility.yul\":12269:12306   */\n      swap3\n      pop\n        /* \"#utility.yul\":12325:12429   */\n      tag_623\n        /* \"#utility.yul\":12362:12428   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":12352:12360   */\n      dup5\n        /* \"#utility.yul\":12346:12350   */\n      dup5\n        /* \"#utility.yul\":12325:12429   */\n      tag_470\n      jump\t// in\n    tag_623:\n        /* \"#utility.yul\":12316:12429   */\n      swap1\n      pop\n        /* \"#utility.yul\":12155:12436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12442:12622   */\n    tag_347:\n        /* \"#utility.yul\":12490:12567   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12487:12488   */\n      0x00\n        /* \"#utility.yul\":12480:12568   */\n      mstore\n        /* \"#utility.yul\":12587:12591   */\n      0x12\n        /* \"#utility.yul\":12584:12585   */\n      0x04\n        /* \"#utility.yul\":12577:12592   */\n      mstore\n        /* \"#utility.yul\":12611:12615   */\n      0x24\n        /* \"#utility.yul\":12608:12609   */\n      0x00\n        /* \"#utility.yul\":12601:12616   */\n      revert\n        /* \"#utility.yul\":12628:12960   */\n    tag_373:\n        /* \"#utility.yul\":12749:12753   */\n      0x00\n        /* \"#utility.yul\":12787:12789   */\n      0x40\n        /* \"#utility.yul\":12776:12785   */\n      dup3\n        /* \"#utility.yul\":12772:12790   */\n      add\n        /* \"#utility.yul\":12764:12790   */\n      swap1\n      pop\n        /* \"#utility.yul\":12800:12871   */\n      tag_626\n        /* \"#utility.yul\":12868:12869   */\n      0x00\n        /* \"#utility.yul\":12857:12866   */\n      dup4\n        /* \"#utility.yul\":12853:12870   */\n      add\n        /* \"#utility.yul\":12844:12850   */\n      dup6\n        /* \"#utility.yul\":12800:12871   */\n      tag_443\n      jump\t// in\n    tag_626:\n        /* \"#utility.yul\":12881:12953   */\n      tag_627\n        /* \"#utility.yul\":12949:12951   */\n      0x20\n        /* \"#utility.yul\":12938:12947   */\n      dup4\n        /* \"#utility.yul\":12934:12952   */\n      add\n        /* \"#utility.yul\":12925:12931   */\n      dup5\n        /* \"#utility.yul\":12881:12953   */\n      tag_443\n      jump\t// in\n    tag_627:\n        /* \"#utility.yul\":12628:12960   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12966:13298   */\n    tag_377:\n        /* \"#utility.yul\":13087:13091   */\n      0x00\n        /* \"#utility.yul\":13125:13127   */\n      0x40\n        /* \"#utility.yul\":13114:13123   */\n      dup3\n        /* \"#utility.yul\":13110:13128   */\n      add\n        /* \"#utility.yul\":13102:13128   */\n      swap1\n      pop\n        /* \"#utility.yul\":13138:13209   */\n      tag_629\n        /* \"#utility.yul\":13206:13207   */\n      0x00\n        /* \"#utility.yul\":13195:13204   */\n      dup4\n        /* \"#utility.yul\":13191:13208   */\n      add\n        /* \"#utility.yul\":13182:13188   */\n      dup6\n        /* \"#utility.yul\":13138:13209   */\n      tag_462\n      jump\t// in\n    tag_629:\n        /* \"#utility.yul\":13219:13291   */\n      tag_630\n        /* \"#utility.yul\":13287:13289   */\n      0x20\n        /* \"#utility.yul\":13276:13285   */\n      dup4\n        /* \"#utility.yul\":13272:13290   */\n      add\n        /* \"#utility.yul\":13263:13269   */\n      dup5\n        /* \"#utility.yul\":13219:13291   */\n      tag_443\n      jump\t// in\n    tag_630:\n        /* \"#utility.yul\":12966:13298   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13304:13484   */\n    tag_395:\n        /* \"#utility.yul\":13352:13429   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13349:13350   */\n      0x00\n        /* \"#utility.yul\":13342:13430   */\n      mstore\n        /* \"#utility.yul\":13449:13453   */\n      0x21\n        /* \"#utility.yul\":13446:13447   */\n      0x04\n        /* \"#utility.yul\":13439:13454   */\n      mstore\n        /* \"#utility.yul\":13473:13477   */\n      0x24\n        /* \"#utility.yul\":13470:13471   */\n      0x00\n        /* \"#utility.yul\":13463:13478   */\n      revert\n        /* \"#utility.yul\":13490:13660   */\n    tag_397:\n        /* \"#utility.yul\":13520:13521   */\n      0x00\n        /* \"#utility.yul\":13537:13555   */\n      tag_633\n        /* \"#utility.yul\":13553:13554   */\n      dup3\n        /* \"#utility.yul\":13537:13555   */\n      tag_460\n      jump\t// in\n    tag_633:\n        /* \"#utility.yul\":13532:13555   */\n      swap2\n      pop\n        /* \"#utility.yul\":13569:13587   */\n      tag_634\n        /* \"#utility.yul\":13585:13586   */\n      dup4\n        /* \"#utility.yul\":13569:13587   */\n      tag_460\n      jump\t// in\n    tag_634:\n        /* \"#utility.yul\":13564:13587   */\n      swap3\n      pop\n        /* \"#utility.yul\":13606:13607   */\n      dup3\n        /* \"#utility.yul\":13596:13631   */\n      tag_635\n      jumpi\n        /* \"#utility.yul\":13611:13629   */\n      tag_636\n      tag_347\n      jump\t// in\n    tag_636:\n        /* \"#utility.yul\":13596:13631   */\n    tag_635:\n        /* \"#utility.yul\":13652:13653   */\n      dup3\n        /* \"#utility.yul\":13649:13650   */\n      dup3\n        /* \"#utility.yul\":13645:13654   */\n      mod\n        /* \"#utility.yul\":13640:13654   */\n      swap1\n      pop\n        /* \"#utility.yul\":13490:13660   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13666:14108   */\n    tag_401:\n        /* \"#utility.yul\":13815:13819   */\n      0x00\n        /* \"#utility.yul\":13853:13855   */\n      0x60\n        /* \"#utility.yul\":13842:13851   */\n      dup3\n        /* \"#utility.yul\":13838:13856   */\n      add\n        /* \"#utility.yul\":13830:13856   */\n      swap1\n      pop\n        /* \"#utility.yul\":13866:13937   */\n      tag_638\n        /* \"#utility.yul\":13934:13935   */\n      0x00\n        /* \"#utility.yul\":13923:13932   */\n      dup4\n        /* \"#utility.yul\":13919:13936   */\n      add\n        /* \"#utility.yul\":13910:13916   */\n      dup7\n        /* \"#utility.yul\":13866:13937   */\n      tag_462\n      jump\t// in\n    tag_638:\n        /* \"#utility.yul\":13947:14019   */\n      tag_639\n        /* \"#utility.yul\":14015:14017   */\n      0x20\n        /* \"#utility.yul\":14004:14013   */\n      dup4\n        /* \"#utility.yul\":14000:14018   */\n      add\n        /* \"#utility.yul\":13991:13997   */\n      dup6\n        /* \"#utility.yul\":13947:14019   */\n      tag_462\n      jump\t// in\n    tag_639:\n        /* \"#utility.yul\":14029:14101   */\n      tag_640\n        /* \"#utility.yul\":14097:14099   */\n      0x40\n        /* \"#utility.yul\":14086:14095   */\n      dup4\n        /* \"#utility.yul\":14082:14100   */\n      add\n        /* \"#utility.yul\":14073:14079   */\n      dup5\n        /* \"#utility.yul\":14029:14101   */\n      tag_443\n      jump\t// in\n    tag_640:\n        /* \"#utility.yul\":13666:14108   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14114:14230   */\n    tag_471:\n        /* \"#utility.yul\":14184:14205   */\n      tag_642\n        /* \"#utility.yul\":14199:14204   */\n      dup2\n        /* \"#utility.yul\":14184:14205   */\n      tag_458\n      jump\t// in\n    tag_642:\n        /* \"#utility.yul\":14177:14182   */\n      dup2\n        /* \"#utility.yul\":14174:14206   */\n      eq\n        /* \"#utility.yul\":14164:14224   */\n      tag_643\n      jumpi\n        /* \"#utility.yul\":14220:14221   */\n      0x00\n        /* \"#utility.yul\":14217:14218   */\n      dup1\n        /* \"#utility.yul\":14210:14222   */\n      revert\n        /* \"#utility.yul\":14164:14224   */\n    tag_643:\n        /* \"#utility.yul\":14114:14230   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14236:14373   */\n    tag_472:\n        /* \"#utility.yul\":14290:14295   */\n      0x00\n        /* \"#utility.yul\":14321:14327   */\n      dup2\n        /* \"#utility.yul\":14315:14328   */\n      mload\n        /* \"#utility.yul\":14306:14328   */\n      swap1\n      pop\n        /* \"#utility.yul\":14337:14367   */\n      tag_645\n        /* \"#utility.yul\":14361:14366   */\n      dup2\n        /* \"#utility.yul\":14337:14367   */\n      tag_471\n      jump\t// in\n    tag_645:\n        /* \"#utility.yul\":14236:14373   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14379:14724   */\n    tag_411:\n        /* \"#utility.yul\":14446:14452   */\n      0x00\n        /* \"#utility.yul\":14495:14497   */\n      0x20\n        /* \"#utility.yul\":14483:14492   */\n      dup3\n        /* \"#utility.yul\":14474:14481   */\n      dup5\n        /* \"#utility.yul\":14470:14493   */\n      sub\n        /* \"#utility.yul\":14466:14498   */\n      slt\n        /* \"#utility.yul\":14463:14582   */\n      iszero\n      tag_647\n      jumpi\n        /* \"#utility.yul\":14501:14580   */\n      tag_648\n      tag_450\n      jump\t// in\n    tag_648:\n        /* \"#utility.yul\":14463:14582   */\n    tag_647:\n        /* \"#utility.yul\":14621:14622   */\n      0x00\n        /* \"#utility.yul\":14646:14707   */\n      tag_649\n        /* \"#utility.yul\":14699:14706   */\n      dup5\n        /* \"#utility.yul\":14690:14696   */\n      dup3\n        /* \"#utility.yul\":14679:14688   */\n      dup6\n        /* \"#utility.yul\":14675:14697   */\n      add\n        /* \"#utility.yul\":14646:14707   */\n      tag_472\n      jump\t// in\n    tag_649:\n        /* \"#utility.yul\":14636:14707   */\n      swap2\n      pop\n        /* \"#utility.yul\":14592:14717   */\n      pop\n        /* \"#utility.yul\":14379:14724   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14730:14828   */\n    tag_473:\n        /* \"#utility.yul\":14781:14787   */\n      0x00\n        /* \"#utility.yul\":14815:14820   */\n      dup2\n        /* \"#utility.yul\":14809:14821   */\n      mload\n        /* \"#utility.yul\":14799:14821   */\n      swap1\n      pop\n        /* \"#utility.yul\":14730:14828   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14834:14981   */\n    tag_474:\n        /* \"#utility.yul\":14935:14946   */\n      0x00\n        /* \"#utility.yul\":14972:14975   */\n      dup2\n        /* \"#utility.yul\":14957:14975   */\n      swap1\n      pop\n        /* \"#utility.yul\":14834:14981   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14987:15373   */\n    tag_475:\n        /* \"#utility.yul\":15091:15094   */\n      0x00\n        /* \"#utility.yul\":15119:15157   */\n      tag_653\n        /* \"#utility.yul\":15151:15156   */\n      dup3\n        /* \"#utility.yul\":15119:15157   */\n      tag_473\n      jump\t// in\n    tag_653:\n        /* \"#utility.yul\":15173:15261   */\n      tag_654\n        /* \"#utility.yul\":15254:15260   */\n      dup2\n        /* \"#utility.yul\":15249:15252   */\n      dup6\n        /* \"#utility.yul\":15173:15261   */\n      tag_474\n      jump\t// in\n    tag_654:\n        /* \"#utility.yul\":15166:15261   */\n      swap4\n      pop\n        /* \"#utility.yul\":15270:15335   */\n      tag_655\n        /* \"#utility.yul\":15328:15334   */\n      dup2\n        /* \"#utility.yul\":15323:15326   */\n      dup6\n        /* \"#utility.yul\":15316:15320   */\n      0x20\n        /* \"#utility.yul\":15309:15314   */\n      dup7\n        /* \"#utility.yul\":15305:15321   */\n      add\n        /* \"#utility.yul\":15270:15335   */\n      tag_446\n      jump\t// in\n    tag_655:\n        /* \"#utility.yul\":15360:15366   */\n      dup1\n        /* \"#utility.yul\":15355:15358   */\n      dup5\n        /* \"#utility.yul\":15351:15367   */\n      add\n        /* \"#utility.yul\":15344:15367   */\n      swap2\n      pop\n        /* \"#utility.yul\":15095:15373   */\n      pop\n        /* \"#utility.yul\":14987:15373   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15379:15650   */\n    tag_425:\n        /* \"#utility.yul\":15509:15512   */\n      0x00\n        /* \"#utility.yul\":15531:15624   */\n      tag_657\n        /* \"#utility.yul\":15620:15623   */\n      dup3\n        /* \"#utility.yul\":15611:15617   */\n      dup5\n        /* \"#utility.yul\":15531:15624   */\n      tag_475\n      jump\t// in\n    tag_657:\n        /* \"#utility.yul\":15524:15624   */\n      swap2\n      pop\n        /* \"#utility.yul\":15641:15644   */\n      dup2\n        /* \"#utility.yul\":15634:15644   */\n      swap1\n      pop\n        /* \"#utility.yul\":15379:15650   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c733f6cb83933133afe6a4d42c9cdc1af596c077301b34c416913646670960b464736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1308": {
									"entryPoint": null,
									"id": 1308,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_3632": {
									"entryPoint": null,
									"id": 3632,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_679": {
									"entryPoint": null,
									"id": 679,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_tryGetAssetDecimals_1375": {
									"entryPoint": 373,
									"id": 1375,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"abi_decode_t_contract$_IERC20_$1220_fromMemory": {
									"entryPoint": 729,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 780,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC20_$1220t_uint256_fromMemory": {
									"entryPoint": 800,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1734,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1664,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1712,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 1010,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 1630,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 862,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1640,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1286,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 673,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_contract$_IERC20_$1220": {
									"entryPoint": 690,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 642,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 749,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1252,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 1145,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1423,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 1650,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 1028,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 962,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1396,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1136,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1368,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 917,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 872,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 1178,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 638,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"shift_left_dynamic": {
									"entryPoint": 1043,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1356,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 1228,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 1055,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 1187,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_contract$_IERC20_$1220": {
									"entryPoint": 707,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 758,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 1224,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8494:13",
										"nodeType": "YulBlock",
										"src": "0:8494:13",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:13",
													"nodeType": "YulBlock",
													"src": "47:35:13",
													"statements": [
														{
															"nativeSrc": "57:19:13",
															"nodeType": "YulAssignment",
															"src": "57:19:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:13",
																		"nodeType": "YulLiteral",
																		"src": "73:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:13"
																},
																"nativeSrc": "67:9:13",
																"nodeType": "YulFunctionCall",
																"src": "67:9:13"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:13"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:13",
														"nodeType": "YulTypedName",
														"src": "40:6:13",
														"type": ""
													}
												],
												"src": "7:75:13"
											},
											{
												"body": {
													"nativeSrc": "177:28:13",
													"nodeType": "YulBlock",
													"src": "177:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:13",
																		"nodeType": "YulLiteral",
																		"src": "194:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:13",
																		"nodeType": "YulLiteral",
																		"src": "197:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:13"
																},
																"nativeSrc": "187:12:13",
																"nodeType": "YulFunctionCall",
																"src": "187:12:13"
															},
															"nativeSrc": "187:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:13"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:13"
											},
											{
												"body": {
													"nativeSrc": "300:28:13",
													"nodeType": "YulBlock",
													"src": "300:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:13",
																		"nodeType": "YulLiteral",
																		"src": "317:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:13",
																		"nodeType": "YulLiteral",
																		"src": "320:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:13"
																},
																"nativeSrc": "310:12:13",
																"nodeType": "YulFunctionCall",
																"src": "310:12:13"
															},
															"nativeSrc": "310:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:13"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:13"
											},
											{
												"body": {
													"nativeSrc": "379:81:13",
													"nodeType": "YulBlock",
													"src": "379:81:13",
													"statements": [
														{
															"nativeSrc": "389:65:13",
															"nodeType": "YulAssignment",
															"src": "389:65:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:13",
																		"nodeType": "YulLiteral",
																		"src": "411:42:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:13"
																},
																"nativeSrc": "400:54:13",
																"nodeType": "YulFunctionCall",
																"src": "400:54:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:13",
														"nodeType": "YulTypedName",
														"src": "361:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:13",
														"nodeType": "YulTypedName",
														"src": "371:7:13",
														"type": ""
													}
												],
												"src": "334:126:13"
											},
											{
												"body": {
													"nativeSrc": "511:51:13",
													"nodeType": "YulBlock",
													"src": "511:51:13",
													"statements": [
														{
															"nativeSrc": "521:35:13",
															"nodeType": "YulAssignment",
															"src": "521:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:13"
																},
																"nativeSrc": "532:24:13",
																"nodeType": "YulFunctionCall",
																"src": "532:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:13",
														"nodeType": "YulTypedName",
														"src": "493:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:13",
														"nodeType": "YulTypedName",
														"src": "503:7:13",
														"type": ""
													}
												],
												"src": "466:96:13"
											},
											{
												"body": {
													"nativeSrc": "628:51:13",
													"nodeType": "YulBlock",
													"src": "628:51:13",
													"statements": [
														{
															"nativeSrc": "638:35:13",
															"nodeType": "YulAssignment",
															"src": "638:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "667:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "667:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_address",
																	"nativeSrc": "649:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "649:17:13"
																},
																"nativeSrc": "649:24:13",
																"nodeType": "YulFunctionCall",
																"src": "649:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "638:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "638:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_contract$_IERC20_$1220",
												"nativeSrc": "568:111:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "610:5:13",
														"nodeType": "YulTypedName",
														"src": "610:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "620:7:13",
														"nodeType": "YulTypedName",
														"src": "620:7:13",
														"type": ""
													}
												],
												"src": "568:111:13"
											},
											{
												"body": {
													"nativeSrc": "743:94:13",
													"nodeType": "YulBlock",
													"src": "743:94:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "815:16:13",
																"nodeType": "YulBlock",
																"src": "815:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "824:1:13",
																					"nodeType": "YulLiteral",
																					"src": "824:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "827:1:13",
																					"nodeType": "YulLiteral",
																					"src": "827:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "817:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "817:6:13"
																			},
																			"nativeSrc": "817:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "817:12:13"
																		},
																		"nativeSrc": "817:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "817:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "766:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "766:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "806:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "806:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_contract$_IERC20_$1220",
																					"nativeSrc": "773:32:13",
																					"nodeType": "YulIdentifier",
																					"src": "773:32:13"
																				},
																				"nativeSrc": "773:39:13",
																				"nodeType": "YulFunctionCall",
																				"src": "773:39:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "763:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "763:2:13"
																		},
																		"nativeSrc": "763:50:13",
																		"nodeType": "YulFunctionCall",
																		"src": "763:50:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "756:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "756:6:13"
																},
																"nativeSrc": "756:58:13",
																"nodeType": "YulFunctionCall",
																"src": "756:58:13"
															},
															"nativeSrc": "753:78:13",
															"nodeType": "YulIf",
															"src": "753:78:13"
														}
													]
												},
												"name": "validator_revert_t_contract$_IERC20_$1220",
												"nativeSrc": "685:152:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "736:5:13",
														"nodeType": "YulTypedName",
														"src": "736:5:13",
														"type": ""
													}
												],
												"src": "685:152:13"
											},
											{
												"body": {
													"nativeSrc": "921:95:13",
													"nodeType": "YulBlock",
													"src": "921:95:13",
													"statements": [
														{
															"nativeSrc": "931:22:13",
															"nodeType": "YulAssignment",
															"src": "931:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "946:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "946:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "940:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "940:5:13"
																},
																"nativeSrc": "940:13:13",
																"nodeType": "YulFunctionCall",
																"src": "940:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "931:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "931:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1004:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "1004:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_contract$_IERC20_$1220",
																	"nativeSrc": "962:41:13",
																	"nodeType": "YulIdentifier",
																	"src": "962:41:13"
																},
																"nativeSrc": "962:48:13",
																"nodeType": "YulFunctionCall",
																"src": "962:48:13"
															},
															"nativeSrc": "962:48:13",
															"nodeType": "YulExpressionStatement",
															"src": "962:48:13"
														}
													]
												},
												"name": "abi_decode_t_contract$_IERC20_$1220_fromMemory",
												"nativeSrc": "843:173:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "899:6:13",
														"nodeType": "YulTypedName",
														"src": "899:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "907:3:13",
														"nodeType": "YulTypedName",
														"src": "907:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "915:5:13",
														"nodeType": "YulTypedName",
														"src": "915:5:13",
														"type": ""
													}
												],
												"src": "843:173:13"
											},
											{
												"body": {
													"nativeSrc": "1067:32:13",
													"nodeType": "YulBlock",
													"src": "1067:32:13",
													"statements": [
														{
															"nativeSrc": "1077:16:13",
															"nodeType": "YulAssignment",
															"src": "1077:16:13",
															"value": {
																"name": "value",
																"nativeSrc": "1088:5:13",
																"nodeType": "YulIdentifier",
																"src": "1088:5:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1077:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "1077:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "1022:77:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1049:5:13",
														"nodeType": "YulTypedName",
														"src": "1049:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1059:7:13",
														"nodeType": "YulTypedName",
														"src": "1059:7:13",
														"type": ""
													}
												],
												"src": "1022:77:13"
											},
											{
												"body": {
													"nativeSrc": "1148:79:13",
													"nodeType": "YulBlock",
													"src": "1148:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "1205:16:13",
																"nodeType": "YulBlock",
																"src": "1205:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1214:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1214:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1217:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1217:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1207:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1207:6:13"
																			},
																			"nativeSrc": "1207:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1207:12:13"
																		},
																		"nativeSrc": "1207:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "1207:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1171:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "1171:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1196:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "1196:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "1178:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "1178:17:13"
																				},
																				"nativeSrc": "1178:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1178:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1168:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "1168:2:13"
																		},
																		"nativeSrc": "1168:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1168:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1161:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1161:6:13"
																},
																"nativeSrc": "1161:43:13",
																"nodeType": "YulFunctionCall",
																"src": "1161:43:13"
															},
															"nativeSrc": "1158:63:13",
															"nodeType": "YulIf",
															"src": "1158:63:13"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "1105:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1141:5:13",
														"nodeType": "YulTypedName",
														"src": "1141:5:13",
														"type": ""
													}
												],
												"src": "1105:122:13"
											},
											{
												"body": {
													"nativeSrc": "1296:80:13",
													"nodeType": "YulBlock",
													"src": "1296:80:13",
													"statements": [
														{
															"nativeSrc": "1306:22:13",
															"nodeType": "YulAssignment",
															"src": "1306:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1321:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1321:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1315:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1315:5:13"
																},
																"nativeSrc": "1315:13:13",
																"nodeType": "YulFunctionCall",
																"src": "1315:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1306:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1306:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1364:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "1364:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "1337:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "1337:26:13"
																},
																"nativeSrc": "1337:33:13",
																"nodeType": "YulFunctionCall",
																"src": "1337:33:13"
															},
															"nativeSrc": "1337:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "1337:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "1233:143:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1274:6:13",
														"nodeType": "YulTypedName",
														"src": "1274:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1282:3:13",
														"nodeType": "YulTypedName",
														"src": "1282:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1290:5:13",
														"nodeType": "YulTypedName",
														"src": "1290:5:13",
														"type": ""
													}
												],
												"src": "1233:143:13"
											},
											{
												"body": {
													"nativeSrc": "1491:428:13",
													"nodeType": "YulBlock",
													"src": "1491:428:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "1537:83:13",
																"nodeType": "YulBlock",
																"src": "1537:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "1539:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "1539:77:13"
																			},
																			"nativeSrc": "1539:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1539:79:13"
																		},
																		"nativeSrc": "1539:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "1539:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1512:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1512:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1521:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1521:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1508:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1508:3:13"
																		},
																		"nativeSrc": "1508:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1508:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1533:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1533:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1504:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1504:3:13"
																},
																"nativeSrc": "1504:32:13",
																"nodeType": "YulFunctionCall",
																"src": "1504:32:13"
															},
															"nativeSrc": "1501:119:13",
															"nodeType": "YulIf",
															"src": "1501:119:13"
														},
														{
															"nativeSrc": "1630:143:13",
															"nodeType": "YulBlock",
															"src": "1630:143:13",
															"statements": [
																{
																	"nativeSrc": "1645:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1645:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1659:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1649:6:13",
																			"nodeType": "YulTypedName",
																			"src": "1649:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1674:89:13",
																	"nodeType": "YulAssignment",
																	"src": "1674:89:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1735:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "1735:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1746:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "1746:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1731:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1731:3:13"
																				},
																				"nativeSrc": "1731:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1731:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1755:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1755:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_contract$_IERC20_$1220_fromMemory",
																			"nativeSrc": "1684:46:13",
																			"nodeType": "YulIdentifier",
																			"src": "1684:46:13"
																		},
																		"nativeSrc": "1684:79:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1684:79:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1674:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "1674:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "1783:129:13",
															"nodeType": "YulBlock",
															"src": "1783:129:13",
															"statements": [
																{
																	"nativeSrc": "1798:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1798:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1812:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1812:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1802:6:13",
																			"nodeType": "YulTypedName",
																			"src": "1802:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1828:74:13",
																	"nodeType": "YulAssignment",
																	"src": "1828:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1874:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "1874:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1885:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "1885:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1870:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1870:3:13"
																				},
																				"nativeSrc": "1870:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1870:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1894:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1894:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "1838:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "1838:31:13"
																		},
																		"nativeSrc": "1838:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1838:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "1828:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "1828:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC20_$1220t_uint256_fromMemory",
												"nativeSrc": "1382:537:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1453:9:13",
														"nodeType": "YulTypedName",
														"src": "1453:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1464:7:13",
														"nodeType": "YulTypedName",
														"src": "1464:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1476:6:13",
														"nodeType": "YulTypedName",
														"src": "1476:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1484:6:13",
														"nodeType": "YulTypedName",
														"src": "1484:6:13",
														"type": ""
													}
												],
												"src": "1382:537:13"
											},
											{
												"body": {
													"nativeSrc": "1984:40:13",
													"nodeType": "YulBlock",
													"src": "1984:40:13",
													"statements": [
														{
															"nativeSrc": "1995:22:13",
															"nodeType": "YulAssignment",
															"src": "1995:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2011:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2011:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2005:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "2005:5:13"
																},
																"nativeSrc": "2005:12:13",
																"nodeType": "YulFunctionCall",
																"src": "2005:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1995:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1995:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "1925:99:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1967:5:13",
														"nodeType": "YulTypedName",
														"src": "1967:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1977:6:13",
														"nodeType": "YulTypedName",
														"src": "1977:6:13",
														"type": ""
													}
												],
												"src": "1925:99:13"
											},
											{
												"body": {
													"nativeSrc": "2058:152:13",
													"nodeType": "YulBlock",
													"src": "2058:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2075:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2075:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2078:77:13",
																		"nodeType": "YulLiteral",
																		"src": "2078:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2068:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2068:6:13"
																},
																"nativeSrc": "2068:88:13",
																"nodeType": "YulFunctionCall",
																"src": "2068:88:13"
															},
															"nativeSrc": "2068:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "2068:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2172:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2172:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2175:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2175:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2165:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2165:6:13"
																},
																"nativeSrc": "2165:15:13",
																"nodeType": "YulFunctionCall",
																"src": "2165:15:13"
															},
															"nativeSrc": "2165:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "2165:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2196:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2196:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2199:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2199:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2189:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2189:6:13"
																},
																"nativeSrc": "2189:15:13",
																"nodeType": "YulFunctionCall",
																"src": "2189:15:13"
															},
															"nativeSrc": "2189:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "2189:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "2030:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "2030:180:13"
											},
											{
												"body": {
													"nativeSrc": "2244:152:13",
													"nodeType": "YulBlock",
													"src": "2244:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2261:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2261:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2264:77:13",
																		"nodeType": "YulLiteral",
																		"src": "2264:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2254:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2254:6:13"
																},
																"nativeSrc": "2254:88:13",
																"nodeType": "YulFunctionCall",
																"src": "2254:88:13"
															},
															"nativeSrc": "2254:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "2254:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2358:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2358:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2361:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2361:4:13",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2351:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2351:6:13"
																},
																"nativeSrc": "2351:15:13",
																"nodeType": "YulFunctionCall",
																"src": "2351:15:13"
															},
															"nativeSrc": "2351:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "2351:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2382:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2382:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2385:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2385:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2375:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2375:6:13"
																},
																"nativeSrc": "2375:15:13",
																"nodeType": "YulFunctionCall",
																"src": "2375:15:13"
															},
															"nativeSrc": "2375:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "2375:15:13"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "2216:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "2216:180:13"
											},
											{
												"body": {
													"nativeSrc": "2453:269:13",
													"nodeType": "YulBlock",
													"src": "2453:269:13",
													"statements": [
														{
															"nativeSrc": "2463:22:13",
															"nodeType": "YulAssignment",
															"src": "2463:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2477:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "2477:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2483:1:13",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2473:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2473:3:13"
																},
																"nativeSrc": "2473:12:13",
																"nodeType": "YulFunctionCall",
																"src": "2473:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "2463:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2463:6:13"
																}
															]
														},
														{
															"nativeSrc": "2494:38:13",
															"nodeType": "YulVariableDeclaration",
															"src": "2494:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2524:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "2524:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2530:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2530:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2520:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2520:3:13"
																},
																"nativeSrc": "2520:12:13",
																"nodeType": "YulFunctionCall",
																"src": "2520:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "2498:18:13",
																	"nodeType": "YulTypedName",
																	"src": "2498:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2571:51:13",
																"nodeType": "YulBlock",
																"src": "2571:51:13",
																"statements": [
																	{
																		"nativeSrc": "2585:27:13",
																		"nodeType": "YulAssignment",
																		"src": "2585:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "2599:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "2599:6:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2607:4:13",
																					"nodeType": "YulLiteral",
																					"src": "2607:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2595:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "2595:3:13"
																			},
																			"nativeSrc": "2595:17:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2595:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "2585:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2585:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2551:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "2551:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2544:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2544:6:13"
																},
																"nativeSrc": "2544:26:13",
																"nodeType": "YulFunctionCall",
																"src": "2544:26:13"
															},
															"nativeSrc": "2541:81:13",
															"nodeType": "YulIf",
															"src": "2541:81:13"
														},
														{
															"body": {
																"nativeSrc": "2674:42:13",
																"nodeType": "YulBlock",
																"src": "2674:42:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "2688:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "2688:16:13"
																			},
																			"nativeSrc": "2688:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2688:18:13"
																		},
																		"nativeSrc": "2688:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2688:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2638:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "2638:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2661:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2661:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2669:2:13",
																				"nodeType": "YulLiteral",
																				"src": "2669:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2658:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "2658:2:13"
																		},
																		"nativeSrc": "2658:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2658:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "2635:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "2635:2:13"
																},
																"nativeSrc": "2635:38:13",
																"nodeType": "YulFunctionCall",
																"src": "2635:38:13"
															},
															"nativeSrc": "2632:84:13",
															"nodeType": "YulIf",
															"src": "2632:84:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "2402:320:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2437:4:13",
														"nodeType": "YulTypedName",
														"src": "2437:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "2446:6:13",
														"nodeType": "YulTypedName",
														"src": "2446:6:13",
														"type": ""
													}
												],
												"src": "2402:320:13"
											},
											{
												"body": {
													"nativeSrc": "2782:87:13",
													"nodeType": "YulBlock",
													"src": "2782:87:13",
													"statements": [
														{
															"nativeSrc": "2792:11:13",
															"nodeType": "YulAssignment",
															"src": "2792:11:13",
															"value": {
																"name": "ptr",
																"nativeSrc": "2800:3:13",
																"nodeType": "YulIdentifier",
																"src": "2800:3:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2792:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2792:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2820:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2820:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "2823:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "2823:3:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2813:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2813:6:13"
																},
																"nativeSrc": "2813:14:13",
																"nodeType": "YulFunctionCall",
																"src": "2813:14:13"
															},
															"nativeSrc": "2813:14:13",
															"nodeType": "YulExpressionStatement",
															"src": "2813:14:13"
														},
														{
															"nativeSrc": "2836:26:13",
															"nodeType": "YulAssignment",
															"src": "2836:26:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2854:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2854:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2857:4:13",
																		"nodeType": "YulLiteral",
																		"src": "2857:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2844:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "2844:9:13"
																},
																"nativeSrc": "2844:18:13",
																"nodeType": "YulFunctionCall",
																"src": "2844:18:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2836:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2836:4:13"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "2728:141:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "2769:3:13",
														"nodeType": "YulTypedName",
														"src": "2769:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "2777:4:13",
														"nodeType": "YulTypedName",
														"src": "2777:4:13",
														"type": ""
													}
												],
												"src": "2728:141:13"
											},
											{
												"body": {
													"nativeSrc": "2919:49:13",
													"nodeType": "YulBlock",
													"src": "2919:49:13",
													"statements": [
														{
															"nativeSrc": "2929:33:13",
															"nodeType": "YulAssignment",
															"src": "2929:33:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2947:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2947:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2954:2:13",
																				"nodeType": "YulLiteral",
																				"src": "2954:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2943:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2943:3:13"
																		},
																		"nativeSrc": "2943:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2943:14:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2959:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2959:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2939:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2939:3:13"
																},
																"nativeSrc": "2939:23:13",
																"nodeType": "YulFunctionCall",
																"src": "2939:23:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2929:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2929:6:13"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "2875:93:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2902:5:13",
														"nodeType": "YulTypedName",
														"src": "2902:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2912:6:13",
														"nodeType": "YulTypedName",
														"src": "2912:6:13",
														"type": ""
													}
												],
												"src": "2875:93:13"
											},
											{
												"body": {
													"nativeSrc": "3027:54:13",
													"nodeType": "YulBlock",
													"src": "3027:54:13",
													"statements": [
														{
															"nativeSrc": "3037:37:13",
															"nodeType": "YulAssignment",
															"src": "3037:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "3062:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "3062:4:13"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "3068:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3068:5:13"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "3058:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3058:3:13"
																},
																"nativeSrc": "3058:16:13",
																"nodeType": "YulFunctionCall",
																"src": "3058:16:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "3037:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "3037:8:13"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "2974:107:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "3002:4:13",
														"nodeType": "YulTypedName",
														"src": "3002:4:13",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "3008:5:13",
														"nodeType": "YulTypedName",
														"src": "3008:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "3018:8:13",
														"nodeType": "YulTypedName",
														"src": "3018:8:13",
														"type": ""
													}
												],
												"src": "2974:107:13"
											},
											{
												"body": {
													"nativeSrc": "3163:317:13",
													"nodeType": "YulBlock",
													"src": "3163:317:13",
													"statements": [
														{
															"nativeSrc": "3173:35:13",
															"nodeType": "YulVariableDeclaration",
															"src": "3173:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "3194:10:13",
																		"nodeType": "YulIdentifier",
																		"src": "3194:10:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3206:1:13",
																		"nodeType": "YulLiteral",
																		"src": "3206:1:13",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "3190:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3190:3:13"
																},
																"nativeSrc": "3190:18:13",
																"nodeType": "YulFunctionCall",
																"src": "3190:18:13"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "3177:9:13",
																	"nodeType": "YulTypedName",
																	"src": "3177:9:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3217:109:13",
															"nodeType": "YulVariableDeclaration",
															"src": "3217:109:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "3248:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3248:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3259:66:13",
																		"nodeType": "YulLiteral",
																		"src": "3259:66:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "3229:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "3229:18:13"
																},
																"nativeSrc": "3229:97:13",
																"nodeType": "YulFunctionCall",
																"src": "3229:97:13"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "3221:4:13",
																	"nodeType": "YulTypedName",
																	"src": "3221:4:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3335:51:13",
															"nodeType": "YulAssignment",
															"src": "3335:51:13",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "3366:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3366:9:13"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "3377:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "3377:8:13"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "3347:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "3347:18:13"
																},
																"nativeSrc": "3347:39:13",
																"nodeType": "YulFunctionCall",
																"src": "3347:39:13"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "3335:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "3335:8:13"
																}
															]
														},
														{
															"nativeSrc": "3395:30:13",
															"nodeType": "YulAssignment",
															"src": "3395:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3408:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3408:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "3419:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "3419:4:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "3415:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3415:3:13"
																		},
																		"nativeSrc": "3415:9:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3415:9:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "3404:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3404:3:13"
																},
																"nativeSrc": "3404:21:13",
																"nodeType": "YulFunctionCall",
																"src": "3404:21:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3395:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "3395:5:13"
																}
															]
														},
														{
															"nativeSrc": "3434:40:13",
															"nodeType": "YulAssignment",
															"src": "3434:40:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3447:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3447:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "3458:8:13",
																				"nodeType": "YulIdentifier",
																				"src": "3458:8:13"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "3468:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "3468:4:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3454:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3454:3:13"
																		},
																		"nativeSrc": "3454:19:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3454:19:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "3444:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "3444:2:13"
																},
																"nativeSrc": "3444:30:13",
																"nodeType": "YulFunctionCall",
																"src": "3444:30:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "3434:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3434:6:13"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "3087:393:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3124:5:13",
														"nodeType": "YulTypedName",
														"src": "3124:5:13",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "3131:10:13",
														"nodeType": "YulTypedName",
														"src": "3131:10:13",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "3143:8:13",
														"nodeType": "YulTypedName",
														"src": "3143:8:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "3156:6:13",
														"nodeType": "YulTypedName",
														"src": "3156:6:13",
														"type": ""
													}
												],
												"src": "3087:393:13"
											},
											{
												"body": {
													"nativeSrc": "3518:28:13",
													"nodeType": "YulBlock",
													"src": "3518:28:13",
													"statements": [
														{
															"nativeSrc": "3528:12:13",
															"nodeType": "YulAssignment",
															"src": "3528:12:13",
															"value": {
																"name": "value",
																"nativeSrc": "3535:5:13",
																"nodeType": "YulIdentifier",
																"src": "3535:5:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3528:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3528:3:13"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "3486:60:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3504:5:13",
														"nodeType": "YulTypedName",
														"src": "3504:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3514:3:13",
														"nodeType": "YulTypedName",
														"src": "3514:3:13",
														"type": ""
													}
												],
												"src": "3486:60:13"
											},
											{
												"body": {
													"nativeSrc": "3612:82:13",
													"nodeType": "YulBlock",
													"src": "3612:82:13",
													"statements": [
														{
															"nativeSrc": "3622:66:13",
															"nodeType": "YulAssignment",
															"src": "3622:66:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3680:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "3680:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "3662:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "3662:17:13"
																				},
																				"nativeSrc": "3662:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3662:24:13"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "3653:8:13",
																			"nodeType": "YulIdentifier",
																			"src": "3653:8:13"
																		},
																		"nativeSrc": "3653:34:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3653:34:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3635:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "3635:17:13"
																},
																"nativeSrc": "3635:53:13",
																"nodeType": "YulFunctionCall",
																"src": "3635:53:13"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "3622:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "3622:9:13"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "3552:142:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3592:5:13",
														"nodeType": "YulTypedName",
														"src": "3592:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "3602:9:13",
														"nodeType": "YulTypedName",
														"src": "3602:9:13",
														"type": ""
													}
												],
												"src": "3552:142:13"
											},
											{
												"body": {
													"nativeSrc": "3747:28:13",
													"nodeType": "YulBlock",
													"src": "3747:28:13",
													"statements": [
														{
															"nativeSrc": "3757:12:13",
															"nodeType": "YulAssignment",
															"src": "3757:12:13",
															"value": {
																"name": "value",
																"nativeSrc": "3764:5:13",
																"nodeType": "YulIdentifier",
																"src": "3764:5:13"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3757:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3757:3:13"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "3700:75:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3733:5:13",
														"nodeType": "YulTypedName",
														"src": "3733:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3743:3:13",
														"nodeType": "YulTypedName",
														"src": "3743:3:13",
														"type": ""
													}
												],
												"src": "3700:75:13"
											},
											{
												"body": {
													"nativeSrc": "3857:193:13",
													"nodeType": "YulBlock",
													"src": "3857:193:13",
													"statements": [
														{
															"nativeSrc": "3867:63:13",
															"nodeType": "YulVariableDeclaration",
															"src": "3867:63:13",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "3922:7:13",
																		"nodeType": "YulIdentifier",
																		"src": "3922:7:13"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "3891:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "3891:30:13"
																},
																"nativeSrc": "3891:39:13",
																"nodeType": "YulFunctionCall",
																"src": "3891:39:13"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "3871:16:13",
																	"nodeType": "YulTypedName",
																	"src": "3871:16:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3946:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "3946:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "3986:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "3986:4:13"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "3980:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "3980:5:13"
																				},
																				"nativeSrc": "3980:11:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3980:11:13"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3993:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "3993:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "4025:16:13",
																						"nodeType": "YulIdentifier",
																						"src": "4025:16:13"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "4001:23:13",
																					"nodeType": "YulIdentifier",
																					"src": "4001:23:13"
																				},
																				"nativeSrc": "4001:41:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4001:41:13"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "3952:27:13",
																			"nodeType": "YulIdentifier",
																			"src": "3952:27:13"
																		},
																		"nativeSrc": "3952:91:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3952:91:13"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "3939:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3939:6:13"
																},
																"nativeSrc": "3939:105:13",
																"nodeType": "YulFunctionCall",
																"src": "3939:105:13"
															},
															"nativeSrc": "3939:105:13",
															"nodeType": "YulExpressionStatement",
															"src": "3939:105:13"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "3781:269:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3834:4:13",
														"nodeType": "YulTypedName",
														"src": "3834:4:13",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3840:6:13",
														"nodeType": "YulTypedName",
														"src": "3840:6:13",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "3848:7:13",
														"nodeType": "YulTypedName",
														"src": "3848:7:13",
														"type": ""
													}
												],
												"src": "3781:269:13"
											},
											{
												"body": {
													"nativeSrc": "4105:24:13",
													"nodeType": "YulBlock",
													"src": "4105:24:13",
													"statements": [
														{
															"nativeSrc": "4115:8:13",
															"nodeType": "YulAssignment",
															"src": "4115:8:13",
															"value": {
																"kind": "number",
																"nativeSrc": "4122:1:13",
																"nodeType": "YulLiteral",
																"src": "4122:1:13",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "4115:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4115:3:13"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "4056:73:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "4101:3:13",
														"nodeType": "YulTypedName",
														"src": "4101:3:13",
														"type": ""
													}
												],
												"src": "4056:73:13"
											},
											{
												"body": {
													"nativeSrc": "4188:136:13",
													"nodeType": "YulBlock",
													"src": "4188:136:13",
													"statements": [
														{
															"nativeSrc": "4198:46:13",
															"nodeType": "YulVariableDeclaration",
															"src": "4198:46:13",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "4212:30:13",
																	"nodeType": "YulIdentifier",
																	"src": "4212:30:13"
																},
																"nativeSrc": "4212:32:13",
																"nodeType": "YulFunctionCall",
																"src": "4212:32:13"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "4202:6:13",
																	"nodeType": "YulTypedName",
																	"src": "4202:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "4297:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "4297:4:13"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "4303:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "4303:6:13"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "4311:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "4311:6:13"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "4253:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "4253:43:13"
																},
																"nativeSrc": "4253:65:13",
																"nodeType": "YulFunctionCall",
																"src": "4253:65:13"
															},
															"nativeSrc": "4253:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "4253:65:13"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "4135:189:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "4174:4:13",
														"nodeType": "YulTypedName",
														"src": "4174:4:13",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "4180:6:13",
														"nodeType": "YulTypedName",
														"src": "4180:6:13",
														"type": ""
													}
												],
												"src": "4135:189:13"
											},
											{
												"body": {
													"nativeSrc": "4380:136:13",
													"nodeType": "YulBlock",
													"src": "4380:136:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "4447:63:13",
																"nodeType": "YulBlock",
																"src": "4447:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "4491:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "4491:5:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4498:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4498:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "4461:29:13",
																				"nodeType": "YulIdentifier",
																				"src": "4461:29:13"
																			},
																			"nativeSrc": "4461:39:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4461:39:13"
																		},
																		"nativeSrc": "4461:39:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4461:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "4400:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "4400:5:13"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "4407:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "4407:3:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4397:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "4397:2:13"
																},
																"nativeSrc": "4397:14:13",
																"nodeType": "YulFunctionCall",
																"src": "4397:14:13"
															},
															"nativeSrc": "4390:120:13",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "4412:26:13",
																"nodeType": "YulBlock",
																"src": "4412:26:13",
																"statements": [
																	{
																		"nativeSrc": "4414:22:13",
																		"nodeType": "YulAssignment",
																		"src": "4414:22:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "4427:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "4427:5:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4434:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4434:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4423:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "4423:3:13"
																			},
																			"nativeSrc": "4423:13:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4423:13:13"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "4414:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "4414:5:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "4394:2:13",
																"nodeType": "YulBlock",
																"src": "4394:2:13",
																"statements": []
															},
															"src": "4390:120:13"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "4330:186:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "4368:5:13",
														"nodeType": "YulTypedName",
														"src": "4368:5:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "4375:3:13",
														"nodeType": "YulTypedName",
														"src": "4375:3:13",
														"type": ""
													}
												],
												"src": "4330:186:13"
											},
											{
												"body": {
													"nativeSrc": "4601:464:13",
													"nodeType": "YulBlock",
													"src": "4601:464:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "4627:431:13",
																"nodeType": "YulBlock",
																"src": "4627:431:13",
																"statements": [
																	{
																		"nativeSrc": "4641:54:13",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4641:54:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "4689:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "4689:5:13"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "4657:31:13",
																				"nodeType": "YulIdentifier",
																				"src": "4657:31:13"
																			},
																			"nativeSrc": "4657:38:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4657:38:13"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "4645:8:13",
																				"nodeType": "YulTypedName",
																				"src": "4645:8:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4708:63:13",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4708:63:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "4731:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "4731:8:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "4759:10:13",
																							"nodeType": "YulIdentifier",
																							"src": "4759:10:13"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "4741:17:13",
																						"nodeType": "YulIdentifier",
																						"src": "4741:17:13"
																					},
																					"nativeSrc": "4741:29:13",
																					"nodeType": "YulFunctionCall",
																					"src": "4741:29:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4727:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "4727:3:13"
																			},
																			"nativeSrc": "4727:44:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4727:44:13"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4712:11:13",
																				"nodeType": "YulTypedName",
																				"src": "4712:11:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4928:27:13",
																			"nodeType": "YulBlock",
																			"src": "4928:27:13",
																			"statements": [
																				{
																					"nativeSrc": "4930:23:13",
																					"nodeType": "YulAssignment",
																					"src": "4930:23:13",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "4945:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "4945:8:13"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4930:11:13",
																							"nodeType": "YulIdentifier",
																							"src": "4930:11:13"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4912:10:13",
																					"nodeType": "YulIdentifier",
																					"src": "4912:10:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4924:2:13",
																					"nodeType": "YulLiteral",
																					"src": "4924:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4909:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "4909:2:13"
																			},
																			"nativeSrc": "4909:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4909:18:13"
																		},
																		"nativeSrc": "4906:49:13",
																		"nodeType": "YulIf",
																		"src": "4906:49:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "4997:11:13",
																					"nodeType": "YulIdentifier",
																					"src": "4997:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "5014:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "5014:8:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "5042:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "5042:3:13"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "5024:17:13",
																								"nodeType": "YulIdentifier",
																								"src": "5024:17:13"
																							},
																							"nativeSrc": "5024:22:13",
																							"nodeType": "YulFunctionCall",
																							"src": "5024:22:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "5010:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "5010:3:13"
																					},
																					"nativeSrc": "5010:37:13",
																					"nodeType": "YulFunctionCall",
																					"src": "5010:37:13"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "4968:28:13",
																				"nodeType": "YulIdentifier",
																				"src": "4968:28:13"
																			},
																			"nativeSrc": "4968:80:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4968:80:13"
																		},
																		"nativeSrc": "4968:80:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4968:80:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "4618:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "4618:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4623:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4623:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4615:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "4615:2:13"
																},
																"nativeSrc": "4615:11:13",
																"nodeType": "YulFunctionCall",
																"src": "4615:11:13"
															},
															"nativeSrc": "4612:446:13",
															"nodeType": "YulIf",
															"src": "4612:446:13"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "4522:543:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "4577:5:13",
														"nodeType": "YulTypedName",
														"src": "4577:5:13",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4584:3:13",
														"nodeType": "YulTypedName",
														"src": "4584:3:13",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "4589:10:13",
														"nodeType": "YulTypedName",
														"src": "4589:10:13",
														"type": ""
													}
												],
												"src": "4522:543:13"
											},
											{
												"body": {
													"nativeSrc": "5134:54:13",
													"nodeType": "YulBlock",
													"src": "5134:54:13",
													"statements": [
														{
															"nativeSrc": "5144:37:13",
															"nodeType": "YulAssignment",
															"src": "5144:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "5169:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5169:4:13"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "5175:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "5175:5:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "5165:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5165:3:13"
																},
																"nativeSrc": "5165:16:13",
																"nodeType": "YulFunctionCall",
																"src": "5165:16:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "5144:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "5144:8:13"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "5071:117:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "5109:4:13",
														"nodeType": "YulTypedName",
														"src": "5109:4:13",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "5115:5:13",
														"nodeType": "YulTypedName",
														"src": "5115:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "5125:8:13",
														"nodeType": "YulTypedName",
														"src": "5125:8:13",
														"type": ""
													}
												],
												"src": "5071:117:13"
											},
											{
												"body": {
													"nativeSrc": "5245:118:13",
													"nodeType": "YulBlock",
													"src": "5245:118:13",
													"statements": [
														{
															"nativeSrc": "5255:68:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5255:68:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5304:1:13",
																						"nodeType": "YulLiteral",
																						"src": "5304:1:13",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "5307:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "5307:5:13"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "5300:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "5300:3:13"
																				},
																				"nativeSrc": "5300:13:13",
																				"nodeType": "YulFunctionCall",
																				"src": "5300:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5319:1:13",
																						"nodeType": "YulLiteral",
																						"src": "5319:1:13",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "5315:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "5315:3:13"
																				},
																				"nativeSrc": "5315:6:13",
																				"nodeType": "YulFunctionCall",
																				"src": "5315:6:13"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "5271:28:13",
																			"nodeType": "YulIdentifier",
																			"src": "5271:28:13"
																		},
																		"nativeSrc": "5271:51:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5271:51:13"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "5267:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5267:3:13"
																},
																"nativeSrc": "5267:56:13",
																"nodeType": "YulFunctionCall",
																"src": "5267:56:13"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "5259:4:13",
																	"nodeType": "YulTypedName",
																	"src": "5259:4:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5332:25:13",
															"nodeType": "YulAssignment",
															"src": "5332:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5346:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5346:4:13"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "5352:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5352:4:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5342:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5342:3:13"
																},
																"nativeSrc": "5342:15:13",
																"nodeType": "YulFunctionCall",
																"src": "5342:15:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "5332:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "5332:6:13"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "5194:169:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5222:4:13",
														"nodeType": "YulTypedName",
														"src": "5222:4:13",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "5228:5:13",
														"nodeType": "YulTypedName",
														"src": "5228:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "5238:6:13",
														"nodeType": "YulTypedName",
														"src": "5238:6:13",
														"type": ""
													}
												],
												"src": "5194:169:13"
											},
											{
												"body": {
													"nativeSrc": "5449:214:13",
													"nodeType": "YulBlock",
													"src": "5449:214:13",
													"statements": [
														{
															"nativeSrc": "5582:37:13",
															"nodeType": "YulAssignment",
															"src": "5582:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5609:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5609:4:13"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "5615:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "5615:3:13"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "5590:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "5590:18:13"
																},
																"nativeSrc": "5590:29:13",
																"nodeType": "YulFunctionCall",
																"src": "5590:29:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "5582:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "5582:4:13"
																}
															]
														},
														{
															"nativeSrc": "5628:29:13",
															"nodeType": "YulAssignment",
															"src": "5628:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5639:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "5639:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5649:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5649:1:13",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "5652:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "5652:3:13"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "5645:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5645:3:13"
																		},
																		"nativeSrc": "5645:11:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5645:11:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "5636:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "5636:2:13"
																},
																"nativeSrc": "5636:21:13",
																"nodeType": "YulFunctionCall",
																"src": "5636:21:13"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "5628:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "5628:4:13"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "5368:295:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5430:4:13",
														"nodeType": "YulTypedName",
														"src": "5430:4:13",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "5436:3:13",
														"nodeType": "YulTypedName",
														"src": "5436:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "5444:4:13",
														"nodeType": "YulTypedName",
														"src": "5444:4:13",
														"type": ""
													}
												],
												"src": "5368:295:13"
											},
											{
												"body": {
													"nativeSrc": "5760:1303:13",
													"nodeType": "YulBlock",
													"src": "5760:1303:13",
													"statements": [
														{
															"nativeSrc": "5771:51:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5771:51:13",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5818:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "5818:3:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "5785:32:13",
																	"nodeType": "YulIdentifier",
																	"src": "5785:32:13"
																},
																"nativeSrc": "5785:37:13",
																"nodeType": "YulFunctionCall",
																"src": "5785:37:13"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5775:6:13",
																	"nodeType": "YulTypedName",
																	"src": "5775:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5907:22:13",
																"nodeType": "YulBlock",
																"src": "5907:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5909:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "5909:16:13"
																			},
																			"nativeSrc": "5909:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5909:18:13"
																		},
																		"nativeSrc": "5909:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5909:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5879:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5879:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5887:18:13",
																		"nodeType": "YulLiteral",
																		"src": "5887:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5876:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "5876:2:13"
																},
																"nativeSrc": "5876:30:13",
																"nodeType": "YulFunctionCall",
																"src": "5876:30:13"
															},
															"nativeSrc": "5873:56:13",
															"nodeType": "YulIf",
															"src": "5873:56:13"
														},
														{
															"nativeSrc": "5939:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "5939:52:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "5985:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "5985:4:13"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "5979:5:13",
																			"nodeType": "YulIdentifier",
																			"src": "5979:5:13"
																		},
																		"nativeSrc": "5979:11:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5979:11:13"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "5953:25:13",
																	"nodeType": "YulIdentifier",
																	"src": "5953:25:13"
																},
																"nativeSrc": "5953:38:13",
																"nodeType": "YulFunctionCall",
																"src": "5953:38:13"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "5943:6:13",
																	"nodeType": "YulTypedName",
																	"src": "5943:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "6084:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "6084:4:13"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "6090:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "6090:6:13"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "6098:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "6098:6:13"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "6038:45:13",
																	"nodeType": "YulIdentifier",
																	"src": "6038:45:13"
																},
																"nativeSrc": "6038:67:13",
																"nodeType": "YulFunctionCall",
																"src": "6038:67:13"
															},
															"nativeSrc": "6038:67:13",
															"nodeType": "YulExpressionStatement",
															"src": "6038:67:13"
														},
														{
															"nativeSrc": "6115:18:13",
															"nodeType": "YulVariableDeclaration",
															"src": "6115:18:13",
															"value": {
																"kind": "number",
																"nativeSrc": "6132:1:13",
																"nodeType": "YulLiteral",
																"src": "6132:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "6119:9:13",
																	"nodeType": "YulTypedName",
																	"src": "6119:9:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "6143:17:13",
															"nodeType": "YulAssignment",
															"src": "6143:17:13",
															"value": {
																"kind": "number",
																"nativeSrc": "6156:4:13",
																"nodeType": "YulLiteral",
																"src": "6156:4:13",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "6143:9:13",
																	"nodeType": "YulIdentifier",
																	"src": "6143:9:13"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "6207:611:13",
																		"nodeType": "YulBlock",
																		"src": "6207:611:13",
																		"statements": [
																			{
																				"nativeSrc": "6221:37:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6221:37:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "6240:6:13",
																							"nodeType": "YulIdentifier",
																							"src": "6240:6:13"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "6252:4:13",
																									"nodeType": "YulLiteral",
																									"src": "6252:4:13",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "6248:3:13",
																								"nodeType": "YulIdentifier",
																								"src": "6248:3:13"
																							},
																							"nativeSrc": "6248:9:13",
																							"nodeType": "YulFunctionCall",
																							"src": "6248:9:13"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "6236:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "6236:3:13"
																					},
																					"nativeSrc": "6236:22:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6236:22:13"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "6225:7:13",
																						"nodeType": "YulTypedName",
																						"src": "6225:7:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "6272:51:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6272:51:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6318:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "6318:4:13"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "6286:31:13",
																						"nodeType": "YulIdentifier",
																						"src": "6286:31:13"
																					},
																					"nativeSrc": "6286:37:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6286:37:13"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "6276:6:13",
																						"nodeType": "YulTypedName",
																						"src": "6276:6:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "6336:10:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6336:10:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6345:1:13",
																					"nodeType": "YulLiteral",
																					"src": "6345:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "6340:1:13",
																						"nodeType": "YulTypedName",
																						"src": "6340:1:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6404:163:13",
																					"nodeType": "YulBlock",
																					"src": "6404:163:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6429:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "6429:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "6447:3:13",
																														"nodeType": "YulIdentifier",
																														"src": "6447:3:13"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "6452:9:13",
																														"nodeType": "YulIdentifier",
																														"src": "6452:9:13"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "6443:3:13",
																													"nodeType": "YulIdentifier",
																													"src": "6443:3:13"
																												},
																												"nativeSrc": "6443:19:13",
																												"nodeType": "YulFunctionCall",
																												"src": "6443:19:13"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "6437:5:13",
																											"nodeType": "YulIdentifier",
																											"src": "6437:5:13"
																										},
																										"nativeSrc": "6437:26:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6437:26:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6422:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "6422:6:13"
																								},
																								"nativeSrc": "6422:42:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6422:42:13"
																							},
																							"nativeSrc": "6422:42:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "6422:42:13"
																						},
																						{
																							"nativeSrc": "6481:24:13",
																							"nodeType": "YulAssignment",
																							"src": "6481:24:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6495:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "6495:6:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "6503:1:13",
																										"nodeType": "YulLiteral",
																										"src": "6503:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "6491:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "6491:3:13"
																								},
																								"nativeSrc": "6491:14:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6491:14:13"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "6481:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "6481:6:13"
																								}
																							]
																						},
																						{
																							"nativeSrc": "6522:31:13",
																							"nodeType": "YulAssignment",
																							"src": "6522:31:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "6539:9:13",
																										"nodeType": "YulIdentifier",
																										"src": "6539:9:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "6550:2:13",
																										"nodeType": "YulLiteral",
																										"src": "6550:2:13",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "6535:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "6535:3:13"
																								},
																								"nativeSrc": "6535:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6535:18:13"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "6522:9:13",
																									"nodeType": "YulIdentifier",
																									"src": "6522:9:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "6370:1:13",
																							"nodeType": "YulIdentifier",
																							"src": "6370:1:13"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "6373:7:13",
																							"nodeType": "YulIdentifier",
																							"src": "6373:7:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "6367:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "6367:2:13"
																					},
																					"nativeSrc": "6367:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6367:14:13"
																				},
																				"nativeSrc": "6359:208:13",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "6382:21:13",
																					"nodeType": "YulBlock",
																					"src": "6382:21:13",
																					"statements": [
																						{
																							"nativeSrc": "6384:17:13",
																							"nodeType": "YulAssignment",
																							"src": "6384:17:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "6393:1:13",
																										"nodeType": "YulIdentifier",
																										"src": "6393:1:13"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "6396:4:13",
																										"nodeType": "YulLiteral",
																										"src": "6396:4:13",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "6389:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "6389:3:13"
																								},
																								"nativeSrc": "6389:12:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6389:12:13"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "6384:1:13",
																									"nodeType": "YulIdentifier",
																									"src": "6384:1:13"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "6363:3:13",
																					"nodeType": "YulBlock",
																					"src": "6363:3:13",
																					"statements": []
																				},
																				"src": "6359:208:13"
																			},
																			{
																				"body": {
																					"nativeSrc": "6603:156:13",
																					"nodeType": "YulBlock",
																					"src": "6603:156:13",
																					"statements": [
																						{
																							"nativeSrc": "6621:43:13",
																							"nodeType": "YulVariableDeclaration",
																							"src": "6621:43:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6648:3:13",
																												"nodeType": "YulIdentifier",
																												"src": "6648:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6653:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6653:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6644:3:13",
																											"nodeType": "YulIdentifier",
																											"src": "6644:3:13"
																										},
																										"nativeSrc": "6644:19:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6644:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6638:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6638:5:13"
																								},
																								"nativeSrc": "6638:26:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6638:26:13"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "6625:9:13",
																									"nodeType": "YulTypedName",
																									"src": "6625:9:13",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6688:6:13",
																										"nodeType": "YulIdentifier",
																										"src": "6688:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "6715:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6715:9:13"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "6730:6:13",
																														"nodeType": "YulIdentifier",
																														"src": "6730:6:13"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "6738:4:13",
																														"nodeType": "YulLiteral",
																														"src": "6738:4:13",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "6726:3:13",
																													"nodeType": "YulIdentifier",
																													"src": "6726:3:13"
																												},
																												"nativeSrc": "6726:17:13",
																												"nodeType": "YulFunctionCall",
																												"src": "6726:17:13"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "6696:18:13",
																											"nodeType": "YulIdentifier",
																											"src": "6696:18:13"
																										},
																										"nativeSrc": "6696:48:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6696:48:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6681:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "6681:6:13"
																								},
																								"nativeSrc": "6681:64:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6681:64:13"
																							},
																							"nativeSrc": "6681:64:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "6681:64:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "6586:7:13",
																							"nodeType": "YulIdentifier",
																							"src": "6586:7:13"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "6595:6:13",
																							"nodeType": "YulIdentifier",
																							"src": "6595:6:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "6583:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "6583:2:13"
																					},
																					"nativeSrc": "6583:19:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6583:19:13"
																				},
																				"nativeSrc": "6580:179:13",
																				"nodeType": "YulIf",
																				"src": "6580:179:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6779:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "6779:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "6793:6:13",
																											"nodeType": "YulIdentifier",
																											"src": "6793:6:13"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "6801:1:13",
																											"nodeType": "YulLiteral",
																											"src": "6801:1:13",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "6789:3:13",
																										"nodeType": "YulIdentifier",
																										"src": "6789:3:13"
																									},
																									"nativeSrc": "6789:14:13",
																									"nodeType": "YulFunctionCall",
																									"src": "6789:14:13"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6805:1:13",
																									"nodeType": "YulLiteral",
																									"src": "6805:1:13",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6785:3:13",
																								"nodeType": "YulIdentifier",
																								"src": "6785:3:13"
																							},
																							"nativeSrc": "6785:22:13",
																							"nodeType": "YulFunctionCall",
																							"src": "6785:22:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6772:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6772:6:13"
																					},
																					"nativeSrc": "6772:36:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6772:36:13"
																				},
																				"nativeSrc": "6772:36:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "6772:36:13"
																			}
																		]
																	},
																	"nativeSrc": "6200:618:13",
																	"nodeType": "YulCase",
																	"src": "6200:618:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6205:1:13",
																		"nodeType": "YulLiteral",
																		"src": "6205:1:13",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6835:222:13",
																		"nodeType": "YulBlock",
																		"src": "6835:222:13",
																		"statements": [
																			{
																				"nativeSrc": "6849:14:13",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6849:14:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6862:1:13",
																					"nodeType": "YulLiteral",
																					"src": "6862:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6853:5:13",
																						"nodeType": "YulTypedName",
																						"src": "6853:5:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6886:67:13",
																					"nodeType": "YulBlock",
																					"src": "6886:67:13",
																					"statements": [
																						{
																							"nativeSrc": "6904:35:13",
																							"nodeType": "YulAssignment",
																							"src": "6904:35:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6923:3:13",
																												"nodeType": "YulIdentifier",
																												"src": "6923:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6928:9:13",
																												"nodeType": "YulIdentifier",
																												"src": "6928:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6919:3:13",
																											"nodeType": "YulIdentifier",
																											"src": "6919:3:13"
																										},
																										"nativeSrc": "6919:19:13",
																										"nodeType": "YulFunctionCall",
																										"src": "6919:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6913:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6913:5:13"
																								},
																								"nativeSrc": "6913:26:13",
																								"nodeType": "YulFunctionCall",
																								"src": "6913:26:13"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6904:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "6904:5:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6879:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "6879:6:13"
																				},
																				"nativeSrc": "6876:77:13",
																				"nodeType": "YulIf",
																				"src": "6876:77:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6973:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "6973:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "7032:5:13",
																									"nodeType": "YulIdentifier",
																									"src": "7032:5:13"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "7039:6:13",
																									"nodeType": "YulIdentifier",
																									"src": "7039:6:13"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6979:52:13",
																								"nodeType": "YulIdentifier",
																								"src": "6979:52:13"
																							},
																							"nativeSrc": "6979:67:13",
																							"nodeType": "YulFunctionCall",
																							"src": "6979:67:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6966:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6966:6:13"
																					},
																					"nativeSrc": "6966:81:13",
																					"nodeType": "YulFunctionCall",
																					"src": "6966:81:13"
																				},
																				"nativeSrc": "6966:81:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "6966:81:13"
																			}
																		]
																	},
																	"nativeSrc": "6827:230:13",
																	"nodeType": "YulCase",
																	"src": "6827:230:13",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "6180:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "6180:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6188:2:13",
																		"nodeType": "YulLiteral",
																		"src": "6188:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6177:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "6177:2:13"
																},
																"nativeSrc": "6177:14:13",
																"nodeType": "YulFunctionCall",
																"src": "6177:14:13"
															},
															"nativeSrc": "6170:887:13",
															"nodeType": "YulSwitch",
															"src": "6170:887:13"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5668:1395:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5749:4:13",
														"nodeType": "YulTypedName",
														"src": "5749:4:13",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5755:3:13",
														"nodeType": "YulTypedName",
														"src": "5755:3:13",
														"type": ""
													}
												],
												"src": "5668:1395:13"
											},
											{
												"body": {
													"nativeSrc": "7127:40:13",
													"nodeType": "YulBlock",
													"src": "7127:40:13",
													"statements": [
														{
															"nativeSrc": "7138:22:13",
															"nodeType": "YulAssignment",
															"src": "7138:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7154:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "7154:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7148:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7148:5:13"
																},
																"nativeSrc": "7148:12:13",
																"nodeType": "YulFunctionCall",
																"src": "7148:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "7138:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "7138:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "7069:98:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7110:5:13",
														"nodeType": "YulTypedName",
														"src": "7110:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "7120:6:13",
														"nodeType": "YulTypedName",
														"src": "7120:6:13",
														"type": ""
													}
												],
												"src": "7069:98:13"
											},
											{
												"body": {
													"nativeSrc": "7286:34:13",
													"nodeType": "YulBlock",
													"src": "7286:34:13",
													"statements": [
														{
															"nativeSrc": "7296:18:13",
															"nodeType": "YulAssignment",
															"src": "7296:18:13",
															"value": {
																"name": "pos",
																"nativeSrc": "7311:3:13",
																"nodeType": "YulIdentifier",
																"src": "7311:3:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "7296:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "7296:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "7173:147:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7258:3:13",
														"nodeType": "YulTypedName",
														"src": "7258:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "7263:6:13",
														"nodeType": "YulTypedName",
														"src": "7263:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "7274:11:13",
														"nodeType": "YulTypedName",
														"src": "7274:11:13",
														"type": ""
													}
												],
												"src": "7173:147:13"
											},
											{
												"body": {
													"nativeSrc": "7388:77:13",
													"nodeType": "YulBlock",
													"src": "7388:77:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "7405:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7405:3:13"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "7410:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7410:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7415:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7415:6:13"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "7399:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7399:5:13"
																},
																"nativeSrc": "7399:23:13",
																"nodeType": "YulFunctionCall",
																"src": "7399:23:13"
															},
															"nativeSrc": "7399:23:13",
															"nodeType": "YulExpressionStatement",
															"src": "7399:23:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "7442:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "7442:3:13"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "7447:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "7447:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7438:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7438:3:13"
																		},
																		"nativeSrc": "7438:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7438:16:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7456:1:13",
																		"nodeType": "YulLiteral",
																		"src": "7456:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7431:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "7431:6:13"
																},
																"nativeSrc": "7431:27:13",
																"nodeType": "YulFunctionCall",
																"src": "7431:27:13"
															},
															"nativeSrc": "7431:27:13",
															"nodeType": "YulExpressionStatement",
															"src": "7431:27:13"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "7326:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "7370:3:13",
														"nodeType": "YulTypedName",
														"src": "7370:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "7375:3:13",
														"nodeType": "YulTypedName",
														"src": "7375:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "7380:6:13",
														"nodeType": "YulTypedName",
														"src": "7380:6:13",
														"type": ""
													}
												],
												"src": "7326:139:13"
											},
											{
												"body": {
													"nativeSrc": "7579:278:13",
													"nodeType": "YulBlock",
													"src": "7579:278:13",
													"statements": [
														{
															"nativeSrc": "7589:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "7589:52:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7635:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "7635:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "7603:31:13",
																	"nodeType": "YulIdentifier",
																	"src": "7603:31:13"
																},
																"nativeSrc": "7603:38:13",
																"nodeType": "YulFunctionCall",
																"src": "7603:38:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "7593:6:13",
																	"nodeType": "YulTypedName",
																	"src": "7593:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7650:95:13",
															"nodeType": "YulAssignment",
															"src": "7650:95:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7733:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7733:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7738:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7738:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "7657:75:13",
																	"nodeType": "YulIdentifier",
																	"src": "7657:75:13"
																},
																"nativeSrc": "7657:88:13",
																"nodeType": "YulFunctionCall",
																"src": "7657:88:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7650:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7650:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7793:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "7793:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7800:4:13",
																				"nodeType": "YulLiteral",
																				"src": "7800:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7789:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7789:3:13"
																		},
																		"nativeSrc": "7789:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7789:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7807:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7807:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7812:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7812:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "7754:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "7754:34:13"
																},
																"nativeSrc": "7754:65:13",
																"nodeType": "YulFunctionCall",
																"src": "7754:65:13"
															},
															"nativeSrc": "7754:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "7754:65:13"
														},
														{
															"nativeSrc": "7828:23:13",
															"nodeType": "YulAssignment",
															"src": "7828:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7839:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "7839:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7844:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7844:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7835:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7835:3:13"
																},
																"nativeSrc": "7835:16:13",
																"nodeType": "YulFunctionCall",
																"src": "7835:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7828:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7828:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "7471:386:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7560:5:13",
														"nodeType": "YulTypedName",
														"src": "7560:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7567:3:13",
														"nodeType": "YulTypedName",
														"src": "7567:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7575:3:13",
														"nodeType": "YulTypedName",
														"src": "7575:3:13",
														"type": ""
													}
												],
												"src": "7471:386:13"
											},
											{
												"body": {
													"nativeSrc": "7997:137:13",
													"nodeType": "YulBlock",
													"src": "7997:137:13",
													"statements": [
														{
															"nativeSrc": "8008:100:13",
															"nodeType": "YulAssignment",
															"src": "8008:100:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "8095:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "8095:6:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "8104:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "8104:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "8015:79:13",
																	"nodeType": "YulIdentifier",
																	"src": "8015:79:13"
																},
																"nativeSrc": "8015:93:13",
																"nodeType": "YulFunctionCall",
																"src": "8015:93:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "8008:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8008:3:13"
																}
															]
														},
														{
															"nativeSrc": "8118:10:13",
															"nodeType": "YulAssignment",
															"src": "8118:10:13",
															"value": {
																"name": "pos",
																"nativeSrc": "8125:3:13",
																"nodeType": "YulIdentifier",
																"src": "8125:3:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "8118:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8118:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "7863:271:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7976:3:13",
														"nodeType": "YulTypedName",
														"src": "7976:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7982:6:13",
														"nodeType": "YulTypedName",
														"src": "7982:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7993:3:13",
														"nodeType": "YulTypedName",
														"src": "7993:3:13",
														"type": ""
													}
												],
												"src": "7863:271:13"
											},
											{
												"body": {
													"nativeSrc": "8217:274:13",
													"nodeType": "YulBlock",
													"src": "8217:274:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "8263:83:13",
																"nodeType": "YulBlock",
																"src": "8263:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "8265:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "8265:77:13"
																			},
																			"nativeSrc": "8265:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "8265:79:13"
																		},
																		"nativeSrc": "8265:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "8265:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8238:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8238:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8247:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "8247:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8234:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "8234:3:13"
																		},
																		"nativeSrc": "8234:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8234:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8259:2:13",
																		"nodeType": "YulLiteral",
																		"src": "8259:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "8230:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8230:3:13"
																},
																"nativeSrc": "8230:32:13",
																"nodeType": "YulFunctionCall",
																"src": "8230:32:13"
															},
															"nativeSrc": "8227:119:13",
															"nodeType": "YulIf",
															"src": "8227:119:13"
														},
														{
															"nativeSrc": "8356:128:13",
															"nodeType": "YulBlock",
															"src": "8356:128:13",
															"statements": [
																{
																	"nativeSrc": "8371:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8371:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8385:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8385:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8375:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8375:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8400:74:13",
																	"nodeType": "YulAssignment",
																	"src": "8400:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8446:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8446:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8457:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8457:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8442:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8442:3:13"
																				},
																				"nativeSrc": "8442:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8442:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8466:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8466:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "8410:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "8410:31:13"
																		},
																		"nativeSrc": "8410:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8410:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8400:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8400:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "8140:351:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8187:9:13",
														"nodeType": "YulTypedName",
														"src": "8187:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "8198:7:13",
														"nodeType": "YulTypedName",
														"src": "8198:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "8210:6:13",
														"nodeType": "YulTypedName",
														"src": "8210:6:13",
														"type": ""
													}
												],
												"src": "8140:351:13"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_IERC20_$1220(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IERC20_$1220(value) {\n        if iszero(eq(value, cleanup_t_contract$_IERC20_$1220(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IERC20_$1220_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_IERC20_$1220(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_contract$_IERC20_$1220t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_IERC20_$1220_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561000f575f80fd5b50604051612c83380380612c8383398181016040528101906100319190610320565b816040518060400160405280600f81526020017f42726f6b656e204d616e20486f6c6500000000000000000000000000000000008152506040518060400160405280600481526020017f76424d480000000000000000000000000000000000000000000000000000000081525081600390816100ad919061058f565b5080600490816100bd919061058f565b5050505f806100d18361017560201b60201c565b91509150816100e15760126100e3565b805b60ff1660a08160ff16815250508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050503360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060068190555050506106f1565b5f805f808473ffffffffffffffffffffffffffffffffffffffff1660405160240160405160208183030381529060405263313ce56760e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101e891906106b0565b5f60405180830381855afa9150503d805f8114610220576040519150601f19603f3d011682016040523d82523d5f602084013e610225565b606091505b509150915081801561023957506020815110155b15610270575f8180602001905181019061025391906106c6565b905060ff8016811161026e5760018194509450505050610279565b505b5f809350935050505b915091565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102ab82610282565b9050919050565b5f6102bc826102a1565b9050919050565b6102cc816102b2565b81146102d6575f80fd5b50565b5f815190506102e7816102c3565b92915050565b5f819050919050565b6102ff816102ed565b8114610309575f80fd5b50565b5f8151905061031a816102f6565b92915050565b5f80604083850312156103365761033561027e565b5b5f610343858286016102d9565b92505060206103548582860161030c565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103d957607f821691505b6020821081036103ec576103eb610395565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261044e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610413565b6104588683610413565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61049361048e610489846102ed565b610470565b6102ed565b9050919050565b5f819050919050565b6104ac83610479565b6104c06104b88261049a565b84845461041f565b825550505050565b5f90565b6104d46104c8565b6104df8184846104a3565b505050565b5b81811015610502576104f75f826104cc565b6001810190506104e5565b5050565b601f82111561054757610518816103f2565b61052184610404565b81016020851015610530578190505b61054461053c85610404565b8301826104e4565b50505b505050565b5f82821c905092915050565b5f6105675f198460080261054c565b1980831691505092915050565b5f61057f8383610558565b9150826002028217905092915050565b6105988261035e565b67ffffffffffffffff8111156105b1576105b0610368565b5b6105bb82546103c2565b6105c6828285610506565b5f60209050601f8311600181146105f7575f84156105e5578287015190505b6105ef8582610574565b865550610656565b601f198416610605866103f2565b5f5b8281101561062c57848901518255600182019150602085019450602081019050610607565b868310156106495784890151610645601f891682610558565b8355505b6001600288020188555050505b505050505050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61068a8261065e565b6106948185610668565b93506106a4818560208601610672565b80840191505092915050565b5f6106bb8284610680565b915081905092915050565b5f602082840312156106db576106da61027e565b5b5f6106e88482850161030c565b91505092915050565b60805160a05161255c6107275f395f61080001525f818161062e015281816108310152818161158e01526116fd015261255c5ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80638da5cb5b116100f7578063ba0af7a911610095578063ce96cb771161006f578063ce96cb771461056b578063d905777e1461059b578063dd62ed3e146105cb578063ef8b30f7146105fb576101a7565b8063ba0af7a9146104ed578063c63d75b61461050b578063c6e6f5921461053b576101a7565b8063a9059cbb116100d1578063a9059cbb1461042d578063b3d7f6b91461045d578063b460af941461048d578063ba087652146104bd576101a7565b80638da5cb5b146103c157806394bf804d146103df57806395d89b411461040f576101a7565b806323b872dd11610164578063402d267d1161013e578063402d267d146103015780634cdad506146103315780636e553f651461036157806370a0823114610391576101a7565b806323b872dd14610295578063313ce567146102c557806338d52e0f146102e3576101a7565b806301e1d114146101ab57806306fdde03146101c957806307a2d13a146101e7578063095ea7b3146102175780630a28a4771461024757806318160ddd14610277575b5f80fd5b6101b361062b565b6040516101c09190611cb0565b60405180910390f35b6101d16106c9565b6040516101de9190611d39565b60405180910390f35b61020160048036038101906101fc9190611d87565b610759565b60405161020e9190611cb0565b60405180910390f35b610231600480360381019061022c9190611e0c565b61076b565b60405161023e9190611e64565b60405180910390f35b610261600480360381019061025c9190611d87565b61078d565b60405161026e9190611cb0565b60405180910390f35b61027f6107be565b60405161028c9190611cb0565b60405180910390f35b6102af60048036038101906102aa9190611e7d565b6107c7565b6040516102bc9190611e64565b60405180910390f35b6102cd6107f5565b6040516102da9190611ee8565b60405180910390f35b6102eb61082e565b6040516102f89190611f10565b60405180910390f35b61031b60048036038101906103169190611f29565b610855565b6040516103289190611cb0565b60405180910390f35b61034b60048036038101906103469190611d87565b61087e565b6040516103589190611cb0565b60405180910390f35b61037b60048036038101906103769190611f54565b6108af565b6040516103889190611cb0565b60405180910390f35b6103ab60048036038101906103a69190611f29565b61092f565b6040516103b89190611cb0565b60405180910390f35b6103c9610974565b6040516103d69190611fb2565b60405180910390f35b6103f960048036038101906103f49190611f54565b610999565b6040516104069190611cb0565b60405180910390f35b610417610a19565b6040516104249190611d39565b60405180910390f35b61044760048036038101906104429190611e0c565b610aa9565b6040516104549190611e64565b60405180910390f35b61047760048036038101906104729190611d87565b610acb565b6040516104849190611cb0565b60405180910390f35b6104a760048036038101906104a29190611fcb565b610afc565b6040516104b49190611cb0565b60405180910390f35b6104d760048036038101906104d29190611fcb565b610b7e565b6040516104e49190611cb0565b60405180910390f35b6104f5610c00565b6040516105029190611cb0565b60405180910390f35b61052560048036038101906105209190611f29565b610c06565b6040516105329190611cb0565b60405180910390f35b61055560048036038101906105509190611d87565b610c2f565b6040516105629190611cb0565b60405180910390f35b61058560048036038101906105809190611f29565b610c41565b6040516105929190611cb0565b60405180910390f35b6105b560048036038101906105b09190611f29565b610c5b565b6040516105c29190611cb0565b60405180910390f35b6105e560048036038101906105e0919061201b565b610c6c565b6040516105f29190611cb0565b60405180910390f35b61061560048036038101906106109190611d87565b610cee565b6040516106229190611cb0565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106859190611f10565b602060405180830381865afa1580156106a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c4919061206d565b905090565b6060600380546106d8906120c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610704906120c5565b801561074f5780601f106107265761010080835404028352916020019161074f565b820191905f5260205f20905b81548152906001019060200180831161073257829003601f168201915b5050505050905090565b5f610764825f610d1f565b9050919050565b5f80610775610d77565b9050610782818585610d7e565b600191505092915050565b5f806107a08361079b610d90565b610d94565b90506107b681846107b19190612122565b610db7565b915050919050565b5f600254905090565b5f806107d1610d77565b90506107de858285610dca565b6107e9858585610e5c565b60019150509392505050565b5f6107fe610f4c565b7f00000000000000000000000000000000000000000000000000000000000000006108299190612155565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f8061088983610f50565b905061089c81610897610d90565b610f62565b816108a79190612189565b915050919050565b5f806108ba83610855565b905080841115610905578284826040517f79012fb20000000000000000000000000000000000000000000000000000000081526004016108fc939291906121bc565b60405180910390fd5b5f61090f85610cee565b905061092461091c610d77565b858784610f90565b809250505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f806109a483610c06565b9050808411156109ef578284826040517f284ff6670000000000000000000000000000000000000000000000000000000081526004016109e6939291906121bc565b60405180910390fd5b5f6109f985610acb565b9050610a0e610a06610d77565b858388610f90565b809250505092915050565b606060048054610a28906120c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a54906120c5565b8015610a9f5780601f10610a7657610100808354040283529160200191610a9f565b820191905f5260205f20905b815481529060010190602001808311610a8257829003601f168201915b5050505050905090565b5f80610ab3610d77565b9050610ac0818585610e5c565b600191505092915050565b5f80610ad683611016565b9050610ae981610ae4611029565b610d94565b81610af49190612122565b915050919050565b5f80610b0783610c41565b905080851115610b52578285826040517ffe9cceec000000000000000000000000000000000000000000000000000000008152600401610b49939291906121bc565b60405180910390fd5b5f610b5c8661078d565b9050610b72610b69610d77565b86868985611032565b80925050509392505050565b5f80610b8983610c5b565b905080851115610bd4578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610bcb939291906121bc565b60405180910390fd5b5f610bde8661087e565b9050610bf4610beb610d77565b8686848a611032565b80925050509392505050565b60065481565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610c3a825f6110ba565b9050919050565b5f610c54610c4e8361092f565b5f610d1f565b9050919050565b5f610c658261092f565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f80610d0183610cfc611029565b610f62565b9050610d178184610d129190612189565b611112565b915050919050565b5f610d6f6001610d2d61062b565b610d379190612122565b610d3f610f4c565b600a610d4b9190612320565b610d536107be565b610d5d9190612122565b8486611124909392919063ffffffff16565b905092915050565b5f33905090565b610d8b8383836001611179565b505050565b5f90565b5f610daf82612710600186611124909392919063ffffffff16565b905092915050565b5f610dc38260016110ba565b9050919050565b5f610dd58484610c6c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e565781811015610e47578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610e3e939291906121bc565b60405180910390fd5b610e5584848484035f611179565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ecc575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610ec39190611f10565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f3c575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610f339190611f10565b60405180910390fd5b610f47838383611348565b505050565b5f90565b5f610f5b825f610d1f565b9050919050565b5f610f888261271084610f759190612122565b600186611124909392919063ffffffff16565b905092915050565b5f610fa283610f9d611029565b610f62565b90505f610fad611561565b9050610fbb86868686611589565b5f82118015610ff657503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561100e5761100d61100661082e565b828461162c565b5b505050505050565b5f611022826001610d1f565b9050919050565b5f600654905090565b5f6110448361103f610d90565b610d94565b90505f61104f6116ab565b905061105e87878787876116af565b5f8211801561109957503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156110b1576110b06110a961082e565b828461162c565b5b50505050505050565b5f61110a6110c6610f4c565b600a6110d29190612320565b6110da6107be565b6110e49190612122565b60016110ee61062b565b6110f89190612122565b8486611124909392919063ffffffff16565b905092915050565b5f61111d825f6110ba565b9050919050565b5f806111318686866117a8565b905061113c836118a7565b801561115857505f84806111535761115261236a565b5b868809115b1561116d5760018161116a9190612122565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036111e9575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016111e09190611f10565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611259575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016112509190611f10565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611342578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516113399190611cb0565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611398578060025f82825461138c9190612122565b92505081905550611466565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611421578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611418939291906121bc565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ad578060025f82825403925050819055506114f7565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115549190611cb0565b60405180910390a3505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115b57f00000000000000000000000000000000000000000000000000000000000000008530856118d4565b6115bf8382611956565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7848460405161161e929190612397565b60405180910390a350505050565b6116a6838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161165f9291906123be565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d5565b505050565b5f90565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146116ee576116ed838683610dca565b5b6116f88382611a6a565b6117237f0000000000000000000000000000000000000000000000000000000000000000858461162c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611799929190612397565b60405180910390a45050505050565b5f8083850290505f8019858709828110838203039150505f81036117e0578382816117d6576117d561236a565b5b04925050506118a0565b808411611819576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f600160028360038111156118bf576118be6123e5565b5b6118c99190612412565b60ff16149050919050565b611950848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161190993929190612442565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d5565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119c6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016119bd9190611f10565b60405180910390fd5b6119d15f8383611348565b5050565b5f6119ff828473ffffffffffffffffffffffffffffffffffffffff16611ae990919063ffffffff16565b90505f815114158015611a23575080806020019051810190611a2191906124a1565b155b15611a6557826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611a5c9190611f10565b60405180910390fd5b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ada575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401611ad19190611f10565b60405180910390fd5b611ae5825f83611348565b5050565b6060611af683835f611afe565b905092915050565b606081471015611b4557306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611b3c9190611f10565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611b6d9190612510565b5f6040518083038185875af1925050503d805f8114611ba7576040519150601f19603f3d011682016040523d82523d5f602084013e611bac565b606091505b5091509150611bbc868383611bc7565b925050509392505050565b606082611bdc57611bd782611c54565b611c4c565b5f8251148015611c0257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611c4457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611c3b9190611f10565b60405180910390fd5b819050611c4d565b5b9392505050565b5f81511115611c665780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611caa81611c98565b82525050565b5f602082019050611cc35f830184611ca1565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611d0b82611cc9565b611d158185611cd3565b9350611d25818560208601611ce3565b611d2e81611cf1565b840191505092915050565b5f6020820190508181035f830152611d518184611d01565b905092915050565b5f80fd5b611d6681611c98565b8114611d70575f80fd5b50565b5f81359050611d8181611d5d565b92915050565b5f60208284031215611d9c57611d9b611d59565b5b5f611da984828501611d73565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ddb82611db2565b9050919050565b611deb81611dd1565b8114611df5575f80fd5b50565b5f81359050611e0681611de2565b92915050565b5f8060408385031215611e2257611e21611d59565b5b5f611e2f85828601611df8565b9250506020611e4085828601611d73565b9150509250929050565b5f8115159050919050565b611e5e81611e4a565b82525050565b5f602082019050611e775f830184611e55565b92915050565b5f805f60608486031215611e9457611e93611d59565b5b5f611ea186828701611df8565b9350506020611eb286828701611df8565b9250506040611ec386828701611d73565b9150509250925092565b5f60ff82169050919050565b611ee281611ecd565b82525050565b5f602082019050611efb5f830184611ed9565b92915050565b611f0a81611dd1565b82525050565b5f602082019050611f235f830184611f01565b92915050565b5f60208284031215611f3e57611f3d611d59565b5b5f611f4b84828501611df8565b91505092915050565b5f8060408385031215611f6a57611f69611d59565b5b5f611f7785828601611d73565b9250506020611f8885828601611df8565b9150509250929050565b5f611f9c82611db2565b9050919050565b611fac81611f92565b82525050565b5f602082019050611fc55f830184611fa3565b92915050565b5f805f60608486031215611fe257611fe1611d59565b5b5f611fef86828701611d73565b935050602061200086828701611df8565b925050604061201186828701611df8565b9150509250925092565b5f806040838503121561203157612030611d59565b5b5f61203e85828601611df8565b925050602061204f85828601611df8565b9150509250929050565b5f8151905061206781611d5d565b92915050565b5f6020828403121561208257612081611d59565b5b5f61208f84828501612059565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806120dc57607f821691505b6020821081036120ef576120ee612098565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61212c82611c98565b915061213783611c98565b925082820190508082111561214f5761214e6120f5565b5b92915050565b5f61215f82611ecd565b915061216a83611ecd565b9250828201905060ff811115612183576121826120f5565b5b92915050565b5f61219382611c98565b915061219e83611c98565b92508282039050818111156121b6576121b56120f5565b5b92915050565b5f6060820190506121cf5f830186611f01565b6121dc6020830185611ca1565b6121e96040830184611ca1565b949350505050565b5f8160011c9050919050565b5f808291508390505b600185111561224657808604811115612222576122216120f5565b5b60018516156122315780820291505b808102905061223f856121f1565b9450612206565b94509492505050565b5f8261225e5760019050612319565b8161226b575f9050612319565b8160018114612281576002811461228b576122ba565b6001915050612319565b60ff84111561229d5761229c6120f5565b5b8360020a9150848211156122b4576122b36120f5565b5b50612319565b5060208310610133831016604e8410600b84101617156122ef5782820a9050838111156122ea576122e96120f5565b5b612319565b6122fc84848460016121fd565b92509050818404811115612313576123126120f5565b5b81810290505b9392505050565b5f61232a82611c98565b915061233583611ecd565b92506123627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461224f565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506123aa5f830185611ca1565b6123b76020830184611ca1565b9392505050565b5f6040820190506123d15f830185611f01565b6123de6020830184611ca1565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f61241c82611ecd565b915061242783611ecd565b9250826124375761243661236a565b5b828206905092915050565b5f6060820190506124555f830186611f01565b6124626020830185611f01565b61246f6040830184611ca1565b949350505050565b61248081611e4a565b811461248a575f80fd5b50565b5f8151905061249b81612477565b92915050565b5f602082840312156124b6576124b5611d59565b5b5f6124c38482850161248d565b91505092915050565b5f81519050919050565b5f81905092915050565b5f6124ea826124cc565b6124f481856124d6565b9350612504818560208601611ce3565b80840191505092915050565b5f61251b82846124e0565b91508190509291505056fea2646970667358221220c733f6cb83933133afe6a4d42c9cdc1af596c077301b34c416913646670960b464736f6c63430008190033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2C83 CODESIZE SUB DUP1 PUSH2 0x2C83 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0x320 JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x42726F6B656E204D616E20486F6C650000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x76424D4800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x58F JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x58F JUMP JUMPDEST POP POP POP PUSH0 DUP1 PUSH2 0xD1 DUP4 PUSH2 0x175 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE1 JUMPI PUSH1 0x12 PUSH2 0xE3 JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0xFF AND PUSH1 0xA0 DUP2 PUSH1 0xFF AND DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP CALLER PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x6 DUP2 SWAP1 SSTORE POP POP POP PUSH2 0x6F1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH4 0x313CE567 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x6B0 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x225 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x239 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x270 JUMPI PUSH0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x253 SWAP2 SWAP1 PUSH2 0x6C6 JUMP JUMPDEST SWAP1 POP PUSH1 0xFF DUP1 AND DUP2 GT PUSH2 0x26E JUMPI PUSH1 0x1 DUP2 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x279 JUMP JUMPDEST POP JUMPDEST PUSH0 DUP1 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2AB DUP3 PUSH2 0x282 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2BC DUP3 PUSH2 0x2A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CC DUP2 PUSH2 0x2B2 JUMP JUMPDEST DUP2 EQ PUSH2 0x2D6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E7 DUP2 PUSH2 0x2C3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2FF DUP2 PUSH2 0x2ED JUMP JUMPDEST DUP2 EQ PUSH2 0x309 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x31A DUP2 PUSH2 0x2F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x336 JUMPI PUSH2 0x335 PUSH2 0x27E JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x343 DUP6 DUP3 DUP7 ADD PUSH2 0x2D9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x354 DUP6 DUP3 DUP7 ADD PUSH2 0x30C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3D9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3EC JUMPI PUSH2 0x3EB PUSH2 0x395 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x44E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x413 JUMP JUMPDEST PUSH2 0x458 DUP7 DUP4 PUSH2 0x413 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x493 PUSH2 0x48E PUSH2 0x489 DUP5 PUSH2 0x2ED JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH2 0x2ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4AC DUP4 PUSH2 0x479 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4B8 DUP3 PUSH2 0x49A JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x41F JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x4D4 PUSH2 0x4C8 JUMP JUMPDEST PUSH2 0x4DF DUP2 DUP5 DUP5 PUSH2 0x4A3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x502 JUMPI PUSH2 0x4F7 PUSH0 DUP3 PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4E5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x547 JUMPI PUSH2 0x518 DUP2 PUSH2 0x3F2 JUMP JUMPDEST PUSH2 0x521 DUP5 PUSH2 0x404 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x530 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x544 PUSH2 0x53C DUP6 PUSH2 0x404 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x4E4 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x567 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x54C JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x57F DUP4 DUP4 PUSH2 0x558 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x598 DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5B1 JUMPI PUSH2 0x5B0 PUSH2 0x368 JUMP JUMPDEST JUMPDEST PUSH2 0x5BB DUP3 SLOAD PUSH2 0x3C2 JUMP JUMPDEST PUSH2 0x5C6 DUP3 DUP3 DUP6 PUSH2 0x506 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x5F7 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x5E5 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x5EF DUP6 DUP3 PUSH2 0x574 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x656 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x605 DUP7 PUSH2 0x3F2 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x62C JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x607 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x649 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x645 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x558 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x68A DUP3 PUSH2 0x65E JUMP JUMPDEST PUSH2 0x694 DUP2 DUP6 PUSH2 0x668 JUMP JUMPDEST SWAP4 POP PUSH2 0x6A4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x672 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6BB DUP3 DUP5 PUSH2 0x680 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6DB JUMPI PUSH2 0x6DA PUSH2 0x27E JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x6E8 DUP5 DUP3 DUP6 ADD PUSH2 0x30C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x255C PUSH2 0x727 PUSH0 CODECOPY PUSH0 PUSH2 0x800 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x62E ADD MSTORE DUP2 DUP2 PUSH2 0x831 ADD MSTORE DUP2 DUP2 PUSH2 0x158E ADD MSTORE PUSH2 0x16FD ADD MSTORE PUSH2 0x255C PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBA0AF7A9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x5FB JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xBA0AF7A9 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x53B JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xA9059CBB GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4BD JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x40F JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x391 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2E3 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x277 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3 PUSH2 0x62B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x759 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x1E0C JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x261 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH2 0x7BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x1E7D JUMP JUMPDEST PUSH2 0x7C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x1EE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EB PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x855 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x358 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C9 PUSH2 0x974 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x999 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x417 PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x1E0C JUMP JUMPDEST PUSH2 0xAA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xACB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B4 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F5 PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x502 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x525 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x555 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x550 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x585 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x580 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E0 SWAP2 SWAP1 PUSH2 0x201B JUMP JUMPDEST PUSH2 0xC6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x615 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x610 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xCEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x685 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A0 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C4 SWAP2 SWAP1 PUSH2 0x206D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x6D8 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x704 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x74F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x726 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x74F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x732 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x764 DUP3 PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x775 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0x782 DUP2 DUP6 DUP6 PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7A0 DUP4 PUSH2 0x79B PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP PUSH2 0x7B6 DUP2 DUP5 PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0xDB7 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7D1 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0x7DE DUP6 DUP3 DUP6 PUSH2 0xDCA JUMP JUMPDEST PUSH2 0x7E9 DUP6 DUP6 DUP6 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7FE PUSH2 0xF4C JUMP JUMPDEST PUSH32 0x0 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x2155 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x889 DUP4 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP PUSH2 0x89C DUP2 PUSH2 0x897 PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST DUP2 PUSH2 0x8A7 SWAP2 SWAP1 PUSH2 0x2189 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x8BA DUP4 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x905 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x90F DUP6 PUSH2 0xCEE JUMP JUMPDEST SWAP1 POP PUSH2 0x924 PUSH2 0x91C PUSH2 0xD77 JUMP JUMPDEST DUP6 DUP8 DUP5 PUSH2 0xF90 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x9A4 DUP4 PUSH2 0xC06 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x9EF JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x284FF66700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x9F9 DUP6 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0xA0E PUSH2 0xA06 PUSH2 0xD77 JUMP JUMPDEST DUP6 DUP4 DUP9 PUSH2 0xF90 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA28 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA54 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA9F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA76 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA9F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA82 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAB3 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC0 DUP2 DUP6 DUP6 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAD6 DUP4 PUSH2 0x1016 JUMP JUMPDEST SWAP1 POP PUSH2 0xAE9 DUP2 PUSH2 0xAE4 PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST DUP2 PUSH2 0xAF4 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB07 DUP4 PUSH2 0xC41 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xB52 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB49 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xB5C DUP7 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP PUSH2 0xB72 PUSH2 0xB69 PUSH2 0xD77 JUMP JUMPDEST DUP7 DUP7 DUP10 DUP6 PUSH2 0x1032 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB89 DUP4 PUSH2 0xC5B JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xBD4 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xBDE DUP7 PUSH2 0x87E JUMP JUMPDEST SWAP1 POP PUSH2 0xBF4 PUSH2 0xBEB PUSH2 0xD77 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1032 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC3A DUP3 PUSH0 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC54 PUSH2 0xC4E DUP4 PUSH2 0x92F JUMP JUMPDEST PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC65 DUP3 PUSH2 0x92F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xD01 DUP4 PUSH2 0xCFC PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST SWAP1 POP PUSH2 0xD17 DUP2 DUP5 PUSH2 0xD12 SWAP2 SWAP1 PUSH2 0x2189 JUMP JUMPDEST PUSH2 0x1112 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xD6F PUSH1 0x1 PUSH2 0xD2D PUSH2 0x62B JUMP JUMPDEST PUSH2 0xD37 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0xD3F PUSH2 0xF4C JUMP JUMPDEST PUSH1 0xA PUSH2 0xD4B SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0xD53 PUSH2 0x7BE JUMP JUMPDEST PUSH2 0xD5D SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD8B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1179 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xDAF DUP3 PUSH2 0x2710 PUSH1 0x1 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDC3 DUP3 PUSH1 0x1 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDD5 DUP5 DUP5 PUSH2 0xC6C JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xE56 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE47 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE55 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xECC JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC3 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF3C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF33 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF47 DUP4 DUP4 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xF5B DUP3 PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF88 DUP3 PUSH2 0x2710 DUP5 PUSH2 0xF75 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFA2 DUP4 PUSH2 0xF9D PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xFAD PUSH2 0x1561 JUMP JUMPDEST SWAP1 POP PUSH2 0xFBB DUP7 DUP7 DUP7 DUP7 PUSH2 0x1589 JUMP JUMPDEST PUSH0 DUP3 GT DUP1 ISZERO PUSH2 0xFF6 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x100E JUMPI PUSH2 0x100D PUSH2 0x1006 PUSH2 0x82E JUMP JUMPDEST DUP3 DUP5 PUSH2 0x162C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1022 DUP3 PUSH1 0x1 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x6 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1044 DUP4 PUSH2 0x103F PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x104F PUSH2 0x16AB JUMP JUMPDEST SWAP1 POP PUSH2 0x105E DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x16AF JUMP JUMPDEST PUSH0 DUP3 GT DUP1 ISZERO PUSH2 0x1099 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x10B0 PUSH2 0x10A9 PUSH2 0x82E JUMP JUMPDEST DUP3 DUP5 PUSH2 0x162C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x110A PUSH2 0x10C6 PUSH2 0xF4C JUMP JUMPDEST PUSH1 0xA PUSH2 0x10D2 SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0x10DA PUSH2 0x7BE JUMP JUMPDEST PUSH2 0x10E4 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x10EE PUSH2 0x62B JUMP JUMPDEST PUSH2 0x10F8 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x111D DUP3 PUSH0 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1131 DUP7 DUP7 DUP7 PUSH2 0x17A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x113C DUP4 PUSH2 0x18A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1158 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x1153 JUMPI PUSH2 0x1152 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x116D JUMPI PUSH1 0x1 DUP2 PUSH2 0x116A SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11E9 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E0 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1259 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1250 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1342 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1339 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1398 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x138C SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1466 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1421 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14AD JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x14F7 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1554 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x15B5 PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x18D4 JUMP JUMPDEST PUSH2 0x15BF DUP4 DUP3 PUSH2 0x1956 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x161E SWAP3 SWAP2 SWAP1 PUSH2 0x2397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x16A6 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x165F SWAP3 SWAP2 SWAP1 PUSH2 0x23BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19D5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16EE JUMPI PUSH2 0x16ED DUP4 DUP7 DUP4 PUSH2 0xDCA JUMP JUMPDEST JUMPDEST PUSH2 0x16F8 DUP4 DUP3 PUSH2 0x1A6A JUMP JUMPDEST PUSH2 0x1723 PUSH32 0x0 DUP6 DUP5 PUSH2 0x162C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1799 SWAP3 SWAP2 SWAP1 PUSH2 0x2397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x17E0 JUMPI DUP4 DUP3 DUP2 PUSH2 0x17D6 JUMPI PUSH2 0x17D5 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x18A0 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1819 JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18BF JUMPI PUSH2 0x18BE PUSH2 0x23E5 JUMP JUMPDEST JUMPDEST PUSH2 0x18C9 SWAP2 SWAP1 PUSH2 0x2412 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1950 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1909 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19D5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19C6 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BD SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19D1 PUSH0 DUP4 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x19FF DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1A23 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1A21 SWAP2 SWAP1 PUSH2 0x24A1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A65 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5C SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1ADA JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD1 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AE5 DUP3 PUSH0 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AF6 DUP4 DUP4 PUSH0 PUSH2 0x1AFE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1B45 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1B6D SWAP2 SWAP1 PUSH2 0x2510 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1BA7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1BBC DUP7 DUP4 DUP4 PUSH2 0x1BC7 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1BDC JUMPI PUSH2 0x1BD7 DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0x1C4C JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1C02 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1C44 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3B SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1C66 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CAA DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CC3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D0B DUP3 PUSH2 0x1CC9 JUMP JUMPDEST PUSH2 0x1D15 DUP2 DUP6 PUSH2 0x1CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D25 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x1D2E DUP2 PUSH2 0x1CF1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1D51 DUP2 DUP5 PUSH2 0x1D01 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1D66 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D70 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D81 DUP2 PUSH2 0x1D5D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9C JUMPI PUSH2 0x1D9B PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1DA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DDB DUP3 PUSH2 0x1DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DEB DUP2 PUSH2 0x1DD1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DF5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E06 DUP2 PUSH2 0x1DE2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E22 JUMPI PUSH2 0x1E21 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E2F DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E40 DUP6 DUP3 DUP7 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E5E DUP2 PUSH2 0x1E4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E77 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E94 JUMPI PUSH2 0x1E93 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA1 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1EB2 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1EC3 DUP7 DUP3 DUP8 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EE2 DUP2 PUSH2 0x1ECD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EFB PUSH0 DUP4 ADD DUP5 PUSH2 0x1ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1F0A DUP2 PUSH2 0x1DD1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F23 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F01 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F3E JUMPI PUSH2 0x1F3D PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F4B DUP5 DUP3 DUP6 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F6A JUMPI PUSH2 0x1F69 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F77 DUP6 DUP3 DUP7 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F88 DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1F9C DUP3 PUSH2 0x1DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FAC DUP2 PUSH2 0x1F92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FC5 PUSH0 DUP4 ADD DUP5 PUSH2 0x1FA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FE2 JUMPI PUSH2 0x1FE1 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FEF DUP7 DUP3 DUP8 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2000 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2011 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2031 JUMPI PUSH2 0x2030 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x203E DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x204F DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2067 DUP2 PUSH2 0x1D5D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2082 JUMPI PUSH2 0x2081 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x208F DUP5 DUP3 DUP6 ADD PUSH2 0x2059 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x20DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20EF JUMPI PUSH2 0x20EE PUSH2 0x2098 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x212C DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x2137 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x214F JUMPI PUSH2 0x214E PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x215F DUP3 PUSH2 0x1ECD JUMP JUMPDEST SWAP2 POP PUSH2 0x216A DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2193 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x219E DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x21B6 JUMPI PUSH2 0x21B5 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x21CF PUSH0 DUP4 ADD DUP7 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x21DC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1CA1 JUMP JUMPDEST PUSH2 0x21E9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x2246 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x2222 JUMPI PUSH2 0x2221 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x2231 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x223F DUP6 PUSH2 0x21F1 JUMP JUMPDEST SWAP5 POP PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x225E JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x2319 JUMP JUMPDEST DUP2 PUSH2 0x226B JUMPI PUSH0 SWAP1 POP PUSH2 0x2319 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2281 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x228B JUMPI PUSH2 0x22BA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x2319 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x229D JUMPI PUSH2 0x229C PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x22B4 JUMPI PUSH2 0x22B3 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST POP PUSH2 0x2319 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x22EF JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x22EA JUMPI PUSH2 0x22E9 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST PUSH2 0x2319 JUMP JUMPDEST PUSH2 0x22FC DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x21FD JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x2313 JUMPI PUSH2 0x2312 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x232A DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x2335 DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP PUSH2 0x2362 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x224F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x23AA PUSH0 DUP4 ADD DUP6 PUSH2 0x1CA1 JUMP JUMPDEST PUSH2 0x23B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x23D1 PUSH0 DUP4 ADD DUP6 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x23DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x241C DUP3 PUSH2 0x1ECD JUMP JUMPDEST SWAP2 POP PUSH2 0x2427 DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2437 JUMPI PUSH2 0x2436 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2455 PUSH0 DUP4 ADD DUP7 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x2462 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x246F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2480 DUP2 PUSH2 0x1E4A JUMP JUMPDEST DUP2 EQ PUSH2 0x248A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x249B DUP2 PUSH2 0x2477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24B6 JUMPI PUSH2 0x24B5 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x24C3 DUP5 DUP3 DUP6 ADD PUSH2 0x248D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x24EA DUP3 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x24F4 DUP2 DUP6 PUSH2 0x24D6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2504 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x251B DUP3 DUP5 PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 CALLER 0xF6 0xCB DUP4 SWAP4 BALANCE CALLER 0xAF 0xE6 LOG4 0xD4 0x2C SWAP13 0xDC BYTE CREATE2 SWAP7 0xC0 PUSH24 0x301B34C416913646670960B464736F6C6343000819003300 ",
							"sourceMap": "175:528:12:-:0;;;287:186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;344:6;1896:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;4203:12:5;4217:19;4240:28;4261:6;4240:20;;;:28;;:::i;:::-;4202:66;;;;4300:7;:28;;4326:2;4300:28;;;4310:13;4300:28;4278:50;;;;;;;;;;4347:6;4338:15;;;;;;;;;;4192:168;;4165:195;411:10:12::2;395:5;;:27;;;;;;;;;;;;;;;;;;454:12;432:19;:34;;;;287:186:::0;;175:528;;4503:533:5;4570:4;4576:5;4594:12;4608:28;4648:6;4640:26;;4680:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4640:93;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4593:140;;;;4747:7;:39;;;;;4784:2;4758:15;:22;:28;;4747:39;4743:260;;;4802:24;4840:15;4829:38;;;;;;;;;;;;:::i;:::-;4802:65;;4905:15;4885:35;;:16;:35;4881:112;;4948:4;4960:16;4940:38;;;;;;;;;4881:112;4788:215;4743:260;5020:5;5027:1;5012:17;;;;;;4503:533;;;;:::o;88:117:13:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:111::-;620:7;649:24;667:5;649:24;:::i;:::-;638:35;;568:111;;;:::o;685:152::-;773:39;806:5;773:39;:::i;:::-;766:5;763:50;753:78;;827:1;824;817:12;753:78;685:152;:::o;843:173::-;915:5;946:6;940:13;931:22;;962:48;1004:5;962:48;:::i;:::-;843:173;;;;:::o;1022:77::-;1059:7;1088:5;1077:16;;1022:77;;;:::o;1105:122::-;1178:24;1196:5;1178:24;:::i;:::-;1171:5;1168:35;1158:63;;1217:1;1214;1207:12;1158:63;1105:122;:::o;1233:143::-;1290:5;1321:6;1315:13;1306:22;;1337:33;1364:5;1337:33;:::i;:::-;1233:143;;;;:::o;1382:537::-;1476:6;1484;1533:2;1521:9;1512:7;1508:23;1504:32;1501:119;;;1539:79;;:::i;:::-;1501:119;1659:1;1684:79;1755:7;1746:6;1735:9;1731:22;1684:79;:::i;:::-;1674:89;;1630:143;1812:2;1838:64;1894:7;1885:6;1874:9;1870:22;1838:64;:::i;:::-;1828:74;;1783:129;1382:537;;;;;:::o;1925:99::-;1977:6;2011:5;2005:12;1995:22;;1925:99;;;:::o;2030:180::-;2078:77;2075:1;2068:88;2175:4;2172:1;2165:15;2199:4;2196:1;2189:15;2216:180;2264:77;2261:1;2254:88;2361:4;2358:1;2351:15;2385:4;2382:1;2375:15;2402:320;2446:6;2483:1;2477:4;2473:12;2463:22;;2530:1;2524:4;2520:12;2551:18;2541:81;;2607:4;2599:6;2595:17;2585:27;;2541:81;2669:2;2661:6;2658:14;2638:18;2635:38;2632:84;;2688:18;;:::i;:::-;2632:84;2453:269;2402:320;;;:::o;2728:141::-;2777:4;2800:3;2792:11;;2823:3;2820:1;2813:14;2857:4;2854:1;2844:18;2836:26;;2728:141;;;:::o;2875:93::-;2912:6;2959:2;2954;2947:5;2943:14;2939:23;2929:33;;2875:93;;;:::o;2974:107::-;3018:8;3068:5;3062:4;3058:16;3037:37;;2974:107;;;;:::o;3087:393::-;3156:6;3206:1;3194:10;3190:18;3229:97;3259:66;3248:9;3229:97;:::i;:::-;3347:39;3377:8;3366:9;3347:39;:::i;:::-;3335:51;;3419:4;3415:9;3408:5;3404:21;3395:30;;3468:4;3458:8;3454:19;3447:5;3444:30;3434:40;;3163:317;;3087:393;;;;;:::o;3486:60::-;3514:3;3535:5;3528:12;;3486:60;;;:::o;3552:142::-;3602:9;3635:53;3653:34;3662:24;3680:5;3662:24;:::i;:::-;3653:34;:::i;:::-;3635:53;:::i;:::-;3622:66;;3552:142;;;:::o;3700:75::-;3743:3;3764:5;3757:12;;3700:75;;;:::o;3781:269::-;3891:39;3922:7;3891:39;:::i;:::-;3952:91;4001:41;4025:16;4001:41;:::i;:::-;3993:6;3986:4;3980:11;3952:91;:::i;:::-;3946:4;3939:105;3857:193;3781:269;;;:::o;4056:73::-;4101:3;4056:73;:::o;4135:189::-;4212:32;;:::i;:::-;4253:65;4311:6;4303;4297:4;4253:65;:::i;:::-;4188:136;4135:189;;:::o;4330:186::-;4390:120;4407:3;4400:5;4397:14;4390:120;;;4461:39;4498:1;4491:5;4461:39;:::i;:::-;4434:1;4427:5;4423:13;4414:22;;4390:120;;;4330:186;;:::o;4522:543::-;4623:2;4618:3;4615:11;4612:446;;;4657:38;4689:5;4657:38;:::i;:::-;4741:29;4759:10;4741:29;:::i;:::-;4731:8;4727:44;4924:2;4912:10;4909:18;4906:49;;;4945:8;4930:23;;4906:49;4968:80;5024:22;5042:3;5024:22;:::i;:::-;5014:8;5010:37;4997:11;4968:80;:::i;:::-;4627:431;;4612:446;4522:543;;;:::o;5071:117::-;5125:8;5175:5;5169:4;5165:16;5144:37;;5071:117;;;;:::o;5194:169::-;5238:6;5271:51;5319:1;5315:6;5307:5;5304:1;5300:13;5271:51;:::i;:::-;5267:56;5352:4;5346;5342:15;5332:25;;5245:118;5194:169;;;;:::o;5368:295::-;5444:4;5590:29;5615:3;5609:4;5590:29;:::i;:::-;5582:37;;5652:3;5649:1;5645:11;5639:4;5636:21;5628:29;;5368:295;;;;:::o;5668:1395::-;5785:37;5818:3;5785:37;:::i;:::-;5887:18;5879:6;5876:30;5873:56;;;5909:18;;:::i;:::-;5873:56;5953:38;5985:4;5979:11;5953:38;:::i;:::-;6038:67;6098:6;6090;6084:4;6038:67;:::i;:::-;6132:1;6156:4;6143:17;;6188:2;6180:6;6177:14;6205:1;6200:618;;;;6862:1;6879:6;6876:77;;;6928:9;6923:3;6919:19;6913:26;6904:35;;6876:77;6979:67;7039:6;7032:5;6979:67;:::i;:::-;6973:4;6966:81;6835:222;6170:887;;6200:618;6252:4;6248:9;6240:6;6236:22;6286:37;6318:4;6286:37;:::i;:::-;6345:1;6359:208;6373:7;6370:1;6367:14;6359:208;;;6452:9;6447:3;6443:19;6437:26;6429:6;6422:42;6503:1;6495:6;6491:14;6481:24;;6550:2;6539:9;6535:18;6522:31;;6396:4;6393:1;6389:12;6384:17;;6359:208;;;6595:6;6586:7;6583:19;6580:179;;;6653:9;6648:3;6644:19;6638:26;6696:48;6738:4;6730:6;6726:17;6715:9;6696:48;:::i;:::-;6688:6;6681:64;6603:156;6580:179;6805:1;6801;6793:6;6789:14;6785:22;6779:4;6772:36;6207:611;;;6170:887;;5760:1303;;;5668:1395;;:::o;7069:98::-;7120:6;7154:5;7148:12;7138:22;;7069:98;;;:::o;7173:147::-;7274:11;7311:3;7296:18;;7173:147;;;;:::o;7326:139::-;7415:6;7410:3;7405;7399:23;7456:1;7447:6;7442:3;7438:16;7431:27;7326:139;;;:::o;7471:386::-;7575:3;7603:38;7635:5;7603:38;:::i;:::-;7657:88;7738:6;7733:3;7657:88;:::i;:::-;7650:95;;7754:65;7812:6;7807:3;7800:4;7793:5;7789:16;7754:65;:::i;:::-;7844:6;7839:3;7835:16;7828:23;;7579:278;7471:386;;;;:::o;7863:271::-;7993:3;8015:93;8104:3;8095:6;8015:93;:::i;:::-;8008:100;;8125:3;8118:10;;7863:271;;;;:::o;8140:351::-;8210:6;8259:2;8247:9;8238:7;8234:23;8230:32;8227:119;;;8265:79;;:::i;:::-;8227:119;8385:1;8410:64;8466:7;8457:6;8446:9;8442:22;8410:64;:::i;:::-;8400:74;;8356:128;8140:351;;;;:::o;175:528:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_1033": {
									"entryPoint": 3454,
									"id": 1033,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1093": {
									"entryPoint": 4473,
									"id": 1093,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_1015": {
									"entryPoint": 6762,
									"id": 1015,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_2207": {
									"entryPoint": 6613,
									"id": 2207,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_convertToAssets_1812": {
									"entryPoint": 3359,
									"id": 1812,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_convertToShares_1784": {
									"entryPoint": 4282,
									"id": 1784,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_decimalsOffset_1904": {
									"entryPoint": 3916,
									"id": 1904,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_deposit_1849": {
									"entryPoint": 5513,
									"id": 1849,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_deposit_484": {
									"entryPoint": 3984,
									"id": 484,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_entryFeeBasisPoints_3641": {
									"entryPoint": 4137,
									"id": 3641,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_entryFeeRecipient_3650": {
									"entryPoint": 5473,
									"id": 3650,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_exitFeeBasisPoints_562": {
									"entryPoint": 3472,
									"id": 562,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_exitFeeRecipient_584": {
									"entryPoint": 5803,
									"id": 584,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_feeOnRaw_604": {
									"entryPoint": 3476,
									"id": 604,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_feeOnTotal_626": {
									"entryPoint": 3938,
									"id": 626,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_mint_982": {
									"entryPoint": 6486,
									"id": 982,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_2522": {
									"entryPoint": 3447,
									"id": 2522,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_2509": {
									"entryPoint": 7252,
									"id": 2509,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_1141": {
									"entryPoint": 3530,
									"id": 1141,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_872": {
									"entryPoint": 3676,
									"id": 872,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_949": {
									"entryPoint": 4936,
									"id": 949,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_withdraw_1896": {
									"entryPoint": 5807,
									"id": 1896,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@_withdraw_546": {
									"entryPoint": 4146,
									"id": 546,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@allowance_769": {
									"entryPoint": 3180,
									"id": 769,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_793": {
									"entryPoint": 1899,
									"id": 793,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@asset_1402": {
									"entryPoint": 2094,
									"id": 1402,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@balanceOf_728": {
									"entryPoint": 2351,
									"id": 728,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToAssets_1449": {
									"entryPoint": 1881,
									"id": 1449,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToShares_1433": {
									"entryPoint": 3119,
									"id": 1433,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1390": {
									"entryPoint": 2037,
									"id": 1390,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@deposit_1618": {
									"entryPoint": 2223,
									"id": 1618,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@entryFeeBasisPoints_3604": {
									"entryPoint": 3072,
									"id": 3604,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_2377": {
									"entryPoint": 6910,
									"id": 2377,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@functionCall_2331": {
									"entryPoint": 6889,
									"id": 2331,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@maxDeposit_1464": {
									"entryPoint": 2133,
									"id": 1464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxMint_1479": {
									"entryPoint": 3078,
									"id": 1479,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxRedeem_1510": {
									"entryPoint": 3163,
									"id": 1510,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxWithdraw_1497": {
									"entryPoint": 3137,
									"id": 1497,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_1662": {
									"entryPoint": 2457,
									"id": 1662,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@mulDiv_2928": {
									"entryPoint": 6056,
									"id": 2928,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@mulDiv_2971": {
									"entryPoint": 4388,
									"id": 2971,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@name_688": {
									"entryPoint": 1737,
									"id": 688,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_3602": {
									"entryPoint": 2420,
									"id": 3602,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@previewDeposit_1526": {
									"entryPoint": 4370,
									"id": 1526,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewDeposit_350": {
									"entryPoint": 3310,
									"id": 350,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewMint_1542": {
									"entryPoint": 4118,
									"id": 1542,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewMint_375": {
									"entryPoint": 2763,
									"id": 375,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewRedeem_1574": {
									"entryPoint": 3920,
									"id": 1574,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewRedeem_425": {
									"entryPoint": 2174,
									"id": 425,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewWithdraw_1558": {
									"entryPoint": 3511,
									"id": 1558,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewWithdraw_400": {
									"entryPoint": 1933,
									"id": 400,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@redeem_1756": {
									"entryPoint": 2942,
									"id": 1756,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@safeTransferFrom_2044": {
									"entryPoint": 6356,
									"id": 2044,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_2017": {
									"entryPoint": 5676,
									"id": 2017,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@symbol_697": {
									"entryPoint": 2585,
									"id": 697,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalAssets_1417": {
									"entryPoint": 1579,
									"id": 1417,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_715": {
									"entryPoint": 1982,
									"id": 715,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_825": {
									"entryPoint": 1991,
									"id": 825,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_752": {
									"entryPoint": 2729,
									"id": 752,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unsignedRoundsUp_3593": {
									"entryPoint": 6311,
									"id": 3593,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_2469": {
									"entryPoint": 7111,
									"id": 2469,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_1709": {
									"entryPoint": 2812,
									"id": 1709,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 7672,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 9357,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 7539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 8281,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7977,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 8219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7805,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7692,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 9377,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7559,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 8301,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 8020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_addresst_address": {
									"entryPoint": 8139,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_t_address_payable_to_t_address_payable_fromStack": {
									"entryPoint": 8099,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 7937,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 7765,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9440,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7425,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 7329,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 7897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9488,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 7952,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed": {
									"entryPoint": 8114,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 9282,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 9150,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8636,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 7780,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7481,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 7344,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 9111,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 7912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 9420,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7369,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9430,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 7379,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8482,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 8533,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 8701,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 8992,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 8783,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8585,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7633,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_address_payable": {
									"entryPoint": 8082,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7754,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7602,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 7320,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7885,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 7395,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 8389,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint8": {
									"entryPoint": 9234,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8437,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 9066,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 9189,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 8344,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7513,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7409,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 8689,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 7650,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 9335,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 7517,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:15653:13",
										"nodeType": "YulBlock",
										"src": "0:15653:13",
										"statements": [
											{
												"body": {
													"nativeSrc": "52:32:13",
													"nodeType": "YulBlock",
													"src": "52:32:13",
													"statements": [
														{
															"nativeSrc": "62:16:13",
															"nodeType": "YulAssignment",
															"src": "62:16:13",
															"value": {
																"name": "value",
																"nativeSrc": "73:5:13",
																"nodeType": "YulIdentifier",
																"src": "73:5:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "62:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "7:77:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "34:5:13",
														"nodeType": "YulTypedName",
														"src": "34:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "44:7:13",
														"nodeType": "YulTypedName",
														"src": "44:7:13",
														"type": ""
													}
												],
												"src": "7:77:13"
											},
											{
												"body": {
													"nativeSrc": "155:53:13",
													"nodeType": "YulBlock",
													"src": "155:53:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "172:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "172:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "195:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "195:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "177:17:13",
																			"nodeType": "YulIdentifier",
																			"src": "177:17:13"
																		},
																		"nativeSrc": "177:24:13",
																		"nodeType": "YulFunctionCall",
																		"src": "177:24:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "165:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "165:6:13"
																},
																"nativeSrc": "165:37:13",
																"nodeType": "YulFunctionCall",
																"src": "165:37:13"
															},
															"nativeSrc": "165:37:13",
															"nodeType": "YulExpressionStatement",
															"src": "165:37:13"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "90:118:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "143:5:13",
														"nodeType": "YulTypedName",
														"src": "143:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "150:3:13",
														"nodeType": "YulTypedName",
														"src": "150:3:13",
														"type": ""
													}
												],
												"src": "90:118:13"
											},
											{
												"body": {
													"nativeSrc": "312:124:13",
													"nodeType": "YulBlock",
													"src": "312:124:13",
													"statements": [
														{
															"nativeSrc": "322:26:13",
															"nodeType": "YulAssignment",
															"src": "322:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "334:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "334:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "345:2:13",
																		"nodeType": "YulLiteral",
																		"src": "345:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "330:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "330:3:13"
																},
																"nativeSrc": "330:18:13",
																"nodeType": "YulFunctionCall",
																"src": "330:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "322:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "322:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "402:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "402:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "415:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "415:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "426:1:13",
																				"nodeType": "YulLiteral",
																				"src": "426:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "411:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "411:3:13"
																		},
																		"nativeSrc": "411:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "411:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "358:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "358:43:13"
																},
																"nativeSrc": "358:71:13",
																"nodeType": "YulFunctionCall",
																"src": "358:71:13"
															},
															"nativeSrc": "358:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "358:71:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "214:222:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "284:9:13",
														"nodeType": "YulTypedName",
														"src": "284:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "296:6:13",
														"nodeType": "YulTypedName",
														"src": "296:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "307:4:13",
														"nodeType": "YulTypedName",
														"src": "307:4:13",
														"type": ""
													}
												],
												"src": "214:222:13"
											},
											{
												"body": {
													"nativeSrc": "501:40:13",
													"nodeType": "YulBlock",
													"src": "501:40:13",
													"statements": [
														{
															"nativeSrc": "512:22:13",
															"nodeType": "YulAssignment",
															"src": "512:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "528:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "528:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "522:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "522:5:13"
																},
																"nativeSrc": "522:12:13",
																"nodeType": "YulFunctionCall",
																"src": "522:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "512:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "512:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "442:99:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "484:5:13",
														"nodeType": "YulTypedName",
														"src": "484:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "494:6:13",
														"nodeType": "YulTypedName",
														"src": "494:6:13",
														"type": ""
													}
												],
												"src": "442:99:13"
											},
											{
												"body": {
													"nativeSrc": "643:73:13",
													"nodeType": "YulBlock",
													"src": "643:73:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "660:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "660:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "665:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "665:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "653:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "653:6:13"
																},
																"nativeSrc": "653:19:13",
																"nodeType": "YulFunctionCall",
																"src": "653:19:13"
															},
															"nativeSrc": "653:19:13",
															"nodeType": "YulExpressionStatement",
															"src": "653:19:13"
														},
														{
															"nativeSrc": "681:29:13",
															"nodeType": "YulAssignment",
															"src": "681:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "700:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "700:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "705:4:13",
																		"nodeType": "YulLiteral",
																		"src": "705:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "696:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "696:3:13"
																},
																"nativeSrc": "696:14:13",
																"nodeType": "YulFunctionCall",
																"src": "696:14:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "681:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "681:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "547:169:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "615:3:13",
														"nodeType": "YulTypedName",
														"src": "615:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "620:6:13",
														"nodeType": "YulTypedName",
														"src": "620:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "631:11:13",
														"nodeType": "YulTypedName",
														"src": "631:11:13",
														"type": ""
													}
												],
												"src": "547:169:13"
											},
											{
												"body": {
													"nativeSrc": "784:77:13",
													"nodeType": "YulBlock",
													"src": "784:77:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "801:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "801:3:13"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "806:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "806:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "811:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "811:6:13"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "795:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "795:5:13"
																},
																"nativeSrc": "795:23:13",
																"nodeType": "YulFunctionCall",
																"src": "795:23:13"
															},
															"nativeSrc": "795:23:13",
															"nodeType": "YulExpressionStatement",
															"src": "795:23:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "838:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "838:3:13"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "843:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "843:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "834:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "834:3:13"
																		},
																		"nativeSrc": "834:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "834:16:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "852:1:13",
																		"nodeType": "YulLiteral",
																		"src": "852:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "827:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "827:6:13"
																},
																"nativeSrc": "827:27:13",
																"nodeType": "YulFunctionCall",
																"src": "827:27:13"
															},
															"nativeSrc": "827:27:13",
															"nodeType": "YulExpressionStatement",
															"src": "827:27:13"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "722:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "766:3:13",
														"nodeType": "YulTypedName",
														"src": "766:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "771:3:13",
														"nodeType": "YulTypedName",
														"src": "771:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "776:6:13",
														"nodeType": "YulTypedName",
														"src": "776:6:13",
														"type": ""
													}
												],
												"src": "722:139:13"
											},
											{
												"body": {
													"nativeSrc": "915:54:13",
													"nodeType": "YulBlock",
													"src": "915:54:13",
													"statements": [
														{
															"nativeSrc": "925:38:13",
															"nodeType": "YulAssignment",
															"src": "925:38:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "943:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "943:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "950:2:13",
																				"nodeType": "YulLiteral",
																				"src": "950:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "939:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:13"
																		},
																		"nativeSrc": "939:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "939:14:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "959:2:13",
																				"nodeType": "YulLiteral",
																				"src": "959:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "955:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:13"
																		},
																		"nativeSrc": "955:7:13",
																		"nodeType": "YulFunctionCall",
																		"src": "955:7:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "935:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:13"
																},
																"nativeSrc": "935:28:13",
																"nodeType": "YulFunctionCall",
																"src": "935:28:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "925:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "925:6:13"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "867:102:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "898:5:13",
														"nodeType": "YulTypedName",
														"src": "898:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "908:6:13",
														"nodeType": "YulTypedName",
														"src": "908:6:13",
														"type": ""
													}
												],
												"src": "867:102:13"
											},
											{
												"body": {
													"nativeSrc": "1067:285:13",
													"nodeType": "YulBlock",
													"src": "1067:285:13",
													"statements": [
														{
															"nativeSrc": "1077:53:13",
															"nodeType": "YulVariableDeclaration",
															"src": "1077:53:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1124:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "1124:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "1091:32:13",
																	"nodeType": "YulIdentifier",
																	"src": "1091:32:13"
																},
																"nativeSrc": "1091:39:13",
																"nodeType": "YulFunctionCall",
																"src": "1091:39:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "1081:6:13",
																	"nodeType": "YulTypedName",
																	"src": "1081:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1139:78:13",
															"nodeType": "YulAssignment",
															"src": "1139:78:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1205:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1205:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1210:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1210:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1146:58:13",
																	"nodeType": "YulIdentifier",
																	"src": "1146:58:13"
																},
																"nativeSrc": "1146:71:13",
																"nodeType": "YulFunctionCall",
																"src": "1146:71:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "1139:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1139:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1265:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "1265:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1272:4:13",
																				"nodeType": "YulLiteral",
																				"src": "1272:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1261:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1261:3:13"
																		},
																		"nativeSrc": "1261:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1261:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "1279:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1279:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1284:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1284:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "1226:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "1226:34:13"
																},
																"nativeSrc": "1226:65:13",
																"nodeType": "YulFunctionCall",
																"src": "1226:65:13"
															},
															"nativeSrc": "1226:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "1226:65:13"
														},
														{
															"nativeSrc": "1300:46:13",
															"nodeType": "YulAssignment",
															"src": "1300:46:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1311:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "1311:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1338:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1338:6:13"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "1316:21:13",
																			"nodeType": "YulIdentifier",
																			"src": "1316:21:13"
																		},
																		"nativeSrc": "1316:29:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1316:29:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1307:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1307:3:13"
																},
																"nativeSrc": "1307:39:13",
																"nodeType": "YulFunctionCall",
																"src": "1307:39:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "1300:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1300:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "975:377:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1048:5:13",
														"nodeType": "YulTypedName",
														"src": "1048:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "1055:3:13",
														"nodeType": "YulTypedName",
														"src": "1055:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "1063:3:13",
														"nodeType": "YulTypedName",
														"src": "1063:3:13",
														"type": ""
													}
												],
												"src": "975:377:13"
											},
											{
												"body": {
													"nativeSrc": "1476:195:13",
													"nodeType": "YulBlock",
													"src": "1476:195:13",
													"statements": [
														{
															"nativeSrc": "1486:26:13",
															"nodeType": "YulAssignment",
															"src": "1486:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1509:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1509:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1494:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1494:3:13"
																},
																"nativeSrc": "1494:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1494:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1486:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1486:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1533:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1533:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1544:1:13",
																				"nodeType": "YulLiteral",
																				"src": "1544:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1529:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1529:3:13"
																		},
																		"nativeSrc": "1529:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1529:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1552:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "1552:4:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1558:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1558:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1548:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:13"
																		},
																		"nativeSrc": "1548:20:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1548:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1522:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1522:6:13"
																},
																"nativeSrc": "1522:47:13",
																"nodeType": "YulFunctionCall",
																"src": "1522:47:13"
															},
															"nativeSrc": "1522:47:13",
															"nodeType": "YulExpressionStatement",
															"src": "1522:47:13"
														},
														{
															"nativeSrc": "1578:86:13",
															"nodeType": "YulAssignment",
															"src": "1578:86:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1650:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1650:6:13"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1659:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "1659:4:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1586:63:13",
																	"nodeType": "YulIdentifier",
																	"src": "1586:63:13"
																},
																"nativeSrc": "1586:78:13",
																"nodeType": "YulFunctionCall",
																"src": "1586:78:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1578:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1578:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "1358:313:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1448:9:13",
														"nodeType": "YulTypedName",
														"src": "1448:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1460:6:13",
														"nodeType": "YulTypedName",
														"src": "1460:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1471:4:13",
														"nodeType": "YulTypedName",
														"src": "1471:4:13",
														"type": ""
													}
												],
												"src": "1358:313:13"
											},
											{
												"body": {
													"nativeSrc": "1717:35:13",
													"nodeType": "YulBlock",
													"src": "1717:35:13",
													"statements": [
														{
															"nativeSrc": "1727:19:13",
															"nodeType": "YulAssignment",
															"src": "1727:19:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1743:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1743:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1737:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1737:5:13"
																},
																"nativeSrc": "1737:9:13",
																"nodeType": "YulFunctionCall",
																"src": "1737:9:13"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1727:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1727:6:13"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1677:75:13",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1710:6:13",
														"nodeType": "YulTypedName",
														"src": "1710:6:13",
														"type": ""
													}
												],
												"src": "1677:75:13"
											},
											{
												"body": {
													"nativeSrc": "1847:28:13",
													"nodeType": "YulBlock",
													"src": "1847:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1864:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1864:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1867:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1867:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1857:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1857:6:13"
																},
																"nativeSrc": "1857:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1857:12:13"
															},
															"nativeSrc": "1857:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "1857:12:13"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1758:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1758:117:13"
											},
											{
												"body": {
													"nativeSrc": "1970:28:13",
													"nodeType": "YulBlock",
													"src": "1970:28:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1987:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1987:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1990:1:13",
																		"nodeType": "YulLiteral",
																		"src": "1990:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1980:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1980:6:13"
																},
																"nativeSrc": "1980:12:13",
																"nodeType": "YulFunctionCall",
																"src": "1980:12:13"
															},
															"nativeSrc": "1980:12:13",
															"nodeType": "YulExpressionStatement",
															"src": "1980:12:13"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1881:117:13",
												"nodeType": "YulFunctionDefinition",
												"src": "1881:117:13"
											},
											{
												"body": {
													"nativeSrc": "2047:79:13",
													"nodeType": "YulBlock",
													"src": "2047:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2104:16:13",
																"nodeType": "YulBlock",
																"src": "2104:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2113:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2113:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2116:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2116:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2106:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2106:6:13"
																			},
																			"nativeSrc": "2106:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2106:12:13"
																		},
																		"nativeSrc": "2106:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2106:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2070:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2070:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2095:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "2095:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2077:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "2077:17:13"
																				},
																				"nativeSrc": "2077:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2077:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2067:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "2067:2:13"
																		},
																		"nativeSrc": "2067:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2067:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2060:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2060:6:13"
																},
																"nativeSrc": "2060:43:13",
																"nodeType": "YulFunctionCall",
																"src": "2060:43:13"
															},
															"nativeSrc": "2057:63:13",
															"nodeType": "YulIf",
															"src": "2057:63:13"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2004:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2040:5:13",
														"nodeType": "YulTypedName",
														"src": "2040:5:13",
														"type": ""
													}
												],
												"src": "2004:122:13"
											},
											{
												"body": {
													"nativeSrc": "2184:87:13",
													"nodeType": "YulBlock",
													"src": "2184:87:13",
													"statements": [
														{
															"nativeSrc": "2194:29:13",
															"nodeType": "YulAssignment",
															"src": "2194:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2216:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2216:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2203:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "2203:12:13"
																},
																"nativeSrc": "2203:20:13",
																"nodeType": "YulFunctionCall",
																"src": "2203:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2194:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "2194:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2259:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2259:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2232:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "2232:26:13"
																},
																"nativeSrc": "2232:33:13",
																"nodeType": "YulFunctionCall",
																"src": "2232:33:13"
															},
															"nativeSrc": "2232:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "2232:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2132:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2162:6:13",
														"nodeType": "YulTypedName",
														"src": "2162:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2170:3:13",
														"nodeType": "YulTypedName",
														"src": "2170:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2178:5:13",
														"nodeType": "YulTypedName",
														"src": "2178:5:13",
														"type": ""
													}
												],
												"src": "2132:139:13"
											},
											{
												"body": {
													"nativeSrc": "2343:263:13",
													"nodeType": "YulBlock",
													"src": "2343:263:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2389:83:13",
																"nodeType": "YulBlock",
																"src": "2389:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2391:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "2391:77:13"
																			},
																			"nativeSrc": "2391:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2391:79:13"
																		},
																		"nativeSrc": "2391:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2391:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2364:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "2364:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2373:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "2373:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2360:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2360:3:13"
																		},
																		"nativeSrc": "2360:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2360:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2385:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2385:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2356:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2356:3:13"
																},
																"nativeSrc": "2356:32:13",
																"nodeType": "YulFunctionCall",
																"src": "2356:32:13"
															},
															"nativeSrc": "2353:119:13",
															"nodeType": "YulIf",
															"src": "2353:119:13"
														},
														{
															"nativeSrc": "2482:117:13",
															"nodeType": "YulBlock",
															"src": "2482:117:13",
															"statements": [
																{
																	"nativeSrc": "2497:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2497:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2511:1:13",
																		"nodeType": "YulLiteral",
																		"src": "2511:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2501:6:13",
																			"nodeType": "YulTypedName",
																			"src": "2501:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2526:63:13",
																	"nodeType": "YulAssignment",
																	"src": "2526:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2561:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "2561:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2572:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "2572:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2557:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "2557:3:13"
																				},
																				"nativeSrc": "2557:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2557:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2581:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "2581:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2536:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "2536:20:13"
																		},
																		"nativeSrc": "2536:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2536:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2526:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "2526:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2277:329:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2313:9:13",
														"nodeType": "YulTypedName",
														"src": "2313:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2324:7:13",
														"nodeType": "YulTypedName",
														"src": "2324:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2336:6:13",
														"nodeType": "YulTypedName",
														"src": "2336:6:13",
														"type": ""
													}
												],
												"src": "2277:329:13"
											},
											{
												"body": {
													"nativeSrc": "2657:81:13",
													"nodeType": "YulBlock",
													"src": "2657:81:13",
													"statements": [
														{
															"nativeSrc": "2667:65:13",
															"nodeType": "YulAssignment",
															"src": "2667:65:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2682:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2682:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2689:42:13",
																		"nodeType": "YulLiteral",
																		"src": "2689:42:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2678:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2678:3:13"
																},
																"nativeSrc": "2678:54:13",
																"nodeType": "YulFunctionCall",
																"src": "2678:54:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2667:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "2667:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "2612:126:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2639:5:13",
														"nodeType": "YulTypedName",
														"src": "2639:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2649:7:13",
														"nodeType": "YulTypedName",
														"src": "2649:7:13",
														"type": ""
													}
												],
												"src": "2612:126:13"
											},
											{
												"body": {
													"nativeSrc": "2789:51:13",
													"nodeType": "YulBlock",
													"src": "2789:51:13",
													"statements": [
														{
															"nativeSrc": "2799:35:13",
															"nodeType": "YulAssignment",
															"src": "2799:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2828:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "2828:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "2810:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "2810:17:13"
																},
																"nativeSrc": "2810:24:13",
																"nodeType": "YulFunctionCall",
																"src": "2810:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2799:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "2799:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "2744:96:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2771:5:13",
														"nodeType": "YulTypedName",
														"src": "2771:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2781:7:13",
														"nodeType": "YulTypedName",
														"src": "2781:7:13",
														"type": ""
													}
												],
												"src": "2744:96:13"
											},
											{
												"body": {
													"nativeSrc": "2889:79:13",
													"nodeType": "YulBlock",
													"src": "2889:79:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "2946:16:13",
																"nodeType": "YulBlock",
																"src": "2946:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2955:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2955:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2958:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2958:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2948:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2948:6:13"
																			},
																			"nativeSrc": "2948:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2948:12:13"
																		},
																		"nativeSrc": "2948:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2948:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2912:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2912:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2937:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "2937:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "2919:17:13",
																					"nodeType": "YulIdentifier",
																					"src": "2919:17:13"
																				},
																				"nativeSrc": "2919:24:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2919:24:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2909:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "2909:2:13"
																		},
																		"nativeSrc": "2909:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2909:35:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2902:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2902:6:13"
																},
																"nativeSrc": "2902:43:13",
																"nodeType": "YulFunctionCall",
																"src": "2902:43:13"
															},
															"nativeSrc": "2899:63:13",
															"nodeType": "YulIf",
															"src": "2899:63:13"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "2846:122:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2882:5:13",
														"nodeType": "YulTypedName",
														"src": "2882:5:13",
														"type": ""
													}
												],
												"src": "2846:122:13"
											},
											{
												"body": {
													"nativeSrc": "3026:87:13",
													"nodeType": "YulBlock",
													"src": "3026:87:13",
													"statements": [
														{
															"nativeSrc": "3036:29:13",
															"nodeType": "YulAssignment",
															"src": "3036:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3058:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3058:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3045:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "3045:12:13"
																},
																"nativeSrc": "3045:20:13",
																"nodeType": "YulFunctionCall",
																"src": "3045:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3036:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "3036:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3101:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "3101:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "3074:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "3074:26:13"
																},
																"nativeSrc": "3074:33:13",
																"nodeType": "YulFunctionCall",
																"src": "3074:33:13"
															},
															"nativeSrc": "3074:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "3074:33:13"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "2974:139:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3004:6:13",
														"nodeType": "YulTypedName",
														"src": "3004:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3012:3:13",
														"nodeType": "YulTypedName",
														"src": "3012:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3020:5:13",
														"nodeType": "YulTypedName",
														"src": "3020:5:13",
														"type": ""
													}
												],
												"src": "2974:139:13"
											},
											{
												"body": {
													"nativeSrc": "3202:391:13",
													"nodeType": "YulBlock",
													"src": "3202:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "3248:83:13",
																"nodeType": "YulBlock",
																"src": "3248:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3250:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "3250:77:13"
																			},
																			"nativeSrc": "3250:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3250:79:13"
																		},
																		"nativeSrc": "3250:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "3250:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3223:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3223:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3232:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3219:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3219:3:13"
																		},
																		"nativeSrc": "3219:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3219:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3244:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3244:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3215:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3215:3:13"
																},
																"nativeSrc": "3215:32:13",
																"nodeType": "YulFunctionCall",
																"src": "3215:32:13"
															},
															"nativeSrc": "3212:119:13",
															"nodeType": "YulIf",
															"src": "3212:119:13"
														},
														{
															"nativeSrc": "3341:117:13",
															"nodeType": "YulBlock",
															"src": "3341:117:13",
															"statements": [
																{
																	"nativeSrc": "3356:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3356:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3370:1:13",
																		"nodeType": "YulLiteral",
																		"src": "3370:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3360:6:13",
																			"nodeType": "YulTypedName",
																			"src": "3360:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3385:63:13",
																	"nodeType": "YulAssignment",
																	"src": "3385:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3420:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "3420:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3431:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "3431:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3416:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3416:3:13"
																				},
																				"nativeSrc": "3416:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3416:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3440:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3440:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3395:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "3395:20:13"
																		},
																		"nativeSrc": "3395:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3395:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3385:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3385:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3468:118:13",
															"nodeType": "YulBlock",
															"src": "3468:118:13",
															"statements": [
																{
																	"nativeSrc": "3483:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3483:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3497:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3497:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3487:6:13",
																			"nodeType": "YulTypedName",
																			"src": "3487:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3513:63:13",
																	"nodeType": "YulAssignment",
																	"src": "3513:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3548:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "3548:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3559:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "3559:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3544:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3544:3:13"
																				},
																				"nativeSrc": "3544:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3544:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3568:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3568:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "3523:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "3523:20:13"
																		},
																		"nativeSrc": "3523:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3523:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3513:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3513:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "3119:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3164:9:13",
														"nodeType": "YulTypedName",
														"src": "3164:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3175:7:13",
														"nodeType": "YulTypedName",
														"src": "3175:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3187:6:13",
														"nodeType": "YulTypedName",
														"src": "3187:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3195:6:13",
														"nodeType": "YulTypedName",
														"src": "3195:6:13",
														"type": ""
													}
												],
												"src": "3119:474:13"
											},
											{
												"body": {
													"nativeSrc": "3641:48:13",
													"nodeType": "YulBlock",
													"src": "3641:48:13",
													"statements": [
														{
															"nativeSrc": "3651:32:13",
															"nodeType": "YulAssignment",
															"src": "3651:32:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3676:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3676:5:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "3669:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "3669:6:13"
																		},
																		"nativeSrc": "3669:13:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3669:13:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3662:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3662:6:13"
																},
																"nativeSrc": "3662:21:13",
																"nodeType": "YulFunctionCall",
																"src": "3662:21:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3651:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "3651:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "3599:90:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3623:5:13",
														"nodeType": "YulTypedName",
														"src": "3623:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3633:7:13",
														"nodeType": "YulTypedName",
														"src": "3633:7:13",
														"type": ""
													}
												],
												"src": "3599:90:13"
											},
											{
												"body": {
													"nativeSrc": "3754:50:13",
													"nodeType": "YulBlock",
													"src": "3754:50:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3771:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3771:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3791:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3791:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3776:14:13",
																			"nodeType": "YulIdentifier",
																			"src": "3776:14:13"
																		},
																		"nativeSrc": "3776:21:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3776:21:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3764:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:13"
																},
																"nativeSrc": "3764:34:13",
																"nodeType": "YulFunctionCall",
																"src": "3764:34:13"
															},
															"nativeSrc": "3764:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "3764:34:13"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3695:109:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3742:5:13",
														"nodeType": "YulTypedName",
														"src": "3742:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3749:3:13",
														"nodeType": "YulTypedName",
														"src": "3749:3:13",
														"type": ""
													}
												],
												"src": "3695:109:13"
											},
											{
												"body": {
													"nativeSrc": "3902:118:13",
													"nodeType": "YulBlock",
													"src": "3902:118:13",
													"statements": [
														{
															"nativeSrc": "3912:26:13",
															"nodeType": "YulAssignment",
															"src": "3912:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3924:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3924:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3935:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3935:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3920:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3920:3:13"
																},
																"nativeSrc": "3920:18:13",
																"nodeType": "YulFunctionCall",
																"src": "3920:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3912:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "3912:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3986:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3986:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3999:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3999:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4010:1:13",
																				"nodeType": "YulLiteral",
																				"src": "4010:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3995:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3995:3:13"
																		},
																		"nativeSrc": "3995:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3995:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3948:37:13",
																	"nodeType": "YulIdentifier",
																	"src": "3948:37:13"
																},
																"nativeSrc": "3948:65:13",
																"nodeType": "YulFunctionCall",
																"src": "3948:65:13"
															},
															"nativeSrc": "3948:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "3948:65:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3810:210:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3874:9:13",
														"nodeType": "YulTypedName",
														"src": "3874:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3886:6:13",
														"nodeType": "YulTypedName",
														"src": "3886:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3897:4:13",
														"nodeType": "YulTypedName",
														"src": "3897:4:13",
														"type": ""
													}
												],
												"src": "3810:210:13"
											},
											{
												"body": {
													"nativeSrc": "4126:519:13",
													"nodeType": "YulBlock",
													"src": "4126:519:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "4172:83:13",
																"nodeType": "YulBlock",
																"src": "4172:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4174:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "4174:77:13"
																			},
																			"nativeSrc": "4174:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4174:79:13"
																		},
																		"nativeSrc": "4174:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4174:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4147:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4147:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4156:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4156:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4143:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4143:3:13"
																		},
																		"nativeSrc": "4143:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4143:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4168:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4168:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4139:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4139:3:13"
																},
																"nativeSrc": "4139:32:13",
																"nodeType": "YulFunctionCall",
																"src": "4139:32:13"
															},
															"nativeSrc": "4136:119:13",
															"nodeType": "YulIf",
															"src": "4136:119:13"
														},
														{
															"nativeSrc": "4265:117:13",
															"nodeType": "YulBlock",
															"src": "4265:117:13",
															"statements": [
																{
																	"nativeSrc": "4280:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4280:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4294:1:13",
																		"nodeType": "YulLiteral",
																		"src": "4294:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4284:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4284:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4309:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4309:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4344:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4344:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4355:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4355:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4340:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4340:3:13"
																				},
																				"nativeSrc": "4340:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4340:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4364:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4364:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4319:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4319:20:13"
																		},
																		"nativeSrc": "4319:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4319:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4309:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4309:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4392:118:13",
															"nodeType": "YulBlock",
															"src": "4392:118:13",
															"statements": [
																{
																	"nativeSrc": "4407:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4407:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4421:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4421:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4411:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4411:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4437:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4437:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4472:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4472:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4483:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4483:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4468:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4468:3:13"
																				},
																				"nativeSrc": "4468:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4468:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4492:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4492:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4447:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4447:20:13"
																		},
																		"nativeSrc": "4447:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4447:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4437:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4437:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4520:118:13",
															"nodeType": "YulBlock",
															"src": "4520:118:13",
															"statements": [
																{
																	"nativeSrc": "4535:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4535:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4549:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4549:2:13",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4539:6:13",
																			"nodeType": "YulTypedName",
																			"src": "4539:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4565:63:13",
																	"nodeType": "YulAssignment",
																	"src": "4565:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4600:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "4600:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4611:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "4611:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4596:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "4596:3:13"
																				},
																				"nativeSrc": "4596:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4596:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4620:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "4620:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4575:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "4575:20:13"
																		},
																		"nativeSrc": "4575:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4575:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4565:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "4565:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "4026:619:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4080:9:13",
														"nodeType": "YulTypedName",
														"src": "4080:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4091:7:13",
														"nodeType": "YulTypedName",
														"src": "4091:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4103:6:13",
														"nodeType": "YulTypedName",
														"src": "4103:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4111:6:13",
														"nodeType": "YulTypedName",
														"src": "4111:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4119:6:13",
														"nodeType": "YulTypedName",
														"src": "4119:6:13",
														"type": ""
													}
												],
												"src": "4026:619:13"
											},
											{
												"body": {
													"nativeSrc": "4694:43:13",
													"nodeType": "YulBlock",
													"src": "4694:43:13",
													"statements": [
														{
															"nativeSrc": "4704:27:13",
															"nodeType": "YulAssignment",
															"src": "4704:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4719:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "4719:5:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4726:4:13",
																		"nodeType": "YulLiteral",
																		"src": "4726:4:13",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4715:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4715:3:13"
																},
																"nativeSrc": "4715:16:13",
																"nodeType": "YulFunctionCall",
																"src": "4715:16:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4704:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "4704:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4651:86:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4676:5:13",
														"nodeType": "YulTypedName",
														"src": "4676:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4686:7:13",
														"nodeType": "YulTypedName",
														"src": "4686:7:13",
														"type": ""
													}
												],
												"src": "4651:86:13"
											},
											{
												"body": {
													"nativeSrc": "4804:51:13",
													"nodeType": "YulBlock",
													"src": "4804:51:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4821:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "4821:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4842:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "4842:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4826:15:13",
																			"nodeType": "YulIdentifier",
																			"src": "4826:15:13"
																		},
																		"nativeSrc": "4826:22:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4826:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4814:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4814:6:13"
																},
																"nativeSrc": "4814:35:13",
																"nodeType": "YulFunctionCall",
																"src": "4814:35:13"
															},
															"nativeSrc": "4814:35:13",
															"nodeType": "YulExpressionStatement",
															"src": "4814:35:13"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4743:112:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4792:5:13",
														"nodeType": "YulTypedName",
														"src": "4792:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4799:3:13",
														"nodeType": "YulTypedName",
														"src": "4799:3:13",
														"type": ""
													}
												],
												"src": "4743:112:13"
											},
											{
												"body": {
													"nativeSrc": "4955:120:13",
													"nodeType": "YulBlock",
													"src": "4955:120:13",
													"statements": [
														{
															"nativeSrc": "4965:26:13",
															"nodeType": "YulAssignment",
															"src": "4965:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4977:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "4977:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4988:2:13",
																		"nodeType": "YulLiteral",
																		"src": "4988:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4973:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4973:3:13"
																},
																"nativeSrc": "4973:18:13",
																"nodeType": "YulFunctionCall",
																"src": "4973:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4965:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "4965:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5041:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5041:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5054:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5054:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5065:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5065:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5050:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5050:3:13"
																		},
																		"nativeSrc": "5050:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5050:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "5001:39:13",
																	"nodeType": "YulIdentifier",
																	"src": "5001:39:13"
																},
																"nativeSrc": "5001:67:13",
																"nodeType": "YulFunctionCall",
																"src": "5001:67:13"
															},
															"nativeSrc": "5001:67:13",
															"nodeType": "YulExpressionStatement",
															"src": "5001:67:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4861:214:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4927:9:13",
														"nodeType": "YulTypedName",
														"src": "4927:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4939:6:13",
														"nodeType": "YulTypedName",
														"src": "4939:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4950:4:13",
														"nodeType": "YulTypedName",
														"src": "4950:4:13",
														"type": ""
													}
												],
												"src": "4861:214:13"
											},
											{
												"body": {
													"nativeSrc": "5146:53:13",
													"nodeType": "YulBlock",
													"src": "5146:53:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5163:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "5163:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5186:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "5186:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5168:17:13",
																			"nodeType": "YulIdentifier",
																			"src": "5168:17:13"
																		},
																		"nativeSrc": "5168:24:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5168:24:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5156:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "5156:6:13"
																},
																"nativeSrc": "5156:37:13",
																"nodeType": "YulFunctionCall",
																"src": "5156:37:13"
															},
															"nativeSrc": "5156:37:13",
															"nodeType": "YulExpressionStatement",
															"src": "5156:37:13"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5081:118:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5134:5:13",
														"nodeType": "YulTypedName",
														"src": "5134:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5141:3:13",
														"nodeType": "YulTypedName",
														"src": "5141:3:13",
														"type": ""
													}
												],
												"src": "5081:118:13"
											},
											{
												"body": {
													"nativeSrc": "5303:124:13",
													"nodeType": "YulBlock",
													"src": "5303:124:13",
													"statements": [
														{
															"nativeSrc": "5313:26:13",
															"nodeType": "YulAssignment",
															"src": "5313:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5325:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "5325:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5336:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5336:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5321:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5321:3:13"
																},
																"nativeSrc": "5321:18:13",
																"nodeType": "YulFunctionCall",
																"src": "5321:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5313:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "5313:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5393:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "5393:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5406:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5406:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5417:1:13",
																				"nodeType": "YulLiteral",
																				"src": "5417:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5402:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5402:3:13"
																		},
																		"nativeSrc": "5402:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5402:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5349:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "5349:43:13"
																},
																"nativeSrc": "5349:71:13",
																"nodeType": "YulFunctionCall",
																"src": "5349:71:13"
															},
															"nativeSrc": "5349:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "5349:71:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5205:222:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5275:9:13",
														"nodeType": "YulTypedName",
														"src": "5275:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5287:6:13",
														"nodeType": "YulTypedName",
														"src": "5287:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5298:4:13",
														"nodeType": "YulTypedName",
														"src": "5298:4:13",
														"type": ""
													}
												],
												"src": "5205:222:13"
											},
											{
												"body": {
													"nativeSrc": "5499:263:13",
													"nodeType": "YulBlock",
													"src": "5499:263:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "5545:83:13",
																"nodeType": "YulBlock",
																"src": "5545:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5547:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "5547:77:13"
																			},
																			"nativeSrc": "5547:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5547:79:13"
																		},
																		"nativeSrc": "5547:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5547:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5520:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5520:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5529:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5529:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5516:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5516:3:13"
																		},
																		"nativeSrc": "5516:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5516:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5541:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5541:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5512:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5512:3:13"
																},
																"nativeSrc": "5512:32:13",
																"nodeType": "YulFunctionCall",
																"src": "5512:32:13"
															},
															"nativeSrc": "5509:119:13",
															"nodeType": "YulIf",
															"src": "5509:119:13"
														},
														{
															"nativeSrc": "5638:117:13",
															"nodeType": "YulBlock",
															"src": "5638:117:13",
															"statements": [
																{
																	"nativeSrc": "5653:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5653:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5667:1:13",
																		"nodeType": "YulLiteral",
																		"src": "5667:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5657:6:13",
																			"nodeType": "YulTypedName",
																			"src": "5657:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5682:63:13",
																	"nodeType": "YulAssignment",
																	"src": "5682:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5717:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "5717:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5728:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "5728:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5713:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "5713:3:13"
																				},
																				"nativeSrc": "5713:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "5713:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5737:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5737:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5692:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "5692:20:13"
																		},
																		"nativeSrc": "5692:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5692:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5682:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "5682:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "5433:329:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5469:9:13",
														"nodeType": "YulTypedName",
														"src": "5469:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5480:7:13",
														"nodeType": "YulTypedName",
														"src": "5480:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5492:6:13",
														"nodeType": "YulTypedName",
														"src": "5492:6:13",
														"type": ""
													}
												],
												"src": "5433:329:13"
											},
											{
												"body": {
													"nativeSrc": "5851:391:13",
													"nodeType": "YulBlock",
													"src": "5851:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "5897:83:13",
																"nodeType": "YulBlock",
																"src": "5897:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5899:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "5899:77:13"
																			},
																			"nativeSrc": "5899:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "5899:79:13"
																		},
																		"nativeSrc": "5899:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "5899:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5872:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "5872:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5881:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "5881:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5868:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "5868:3:13"
																		},
																		"nativeSrc": "5868:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "5868:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5893:2:13",
																		"nodeType": "YulLiteral",
																		"src": "5893:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5864:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "5864:3:13"
																},
																"nativeSrc": "5864:32:13",
																"nodeType": "YulFunctionCall",
																"src": "5864:32:13"
															},
															"nativeSrc": "5861:119:13",
															"nodeType": "YulIf",
															"src": "5861:119:13"
														},
														{
															"nativeSrc": "5990:117:13",
															"nodeType": "YulBlock",
															"src": "5990:117:13",
															"statements": [
																{
																	"nativeSrc": "6005:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6005:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6019:1:13",
																		"nodeType": "YulLiteral",
																		"src": "6019:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6009:6:13",
																			"nodeType": "YulTypedName",
																			"src": "6009:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6034:63:13",
																	"nodeType": "YulAssignment",
																	"src": "6034:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6069:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "6069:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6080:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6080:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6065:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "6065:3:13"
																				},
																				"nativeSrc": "6065:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "6065:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6089:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "6089:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "6044:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "6044:20:13"
																		},
																		"nativeSrc": "6044:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6044:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6034:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "6034:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "6117:118:13",
															"nodeType": "YulBlock",
															"src": "6117:118:13",
															"statements": [
																{
																	"nativeSrc": "6132:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6132:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6146:2:13",
																		"nodeType": "YulLiteral",
																		"src": "6146:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6136:6:13",
																			"nodeType": "YulTypedName",
																			"src": "6136:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6162:63:13",
																	"nodeType": "YulAssignment",
																	"src": "6162:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6197:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "6197:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6208:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "6208:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6193:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "6193:3:13"
																				},
																				"nativeSrc": "6193:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "6193:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6217:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "6217:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "6172:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "6172:20:13"
																		},
																		"nativeSrc": "6172:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6172:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "6162:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "6162:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nativeSrc": "5768:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5813:9:13",
														"nodeType": "YulTypedName",
														"src": "5813:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5824:7:13",
														"nodeType": "YulTypedName",
														"src": "5824:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5836:6:13",
														"nodeType": "YulTypedName",
														"src": "5836:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5844:6:13",
														"nodeType": "YulTypedName",
														"src": "5844:6:13",
														"type": ""
													}
												],
												"src": "5768:474:13"
											},
											{
												"body": {
													"nativeSrc": "6301:51:13",
													"nodeType": "YulBlock",
													"src": "6301:51:13",
													"statements": [
														{
															"nativeSrc": "6311:35:13",
															"nodeType": "YulAssignment",
															"src": "6311:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6340:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "6340:5:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "6322:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "6322:17:13"
																},
																"nativeSrc": "6322:24:13",
																"nodeType": "YulFunctionCall",
																"src": "6322:24:13"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "6311:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "6311:7:13"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address_payable",
												"nativeSrc": "6248:104:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6283:5:13",
														"nodeType": "YulTypedName",
														"src": "6283:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "6293:7:13",
														"nodeType": "YulTypedName",
														"src": "6293:7:13",
														"type": ""
													}
												],
												"src": "6248:104:13"
											},
											{
												"body": {
													"nativeSrc": "6439:61:13",
													"nodeType": "YulBlock",
													"src": "6439:61:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6456:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "6456:3:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6487:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "6487:5:13"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address_payable",
																			"nativeSrc": "6461:25:13",
																			"nodeType": "YulIdentifier",
																			"src": "6461:25:13"
																		},
																		"nativeSrc": "6461:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6461:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6449:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "6449:6:13"
																},
																"nativeSrc": "6449:45:13",
																"nodeType": "YulFunctionCall",
																"src": "6449:45:13"
															},
															"nativeSrc": "6449:45:13",
															"nodeType": "YulExpressionStatement",
															"src": "6449:45:13"
														}
													]
												},
												"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
												"nativeSrc": "6358:142:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6427:5:13",
														"nodeType": "YulTypedName",
														"src": "6427:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6434:3:13",
														"nodeType": "YulTypedName",
														"src": "6434:3:13",
														"type": ""
													}
												],
												"src": "6358:142:13"
											},
											{
												"body": {
													"nativeSrc": "6620:140:13",
													"nodeType": "YulBlock",
													"src": "6620:140:13",
													"statements": [
														{
															"nativeSrc": "6630:26:13",
															"nodeType": "YulAssignment",
															"src": "6630:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6642:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "6642:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6653:2:13",
																		"nodeType": "YulLiteral",
																		"src": "6653:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6638:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "6638:3:13"
																},
																"nativeSrc": "6638:18:13",
																"nodeType": "YulFunctionCall",
																"src": "6638:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6630:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "6630:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "6726:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "6726:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6739:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "6739:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6750:1:13",
																				"nodeType": "YulLiteral",
																				"src": "6750:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6735:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "6735:3:13"
																		},
																		"nativeSrc": "6735:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6735:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_payable_to_t_address_payable_fromStack",
																	"nativeSrc": "6666:59:13",
																	"nodeType": "YulIdentifier",
																	"src": "6666:59:13"
																},
																"nativeSrc": "6666:87:13",
																"nodeType": "YulFunctionCall",
																"src": "6666:87:13"
															},
															"nativeSrc": "6666:87:13",
															"nodeType": "YulExpressionStatement",
															"src": "6666:87:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
												"nativeSrc": "6506:254:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6592:9:13",
														"nodeType": "YulTypedName",
														"src": "6592:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6604:6:13",
														"nodeType": "YulTypedName",
														"src": "6604:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6615:4:13",
														"nodeType": "YulTypedName",
														"src": "6615:4:13",
														"type": ""
													}
												],
												"src": "6506:254:13"
											},
											{
												"body": {
													"nativeSrc": "6866:519:13",
													"nodeType": "YulBlock",
													"src": "6866:519:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "6912:83:13",
																"nodeType": "YulBlock",
																"src": "6912:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "6914:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "6914:77:13"
																			},
																			"nativeSrc": "6914:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "6914:79:13"
																		},
																		"nativeSrc": "6914:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "6914:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6887:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "6887:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6896:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "6896:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6883:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "6883:3:13"
																		},
																		"nativeSrc": "6883:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "6883:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6908:2:13",
																		"nodeType": "YulLiteral",
																		"src": "6908:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6879:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "6879:3:13"
																},
																"nativeSrc": "6879:32:13",
																"nodeType": "YulFunctionCall",
																"src": "6879:32:13"
															},
															"nativeSrc": "6876:119:13",
															"nodeType": "YulIf",
															"src": "6876:119:13"
														},
														{
															"nativeSrc": "7005:117:13",
															"nodeType": "YulBlock",
															"src": "7005:117:13",
															"statements": [
																{
																	"nativeSrc": "7020:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7020:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7034:1:13",
																		"nodeType": "YulLiteral",
																		"src": "7034:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7024:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7024:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7049:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7049:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7084:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7084:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7095:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7095:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7080:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7080:3:13"
																				},
																				"nativeSrc": "7080:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7080:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7104:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7104:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "7059:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7059:20:13"
																		},
																		"nativeSrc": "7059:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7059:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "7049:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7049:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7132:118:13",
															"nodeType": "YulBlock",
															"src": "7132:118:13",
															"statements": [
																{
																	"nativeSrc": "7147:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7147:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7161:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7161:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7151:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7151:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7177:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7177:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7212:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7212:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7223:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7223:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7208:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7208:3:13"
																				},
																				"nativeSrc": "7208:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7208:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7232:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7232:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7187:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7187:20:13"
																		},
																		"nativeSrc": "7187:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7187:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "7177:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7177:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7260:118:13",
															"nodeType": "YulBlock",
															"src": "7260:118:13",
															"statements": [
																{
																	"nativeSrc": "7275:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7275:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7289:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7289:2:13",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7279:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7279:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7305:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7305:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7340:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7340:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7351:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7351:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7336:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7336:3:13"
																				},
																				"nativeSrc": "7336:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7336:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7360:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7360:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7315:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7315:20:13"
																		},
																		"nativeSrc": "7315:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7315:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "7305:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7305:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_address",
												"nativeSrc": "6766:619:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6820:9:13",
														"nodeType": "YulTypedName",
														"src": "6820:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6831:7:13",
														"nodeType": "YulTypedName",
														"src": "6831:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6843:6:13",
														"nodeType": "YulTypedName",
														"src": "6843:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6851:6:13",
														"nodeType": "YulTypedName",
														"src": "6851:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6859:6:13",
														"nodeType": "YulTypedName",
														"src": "6859:6:13",
														"type": ""
													}
												],
												"src": "6766:619:13"
											},
											{
												"body": {
													"nativeSrc": "7474:391:13",
													"nodeType": "YulBlock",
													"src": "7474:391:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "7520:83:13",
																"nodeType": "YulBlock",
																"src": "7520:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7522:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "7522:77:13"
																			},
																			"nativeSrc": "7522:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "7522:79:13"
																		},
																		"nativeSrc": "7522:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "7522:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7495:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7495:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7504:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "7504:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7491:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "7491:3:13"
																		},
																		"nativeSrc": "7491:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7491:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7516:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7516:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7487:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "7487:3:13"
																},
																"nativeSrc": "7487:32:13",
																"nodeType": "YulFunctionCall",
																"src": "7487:32:13"
															},
															"nativeSrc": "7484:119:13",
															"nodeType": "YulIf",
															"src": "7484:119:13"
														},
														{
															"nativeSrc": "7613:117:13",
															"nodeType": "YulBlock",
															"src": "7613:117:13",
															"statements": [
																{
																	"nativeSrc": "7628:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7628:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7642:1:13",
																		"nodeType": "YulLiteral",
																		"src": "7642:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7632:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7632:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7657:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7657:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7692:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7692:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7703:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7703:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7688:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7688:3:13"
																				},
																				"nativeSrc": "7688:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7688:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7712:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7712:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7667:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7667:20:13"
																		},
																		"nativeSrc": "7667:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7667:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "7657:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7657:6:13"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7740:118:13",
															"nodeType": "YulBlock",
															"src": "7740:118:13",
															"statements": [
																{
																	"nativeSrc": "7755:16:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7755:16:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7769:2:13",
																		"nodeType": "YulLiteral",
																		"src": "7769:2:13",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7759:6:13",
																			"nodeType": "YulTypedName",
																			"src": "7759:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7785:63:13",
																	"nodeType": "YulAssignment",
																	"src": "7785:63:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7820:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "7820:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7831:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "7831:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7816:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "7816:3:13"
																				},
																				"nativeSrc": "7816:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "7816:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7840:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "7840:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7795:20:13",
																			"nodeType": "YulIdentifier",
																			"src": "7795:20:13"
																		},
																		"nativeSrc": "7795:53:13",
																		"nodeType": "YulFunctionCall",
																		"src": "7795:53:13"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "7785:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "7785:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "7391:474:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7436:9:13",
														"nodeType": "YulTypedName",
														"src": "7436:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7447:7:13",
														"nodeType": "YulTypedName",
														"src": "7447:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7459:6:13",
														"nodeType": "YulTypedName",
														"src": "7459:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7467:6:13",
														"nodeType": "YulTypedName",
														"src": "7467:6:13",
														"type": ""
													}
												],
												"src": "7391:474:13"
											},
											{
												"body": {
													"nativeSrc": "7934:80:13",
													"nodeType": "YulBlock",
													"src": "7934:80:13",
													"statements": [
														{
															"nativeSrc": "7944:22:13",
															"nodeType": "YulAssignment",
															"src": "7944:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7959:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "7959:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7953:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7953:5:13"
																},
																"nativeSrc": "7953:13:13",
																"nodeType": "YulFunctionCall",
																"src": "7953:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7944:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "7944:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8002:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "8002:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "7975:26:13",
																	"nodeType": "YulIdentifier",
																	"src": "7975:26:13"
																},
																"nativeSrc": "7975:33:13",
																"nodeType": "YulFunctionCall",
																"src": "7975:33:13"
															},
															"nativeSrc": "7975:33:13",
															"nodeType": "YulExpressionStatement",
															"src": "7975:33:13"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "7871:143:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7912:6:13",
														"nodeType": "YulTypedName",
														"src": "7912:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7920:3:13",
														"nodeType": "YulTypedName",
														"src": "7920:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7928:5:13",
														"nodeType": "YulTypedName",
														"src": "7928:5:13",
														"type": ""
													}
												],
												"src": "7871:143:13"
											},
											{
												"body": {
													"nativeSrc": "8097:274:13",
													"nodeType": "YulBlock",
													"src": "8097:274:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "8143:83:13",
																"nodeType": "YulBlock",
																"src": "8143:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "8145:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "8145:77:13"
																			},
																			"nativeSrc": "8145:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "8145:79:13"
																		},
																		"nativeSrc": "8145:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "8145:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8118:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8118:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8127:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "8127:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8114:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "8114:3:13"
																		},
																		"nativeSrc": "8114:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8114:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8139:2:13",
																		"nodeType": "YulLiteral",
																		"src": "8139:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "8110:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8110:3:13"
																},
																"nativeSrc": "8110:32:13",
																"nodeType": "YulFunctionCall",
																"src": "8110:32:13"
															},
															"nativeSrc": "8107:119:13",
															"nodeType": "YulIf",
															"src": "8107:119:13"
														},
														{
															"nativeSrc": "8236:128:13",
															"nodeType": "YulBlock",
															"src": "8236:128:13",
															"statements": [
																{
																	"nativeSrc": "8251:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8251:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8265:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8265:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8255:6:13",
																			"nodeType": "YulTypedName",
																			"src": "8255:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8280:74:13",
																	"nodeType": "YulAssignment",
																	"src": "8280:74:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8326:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "8326:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8337:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "8337:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8322:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "8322:3:13"
																				},
																				"nativeSrc": "8322:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "8322:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8346:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "8346:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "8290:31:13",
																			"nodeType": "YulIdentifier",
																			"src": "8290:31:13"
																		},
																		"nativeSrc": "8290:64:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8290:64:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8280:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "8280:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "8020:351:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8067:9:13",
														"nodeType": "YulTypedName",
														"src": "8067:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "8078:7:13",
														"nodeType": "YulTypedName",
														"src": "8078:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "8090:6:13",
														"nodeType": "YulTypedName",
														"src": "8090:6:13",
														"type": ""
													}
												],
												"src": "8020:351:13"
											},
											{
												"body": {
													"nativeSrc": "8405:152:13",
													"nodeType": "YulBlock",
													"src": "8405:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8422:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8422:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8425:77:13",
																		"nodeType": "YulLiteral",
																		"src": "8425:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8415:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8415:6:13"
																},
																"nativeSrc": "8415:88:13",
																"nodeType": "YulFunctionCall",
																"src": "8415:88:13"
															},
															"nativeSrc": "8415:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "8415:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8519:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8519:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8522:4:13",
																		"nodeType": "YulLiteral",
																		"src": "8522:4:13",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8512:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8512:6:13"
																},
																"nativeSrc": "8512:15:13",
																"nodeType": "YulFunctionCall",
																"src": "8512:15:13"
															},
															"nativeSrc": "8512:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "8512:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8543:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8543:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8546:4:13",
																		"nodeType": "YulLiteral",
																		"src": "8546:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8536:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8536:6:13"
																},
																"nativeSrc": "8536:15:13",
																"nodeType": "YulFunctionCall",
																"src": "8536:15:13"
															},
															"nativeSrc": "8536:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "8536:15:13"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "8377:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "8377:180:13"
											},
											{
												"body": {
													"nativeSrc": "8614:269:13",
													"nodeType": "YulBlock",
													"src": "8614:269:13",
													"statements": [
														{
															"nativeSrc": "8624:22:13",
															"nodeType": "YulAssignment",
															"src": "8624:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "8638:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "8638:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8644:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8644:1:13",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "8634:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8634:3:13"
																},
																"nativeSrc": "8634:12:13",
																"nodeType": "YulFunctionCall",
																"src": "8634:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "8624:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8624:6:13"
																}
															]
														},
														{
															"nativeSrc": "8655:38:13",
															"nodeType": "YulVariableDeclaration",
															"src": "8655:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "8685:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "8685:4:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8691:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8691:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "8681:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "8681:3:13"
																},
																"nativeSrc": "8681:12:13",
																"nodeType": "YulFunctionCall",
																"src": "8681:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "8659:18:13",
																	"nodeType": "YulTypedName",
																	"src": "8659:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8732:51:13",
																"nodeType": "YulBlock",
																"src": "8732:51:13",
																"statements": [
																	{
																		"nativeSrc": "8746:27:13",
																		"nodeType": "YulAssignment",
																		"src": "8746:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "8760:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "8760:6:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8768:4:13",
																					"nodeType": "YulLiteral",
																					"src": "8768:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "8756:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "8756:3:13"
																			},
																			"nativeSrc": "8756:17:13",
																			"nodeType": "YulFunctionCall",
																			"src": "8756:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "8746:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "8746:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "8712:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "8712:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8705:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8705:6:13"
																},
																"nativeSrc": "8705:26:13",
																"nodeType": "YulFunctionCall",
																"src": "8705:26:13"
															},
															"nativeSrc": "8702:81:13",
															"nodeType": "YulIf",
															"src": "8702:81:13"
														},
														{
															"body": {
																"nativeSrc": "8835:42:13",
																"nodeType": "YulBlock",
																"src": "8835:42:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "8849:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "8849:16:13"
																			},
																			"nativeSrc": "8849:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "8849:18:13"
																		},
																		"nativeSrc": "8849:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "8849:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "8799:18:13",
																		"nodeType": "YulIdentifier",
																		"src": "8799:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "8822:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "8822:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8830:2:13",
																				"nodeType": "YulLiteral",
																				"src": "8830:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "8819:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "8819:2:13"
																		},
																		"nativeSrc": "8819:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "8819:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "8796:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "8796:2:13"
																},
																"nativeSrc": "8796:38:13",
																"nodeType": "YulFunctionCall",
																"src": "8796:38:13"
															},
															"nativeSrc": "8793:84:13",
															"nodeType": "YulIf",
															"src": "8793:84:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "8563:320:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "8598:4:13",
														"nodeType": "YulTypedName",
														"src": "8598:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "8607:6:13",
														"nodeType": "YulTypedName",
														"src": "8607:6:13",
														"type": ""
													}
												],
												"src": "8563:320:13"
											},
											{
												"body": {
													"nativeSrc": "8917:152:13",
													"nodeType": "YulBlock",
													"src": "8917:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8934:1:13",
																		"nodeType": "YulLiteral",
																		"src": "8934:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8937:77:13",
																		"nodeType": "YulLiteral",
																		"src": "8937:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8927:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "8927:6:13"
																},
																"nativeSrc": "8927:88:13",
																"nodeType": "YulFunctionCall",
																"src": "8927:88:13"
															},
															"nativeSrc": "8927:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "8927:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9031:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9031:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9034:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9034:4:13",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9024:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9024:6:13"
																},
																"nativeSrc": "9024:15:13",
																"nodeType": "YulFunctionCall",
																"src": "9024:15:13"
															},
															"nativeSrc": "9024:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "9024:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9055:1:13",
																		"nodeType": "YulLiteral",
																		"src": "9055:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9058:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9058:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "9048:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "9048:6:13"
																},
																"nativeSrc": "9048:15:13",
																"nodeType": "YulFunctionCall",
																"src": "9048:15:13"
															},
															"nativeSrc": "9048:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "9048:15:13"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "8889:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "8889:180:13"
											},
											{
												"body": {
													"nativeSrc": "9119:147:13",
													"nodeType": "YulBlock",
													"src": "9119:147:13",
													"statements": [
														{
															"nativeSrc": "9129:25:13",
															"nodeType": "YulAssignment",
															"src": "9129:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9152:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9152:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9134:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "9134:17:13"
																},
																"nativeSrc": "9134:20:13",
																"nodeType": "YulFunctionCall",
																"src": "9134:20:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "9129:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9129:1:13"
																}
															]
														},
														{
															"nativeSrc": "9163:25:13",
															"nodeType": "YulAssignment",
															"src": "9163:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "9186:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9186:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9168:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "9168:17:13"
																},
																"nativeSrc": "9168:20:13",
																"nodeType": "YulFunctionCall",
																"src": "9168:20:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "9163:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9163:1:13"
																}
															]
														},
														{
															"nativeSrc": "9197:16:13",
															"nodeType": "YulAssignment",
															"src": "9197:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9208:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9208:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "9211:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9211:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9204:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9204:3:13"
																},
																"nativeSrc": "9204:9:13",
																"nodeType": "YulFunctionCall",
																"src": "9204:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "9197:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9197:3:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9237:22:13",
																"nodeType": "YulBlock",
																"src": "9237:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9239:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "9239:16:13"
																			},
																			"nativeSrc": "9239:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9239:18:13"
																		},
																		"nativeSrc": "9239:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "9239:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9229:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9229:1:13"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "9232:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "9232:3:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9226:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "9226:2:13"
																},
																"nativeSrc": "9226:10:13",
																"nodeType": "YulFunctionCall",
																"src": "9226:10:13"
															},
															"nativeSrc": "9223:36:13",
															"nodeType": "YulIf",
															"src": "9223:36:13"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "9075:191:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "9106:1:13",
														"nodeType": "YulTypedName",
														"src": "9106:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "9109:1:13",
														"nodeType": "YulTypedName",
														"src": "9109:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "9115:3:13",
														"nodeType": "YulTypedName",
														"src": "9115:3:13",
														"type": ""
													}
												],
												"src": "9075:191:13"
											},
											{
												"body": {
													"nativeSrc": "9314:146:13",
													"nodeType": "YulBlock",
													"src": "9314:146:13",
													"statements": [
														{
															"nativeSrc": "9324:23:13",
															"nodeType": "YulAssignment",
															"src": "9324:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9345:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9345:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "9329:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "9329:15:13"
																},
																"nativeSrc": "9329:18:13",
																"nodeType": "YulFunctionCall",
																"src": "9329:18:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "9324:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9324:1:13"
																}
															]
														},
														{
															"nativeSrc": "9356:23:13",
															"nodeType": "YulAssignment",
															"src": "9356:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "9377:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9377:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "9361:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "9361:15:13"
																},
																"nativeSrc": "9361:18:13",
																"nodeType": "YulFunctionCall",
																"src": "9361:18:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "9356:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9356:1:13"
																}
															]
														},
														{
															"nativeSrc": "9388:16:13",
															"nodeType": "YulAssignment",
															"src": "9388:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9399:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9399:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "9402:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9402:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9395:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9395:3:13"
																},
																"nativeSrc": "9395:9:13",
																"nodeType": "YulFunctionCall",
																"src": "9395:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "9388:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9388:3:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9431:22:13",
																"nodeType": "YulBlock",
																"src": "9431:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9433:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "9433:16:13"
																			},
																			"nativeSrc": "9433:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9433:18:13"
																		},
																		"nativeSrc": "9433:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "9433:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nativeSrc": "9420:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "9420:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9425:4:13",
																		"nodeType": "YulLiteral",
																		"src": "9425:4:13",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9417:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "9417:2:13"
																},
																"nativeSrc": "9417:13:13",
																"nodeType": "YulFunctionCall",
																"src": "9417:13:13"
															},
															"nativeSrc": "9414:39:13",
															"nodeType": "YulIf",
															"src": "9414:39:13"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nativeSrc": "9272:188:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "9301:1:13",
														"nodeType": "YulTypedName",
														"src": "9301:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "9304:1:13",
														"nodeType": "YulTypedName",
														"src": "9304:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "9310:3:13",
														"nodeType": "YulTypedName",
														"src": "9310:3:13",
														"type": ""
													}
												],
												"src": "9272:188:13"
											},
											{
												"body": {
													"nativeSrc": "9511:149:13",
													"nodeType": "YulBlock",
													"src": "9511:149:13",
													"statements": [
														{
															"nativeSrc": "9521:25:13",
															"nodeType": "YulAssignment",
															"src": "9521:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9544:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9544:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9526:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "9526:17:13"
																},
																"nativeSrc": "9526:20:13",
																"nodeType": "YulFunctionCall",
																"src": "9526:20:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "9521:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9521:1:13"
																}
															]
														},
														{
															"nativeSrc": "9555:25:13",
															"nodeType": "YulAssignment",
															"src": "9555:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "9578:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9578:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9560:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "9560:17:13"
																},
																"nativeSrc": "9560:20:13",
																"nodeType": "YulFunctionCall",
																"src": "9560:20:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "9555:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "9555:1:13"
																}
															]
														},
														{
															"nativeSrc": "9589:17:13",
															"nodeType": "YulAssignment",
															"src": "9589:17:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9601:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9601:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "9604:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9604:1:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "9597:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9597:3:13"
																},
																"nativeSrc": "9597:9:13",
																"nodeType": "YulFunctionCall",
																"src": "9597:9:13"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "9589:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "9589:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9631:22:13",
																"nodeType": "YulBlock",
																"src": "9631:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9633:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "9633:16:13"
																			},
																			"nativeSrc": "9633:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "9633:18:13"
																		},
																		"nativeSrc": "9633:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "9633:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "9622:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "9622:4:13"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "9628:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "9628:1:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9619:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "9619:2:13"
																},
																"nativeSrc": "9619:11:13",
																"nodeType": "YulFunctionCall",
																"src": "9619:11:13"
															},
															"nativeSrc": "9616:37:13",
															"nodeType": "YulIf",
															"src": "9616:37:13"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "9466:194:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "9497:1:13",
														"nodeType": "YulTypedName",
														"src": "9497:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "9500:1:13",
														"nodeType": "YulTypedName",
														"src": "9500:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "9506:4:13",
														"nodeType": "YulTypedName",
														"src": "9506:4:13",
														"type": ""
													}
												],
												"src": "9466:194:13"
											},
											{
												"body": {
													"nativeSrc": "9820:288:13",
													"nodeType": "YulBlock",
													"src": "9820:288:13",
													"statements": [
														{
															"nativeSrc": "9830:26:13",
															"nodeType": "YulAssignment",
															"src": "9830:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9842:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "9842:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9853:2:13",
																		"nodeType": "YulLiteral",
																		"src": "9853:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9838:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "9838:3:13"
																},
																"nativeSrc": "9838:18:13",
																"nodeType": "YulFunctionCall",
																"src": "9838:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9830:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "9830:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9910:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "9910:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9923:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "9923:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9934:1:13",
																				"nodeType": "YulLiteral",
																				"src": "9934:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9919:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "9919:3:13"
																		},
																		"nativeSrc": "9919:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "9919:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9866:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "9866:43:13"
																},
																"nativeSrc": "9866:71:13",
																"nodeType": "YulFunctionCall",
																"src": "9866:71:13"
															},
															"nativeSrc": "9866:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "9866:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "9991:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "9991:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10004:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "10004:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10015:2:13",
																				"nodeType": "YulLiteral",
																				"src": "10015:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10000:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "10000:3:13"
																		},
																		"nativeSrc": "10000:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "10000:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "9947:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "9947:43:13"
																},
																"nativeSrc": "9947:72:13",
																"nodeType": "YulFunctionCall",
																"src": "9947:72:13"
															},
															"nativeSrc": "9947:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "9947:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "10073:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "10073:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10086:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "10086:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10097:2:13",
																				"nodeType": "YulLiteral",
																				"src": "10097:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10082:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "10082:3:13"
																		},
																		"nativeSrc": "10082:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "10082:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "10029:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "10029:43:13"
																},
																"nativeSrc": "10029:72:13",
																"nodeType": "YulFunctionCall",
																"src": "10029:72:13"
															},
															"nativeSrc": "10029:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "10029:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "9666:442:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9776:9:13",
														"nodeType": "YulTypedName",
														"src": "9776:9:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9788:6:13",
														"nodeType": "YulTypedName",
														"src": "9788:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9796:6:13",
														"nodeType": "YulTypedName",
														"src": "9796:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9804:6:13",
														"nodeType": "YulTypedName",
														"src": "9804:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9815:4:13",
														"nodeType": "YulTypedName",
														"src": "9815:4:13",
														"type": ""
													}
												],
												"src": "9666:442:13"
											},
											{
												"body": {
													"nativeSrc": "10165:51:13",
													"nodeType": "YulBlock",
													"src": "10165:51:13",
													"statements": [
														{
															"nativeSrc": "10175:34:13",
															"nodeType": "YulAssignment",
															"src": "10175:34:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10200:1:13",
																		"nodeType": "YulLiteral",
																		"src": "10200:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "10203:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "10203:5:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "10196:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "10196:3:13"
																},
																"nativeSrc": "10196:13:13",
																"nodeType": "YulFunctionCall",
																"src": "10196:13:13"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "10175:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "10175:8:13"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nativeSrc": "10114:102:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "10146:5:13",
														"nodeType": "YulTypedName",
														"src": "10146:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "10156:8:13",
														"nodeType": "YulTypedName",
														"src": "10156:8:13",
														"type": ""
													}
												],
												"src": "10114:102:13"
											},
											{
												"body": {
													"nativeSrc": "10295:775:13",
													"nodeType": "YulBlock",
													"src": "10295:775:13",
													"statements": [
														{
															"nativeSrc": "10305:15:13",
															"nodeType": "YulAssignment",
															"src": "10305:15:13",
															"value": {
																"name": "_power",
																"nativeSrc": "10314:6:13",
																"nodeType": "YulIdentifier",
																"src": "10314:6:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "10305:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "10305:5:13"
																}
															]
														},
														{
															"nativeSrc": "10329:14:13",
															"nodeType": "YulAssignment",
															"src": "10329:14:13",
															"value": {
																"name": "_base",
																"nativeSrc": "10338:5:13",
																"nodeType": "YulIdentifier",
																"src": "10338:5:13"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "10329:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "10329:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "10387:677:13",
																"nodeType": "YulBlock",
																"src": "10387:677:13",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "10475:22:13",
																			"nodeType": "YulBlock",
																			"src": "10475:22:13",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "10477:16:13",
																							"nodeType": "YulIdentifier",
																							"src": "10477:16:13"
																						},
																						"nativeSrc": "10477:18:13",
																						"nodeType": "YulFunctionCall",
																						"src": "10477:18:13"
																					},
																					"nativeSrc": "10477:18:13",
																					"nodeType": "YulExpressionStatement",
																					"src": "10477:18:13"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "10453:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "10453:4:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "10463:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "10463:3:13"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "10468:4:13",
																							"nodeType": "YulIdentifier",
																							"src": "10468:4:13"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "10459:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "10459:3:13"
																					},
																					"nativeSrc": "10459:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "10459:14:13"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "10450:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "10450:2:13"
																			},
																			"nativeSrc": "10450:24:13",
																			"nodeType": "YulFunctionCall",
																			"src": "10450:24:13"
																		},
																		"nativeSrc": "10447:50:13",
																		"nodeType": "YulIf",
																		"src": "10447:50:13"
																	},
																	{
																		"body": {
																			"nativeSrc": "10542:419:13",
																			"nodeType": "YulBlock",
																			"src": "10542:419:13",
																			"statements": [
																				{
																					"nativeSrc": "10922:25:13",
																					"nodeType": "YulAssignment",
																					"src": "10922:25:13",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "10935:5:13",
																								"nodeType": "YulIdentifier",
																								"src": "10935:5:13"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "10942:4:13",
																								"nodeType": "YulIdentifier",
																								"src": "10942:4:13"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "10931:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "10931:3:13"
																						},
																						"nativeSrc": "10931:16:13",
																						"nodeType": "YulFunctionCall",
																						"src": "10931:16:13"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "10922:5:13",
																							"nodeType": "YulIdentifier",
																							"src": "10922:5:13"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "10517:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "10517:8:13"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "10527:1:13",
																					"nodeType": "YulLiteral",
																					"src": "10527:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "10513:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "10513:3:13"
																			},
																			"nativeSrc": "10513:16:13",
																			"nodeType": "YulFunctionCall",
																			"src": "10513:16:13"
																		},
																		"nativeSrc": "10510:451:13",
																		"nodeType": "YulIf",
																		"src": "10510:451:13"
																	},
																	{
																		"nativeSrc": "10974:23:13",
																		"nodeType": "YulAssignment",
																		"src": "10974:23:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "10986:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "10986:4:13"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "10992:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "10992:4:13"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "10982:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "10982:3:13"
																			},
																			"nativeSrc": "10982:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "10982:15:13"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "10974:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "10974:4:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "11010:44:13",
																		"nodeType": "YulAssignment",
																		"src": "11010:44:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "11045:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "11045:8:13"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nativeSrc": "11022:22:13",
																				"nodeType": "YulIdentifier",
																				"src": "11022:22:13"
																			},
																			"nativeSrc": "11022:32:13",
																			"nodeType": "YulFunctionCall",
																			"src": "11022:32:13"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "11010:8:13",
																				"nodeType": "YulIdentifier",
																				"src": "11010:8:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "10363:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "10363:8:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10373:1:13",
																		"nodeType": "YulLiteral",
																		"src": "10373:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "10360:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "10360:2:13"
																},
																"nativeSrc": "10360:15:13",
																"nodeType": "YulFunctionCall",
																"src": "10360:15:13"
															},
															"nativeSrc": "10352:712:13",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "10376:2:13",
																"nodeType": "YulBlock",
																"src": "10376:2:13",
																"statements": []
															},
															"pre": {
																"nativeSrc": "10356:3:13",
																"nodeType": "YulBlock",
																"src": "10356:3:13",
																"statements": []
															},
															"src": "10352:712:13"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "10222:848:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nativeSrc": "10250:6:13",
														"nodeType": "YulTypedName",
														"src": "10250:6:13",
														"type": ""
													},
													{
														"name": "_base",
														"nativeSrc": "10258:5:13",
														"nodeType": "YulTypedName",
														"src": "10258:5:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "10265:8:13",
														"nodeType": "YulTypedName",
														"src": "10265:8:13",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "10275:3:13",
														"nodeType": "YulTypedName",
														"src": "10275:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "10283:5:13",
														"nodeType": "YulTypedName",
														"src": "10283:5:13",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "10290:4:13",
														"nodeType": "YulTypedName",
														"src": "10290:4:13",
														"type": ""
													}
												],
												"src": "10222:848:13"
											},
											{
												"body": {
													"nativeSrc": "11136:1013:13",
													"nodeType": "YulBlock",
													"src": "11136:1013:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "11331:20:13",
																"nodeType": "YulBlock",
																"src": "11331:20:13",
																"statements": [
																	{
																		"nativeSrc": "11333:10:13",
																		"nodeType": "YulAssignment",
																		"src": "11333:10:13",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "11342:1:13",
																			"nodeType": "YulLiteral",
																			"src": "11342:1:13",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "11333:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "11333:5:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "11344:5:13",
																		"nodeType": "YulLeave",
																		"src": "11344:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "11321:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "11321:8:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11314:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "11314:6:13"
																},
																"nativeSrc": "11314:16:13",
																"nodeType": "YulFunctionCall",
																"src": "11314:16:13"
															},
															"nativeSrc": "11311:40:13",
															"nodeType": "YulIf",
															"src": "11311:40:13"
														},
														{
															"body": {
																"nativeSrc": "11376:20:13",
																"nodeType": "YulBlock",
																"src": "11376:20:13",
																"statements": [
																	{
																		"nativeSrc": "11378:10:13",
																		"nodeType": "YulAssignment",
																		"src": "11378:10:13",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "11387:1:13",
																			"nodeType": "YulLiteral",
																			"src": "11387:1:13",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "11378:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "11378:5:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "11389:5:13",
																		"nodeType": "YulLeave",
																		"src": "11389:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "11370:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "11370:4:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11363:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "11363:6:13"
																},
																"nativeSrc": "11363:12:13",
																"nodeType": "YulFunctionCall",
																"src": "11363:12:13"
															},
															"nativeSrc": "11360:36:13",
															"nodeType": "YulIf",
															"src": "11360:36:13"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "11506:20:13",
																		"nodeType": "YulBlock",
																		"src": "11506:20:13",
																		"statements": [
																			{
																				"nativeSrc": "11508:10:13",
																				"nodeType": "YulAssignment",
																				"src": "11508:10:13",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "11517:1:13",
																					"nodeType": "YulLiteral",
																					"src": "11517:1:13",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "11508:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "11508:5:13"
																					}
																				]
																			},
																			{
																				"nativeSrc": "11519:5:13",
																				"nodeType": "YulLeave",
																				"src": "11519:5:13"
																			}
																		]
																	},
																	"nativeSrc": "11499:27:13",
																	"nodeType": "YulCase",
																	"src": "11499:27:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11504:1:13",
																		"nodeType": "YulLiteral",
																		"src": "11504:1:13",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "11550:176:13",
																		"nodeType": "YulBlock",
																		"src": "11550:176:13",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "11585:22:13",
																					"nodeType": "YulBlock",
																					"src": "11585:22:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "11587:16:13",
																									"nodeType": "YulIdentifier",
																									"src": "11587:16:13"
																								},
																								"nativeSrc": "11587:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "11587:18:13"
																							},
																							"nativeSrc": "11587:18:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "11587:18:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "11570:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "11570:8:13"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "11580:3:13",
																							"nodeType": "YulLiteral",
																							"src": "11580:3:13",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "11567:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "11567:2:13"
																					},
																					"nativeSrc": "11567:17:13",
																					"nodeType": "YulFunctionCall",
																					"src": "11567:17:13"
																				},
																				"nativeSrc": "11564:43:13",
																				"nodeType": "YulIf",
																				"src": "11564:43:13"
																			},
																			{
																				"nativeSrc": "11620:25:13",
																				"nodeType": "YulAssignment",
																				"src": "11620:25:13",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "11633:1:13",
																							"nodeType": "YulLiteral",
																							"src": "11633:1:13",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nativeSrc": "11636:8:13",
																							"nodeType": "YulIdentifier",
																							"src": "11636:8:13"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nativeSrc": "11629:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "11629:3:13"
																					},
																					"nativeSrc": "11629:16:13",
																					"nodeType": "YulFunctionCall",
																					"src": "11629:16:13"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "11620:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "11620:5:13"
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "11676:22:13",
																					"nodeType": "YulBlock",
																					"src": "11676:22:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "11678:16:13",
																									"nodeType": "YulIdentifier",
																									"src": "11678:16:13"
																								},
																								"nativeSrc": "11678:18:13",
																								"nodeType": "YulFunctionCall",
																								"src": "11678:18:13"
																							},
																							"nativeSrc": "11678:18:13",
																							"nodeType": "YulExpressionStatement",
																							"src": "11678:18:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nativeSrc": "11664:5:13",
																							"nodeType": "YulIdentifier",
																							"src": "11664:5:13"
																						},
																						{
																							"name": "max",
																							"nativeSrc": "11671:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "11671:3:13"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "11661:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "11661:2:13"
																					},
																					"nativeSrc": "11661:14:13",
																					"nodeType": "YulFunctionCall",
																					"src": "11661:14:13"
																				},
																				"nativeSrc": "11658:40:13",
																				"nodeType": "YulIf",
																				"src": "11658:40:13"
																			},
																			{
																				"nativeSrc": "11711:5:13",
																				"nodeType": "YulLeave",
																				"src": "11711:5:13"
																			}
																		]
																	},
																	"nativeSrc": "11535:191:13",
																	"nodeType": "YulCase",
																	"src": "11535:191:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11540:1:13",
																		"nodeType": "YulLiteral",
																		"src": "11540:1:13",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "11456:4:13",
																"nodeType": "YulIdentifier",
																"src": "11456:4:13"
															},
															"nativeSrc": "11449:277:13",
															"nodeType": "YulSwitch",
															"src": "11449:277:13"
														},
														{
															"body": {
																"nativeSrc": "11858:123:13",
																"nodeType": "YulBlock",
																"src": "11858:123:13",
																"statements": [
																	{
																		"nativeSrc": "11872:28:13",
																		"nodeType": "YulAssignment",
																		"src": "11872:28:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "11885:4:13",
																					"nodeType": "YulIdentifier",
																					"src": "11885:4:13"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "11891:8:13",
																					"nodeType": "YulIdentifier",
																					"src": "11891:8:13"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "11881:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "11881:3:13"
																			},
																			"nativeSrc": "11881:19:13",
																			"nodeType": "YulFunctionCall",
																			"src": "11881:19:13"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "11872:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "11872:5:13"
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "11931:22:13",
																			"nodeType": "YulBlock",
																			"src": "11931:22:13",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "11933:16:13",
																							"nodeType": "YulIdentifier",
																							"src": "11933:16:13"
																						},
																						"nativeSrc": "11933:18:13",
																						"nodeType": "YulFunctionCall",
																						"src": "11933:18:13"
																					},
																					"nativeSrc": "11933:18:13",
																					"nodeType": "YulExpressionStatement",
																					"src": "11933:18:13"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nativeSrc": "11919:5:13",
																					"nodeType": "YulIdentifier",
																					"src": "11919:5:13"
																				},
																				{
																					"name": "max",
																					"nativeSrc": "11926:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "11926:3:13"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "11916:2:13",
																				"nodeType": "YulIdentifier",
																				"src": "11916:2:13"
																			},
																			"nativeSrc": "11916:14:13",
																			"nodeType": "YulFunctionCall",
																			"src": "11916:14:13"
																		},
																		"nativeSrc": "11913:40:13",
																		"nodeType": "YulIf",
																		"src": "11913:40:13"
																	},
																	{
																		"nativeSrc": "11966:5:13",
																		"nodeType": "YulLeave",
																		"src": "11966:5:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "11761:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "11761:4:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "11767:2:13",
																						"nodeType": "YulLiteral",
																						"src": "11767:2:13",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "11758:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "11758:2:13"
																				},
																				"nativeSrc": "11758:12:13",
																				"nodeType": "YulFunctionCall",
																				"src": "11758:12:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "11775:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "11775:8:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "11785:2:13",
																						"nodeType": "YulLiteral",
																						"src": "11785:2:13",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "11772:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "11772:2:13"
																				},
																				"nativeSrc": "11772:16:13",
																				"nodeType": "YulFunctionCall",
																				"src": "11772:16:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "11754:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11754:3:13"
																		},
																		"nativeSrc": "11754:35:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11754:35:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "11810:4:13",
																						"nodeType": "YulIdentifier",
																						"src": "11810:4:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "11816:3:13",
																						"nodeType": "YulLiteral",
																						"src": "11816:3:13",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "11807:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "11807:2:13"
																				},
																				"nativeSrc": "11807:13:13",
																				"nodeType": "YulFunctionCall",
																				"src": "11807:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "11825:8:13",
																						"nodeType": "YulIdentifier",
																						"src": "11825:8:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "11835:2:13",
																						"nodeType": "YulLiteral",
																						"src": "11835:2:13",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "11822:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "11822:2:13"
																				},
																				"nativeSrc": "11822:16:13",
																				"nodeType": "YulFunctionCall",
																				"src": "11822:16:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "11803:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "11803:3:13"
																		},
																		"nativeSrc": "11803:36:13",
																		"nodeType": "YulFunctionCall",
																		"src": "11803:36:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "11738:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "11738:2:13"
																},
																"nativeSrc": "11738:111:13",
																"nodeType": "YulFunctionCall",
																"src": "11738:111:13"
															},
															"nativeSrc": "11735:246:13",
															"nodeType": "YulIf",
															"src": "11735:246:13"
														},
														{
															"nativeSrc": "11991:57:13",
															"nodeType": "YulAssignment",
															"src": "11991:57:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12025:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12025:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "12028:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "12028:4:13"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "12034:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "12034:8:13"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "12044:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "12044:3:13"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "12006:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "12006:18:13"
																},
																"nativeSrc": "12006:42:13",
																"nodeType": "YulFunctionCall",
																"src": "12006:42:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "11991:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "11991:5:13"
																},
																{
																	"name": "base",
																	"nativeSrc": "11998:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "11998:4:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12087:22:13",
																"nodeType": "YulBlock",
																"src": "12087:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "12089:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "12089:16:13"
																			},
																			"nativeSrc": "12089:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "12089:18:13"
																		},
																		"nativeSrc": "12089:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "12089:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "12064:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "12064:5:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nativeSrc": "12075:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "12075:3:13"
																			},
																			{
																				"name": "base",
																				"nativeSrc": "12080:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "12080:4:13"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "12071:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "12071:3:13"
																		},
																		"nativeSrc": "12071:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "12071:14:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "12061:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "12061:2:13"
																},
																"nativeSrc": "12061:25:13",
																"nodeType": "YulFunctionCall",
																"src": "12061:25:13"
															},
															"nativeSrc": "12058:51:13",
															"nodeType": "YulIf",
															"src": "12058:51:13"
														},
														{
															"nativeSrc": "12118:25:13",
															"nodeType": "YulAssignment",
															"src": "12118:25:13",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "12131:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "12131:5:13"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "12138:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "12138:4:13"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "12127:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "12127:3:13"
																},
																"nativeSrc": "12127:16:13",
																"nodeType": "YulFunctionCall",
																"src": "12127:16:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "12118:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "12118:5:13"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "11076:1073:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "11106:4:13",
														"nodeType": "YulTypedName",
														"src": "11106:4:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "11112:8:13",
														"nodeType": "YulTypedName",
														"src": "11112:8:13",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "11122:3:13",
														"nodeType": "YulTypedName",
														"src": "11122:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "11130:5:13",
														"nodeType": "YulTypedName",
														"src": "11130:5:13",
														"type": ""
													}
												],
												"src": "11076:1073:13"
											},
											{
												"body": {
													"nativeSrc": "12219:217:13",
													"nodeType": "YulBlock",
													"src": "12219:217:13",
													"statements": [
														{
															"nativeSrc": "12229:31:13",
															"nodeType": "YulAssignment",
															"src": "12229:31:13",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "12255:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "12255:4:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "12237:17:13",
																	"nodeType": "YulIdentifier",
																	"src": "12237:17:13"
																},
																"nativeSrc": "12237:23:13",
																"nodeType": "YulFunctionCall",
																"src": "12237:23:13"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "12229:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "12229:4:13"
																}
															]
														},
														{
															"nativeSrc": "12269:37:13",
															"nodeType": "YulAssignment",
															"src": "12269:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "12297:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "12297:8:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "12281:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "12281:15:13"
																},
																"nativeSrc": "12281:25:13",
																"nodeType": "YulFunctionCall",
																"src": "12281:25:13"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nativeSrc": "12269:8:13",
																	"nodeType": "YulIdentifier",
																	"src": "12269:8:13"
																}
															]
														},
														{
															"nativeSrc": "12316:113:13",
															"nodeType": "YulAssignment",
															"src": "12316:113:13",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "12346:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "12346:4:13"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "12352:8:13",
																		"nodeType": "YulIdentifier",
																		"src": "12352:8:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12362:66:13",
																		"nodeType": "YulLiteral",
																		"src": "12362:66:13",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "12325:20:13",
																	"nodeType": "YulIdentifier",
																	"src": "12325:20:13"
																},
																"nativeSrc": "12325:104:13",
																"nodeType": "YulFunctionCall",
																"src": "12325:104:13"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "12316:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "12316:5:13"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "12155:281:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "12194:4:13",
														"nodeType": "YulTypedName",
														"src": "12194:4:13",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "12200:8:13",
														"nodeType": "YulTypedName",
														"src": "12200:8:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "12213:5:13",
														"nodeType": "YulTypedName",
														"src": "12213:5:13",
														"type": ""
													}
												],
												"src": "12155:281:13"
											},
											{
												"body": {
													"nativeSrc": "12470:152:13",
													"nodeType": "YulBlock",
													"src": "12470:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12487:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12487:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12490:77:13",
																		"nodeType": "YulLiteral",
																		"src": "12490:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12480:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "12480:6:13"
																},
																"nativeSrc": "12480:88:13",
																"nodeType": "YulFunctionCall",
																"src": "12480:88:13"
															},
															"nativeSrc": "12480:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "12480:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12584:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12584:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12587:4:13",
																		"nodeType": "YulLiteral",
																		"src": "12587:4:13",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12577:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "12577:6:13"
																},
																"nativeSrc": "12577:15:13",
																"nodeType": "YulFunctionCall",
																"src": "12577:15:13"
															},
															"nativeSrc": "12577:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "12577:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12608:1:13",
																		"nodeType": "YulLiteral",
																		"src": "12608:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12611:4:13",
																		"nodeType": "YulLiteral",
																		"src": "12611:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "12601:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "12601:6:13"
																},
																"nativeSrc": "12601:15:13",
																"nodeType": "YulFunctionCall",
																"src": "12601:15:13"
															},
															"nativeSrc": "12601:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "12601:15:13"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "12442:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "12442:180:13"
											},
											{
												"body": {
													"nativeSrc": "12754:206:13",
													"nodeType": "YulBlock",
													"src": "12754:206:13",
													"statements": [
														{
															"nativeSrc": "12764:26:13",
															"nodeType": "YulAssignment",
															"src": "12764:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12776:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "12776:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12787:2:13",
																		"nodeType": "YulLiteral",
																		"src": "12787:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12772:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "12772:3:13"
																},
																"nativeSrc": "12772:18:13",
																"nodeType": "YulFunctionCall",
																"src": "12772:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12764:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "12764:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "12844:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "12844:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12857:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "12857:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12868:1:13",
																				"nodeType": "YulLiteral",
																				"src": "12868:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12853:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "12853:3:13"
																		},
																		"nativeSrc": "12853:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "12853:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12800:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "12800:43:13"
																},
																"nativeSrc": "12800:71:13",
																"nodeType": "YulFunctionCall",
																"src": "12800:71:13"
															},
															"nativeSrc": "12800:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "12800:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "12925:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "12925:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12938:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "12938:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12949:2:13",
																				"nodeType": "YulLiteral",
																				"src": "12949:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12934:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "12934:3:13"
																		},
																		"nativeSrc": "12934:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "12934:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12881:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "12881:43:13"
																},
																"nativeSrc": "12881:72:13",
																"nodeType": "YulFunctionCall",
																"src": "12881:72:13"
															},
															"nativeSrc": "12881:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "12881:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "12628:332:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12718:9:13",
														"nodeType": "YulTypedName",
														"src": "12718:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "12730:6:13",
														"nodeType": "YulTypedName",
														"src": "12730:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "12738:6:13",
														"nodeType": "YulTypedName",
														"src": "12738:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12749:4:13",
														"nodeType": "YulTypedName",
														"src": "12749:4:13",
														"type": ""
													}
												],
												"src": "12628:332:13"
											},
											{
												"body": {
													"nativeSrc": "13092:206:13",
													"nodeType": "YulBlock",
													"src": "13092:206:13",
													"statements": [
														{
															"nativeSrc": "13102:26:13",
															"nodeType": "YulAssignment",
															"src": "13102:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "13114:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "13114:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13125:2:13",
																		"nodeType": "YulLiteral",
																		"src": "13125:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13110:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "13110:3:13"
																},
																"nativeSrc": "13110:18:13",
																"nodeType": "YulFunctionCall",
																"src": "13110:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13102:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "13102:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "13182:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "13182:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13195:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "13195:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13206:1:13",
																				"nodeType": "YulLiteral",
																				"src": "13206:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13191:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "13191:3:13"
																		},
																		"nativeSrc": "13191:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "13191:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13138:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "13138:43:13"
																},
																"nativeSrc": "13138:71:13",
																"nodeType": "YulFunctionCall",
																"src": "13138:71:13"
															},
															"nativeSrc": "13138:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "13138:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "13263:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "13263:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13276:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "13276:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13287:2:13",
																				"nodeType": "YulLiteral",
																				"src": "13287:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13272:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "13272:3:13"
																		},
																		"nativeSrc": "13272:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "13272:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "13219:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "13219:43:13"
																},
																"nativeSrc": "13219:72:13",
																"nodeType": "YulFunctionCall",
																"src": "13219:72:13"
															},
															"nativeSrc": "13219:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "13219:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "12966:332:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13056:9:13",
														"nodeType": "YulTypedName",
														"src": "13056:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "13068:6:13",
														"nodeType": "YulTypedName",
														"src": "13068:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "13076:6:13",
														"nodeType": "YulTypedName",
														"src": "13076:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "13087:4:13",
														"nodeType": "YulTypedName",
														"src": "13087:4:13",
														"type": ""
													}
												],
												"src": "12966:332:13"
											},
											{
												"body": {
													"nativeSrc": "13332:152:13",
													"nodeType": "YulBlock",
													"src": "13332:152:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13349:1:13",
																		"nodeType": "YulLiteral",
																		"src": "13349:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13352:77:13",
																		"nodeType": "YulLiteral",
																		"src": "13352:77:13",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13342:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13342:6:13"
																},
																"nativeSrc": "13342:88:13",
																"nodeType": "YulFunctionCall",
																"src": "13342:88:13"
															},
															"nativeSrc": "13342:88:13",
															"nodeType": "YulExpressionStatement",
															"src": "13342:88:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13446:1:13",
																		"nodeType": "YulLiteral",
																		"src": "13446:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13449:4:13",
																		"nodeType": "YulLiteral",
																		"src": "13449:4:13",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13439:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13439:6:13"
																},
																"nativeSrc": "13439:15:13",
																"nodeType": "YulFunctionCall",
																"src": "13439:15:13"
															},
															"nativeSrc": "13439:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "13439:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13470:1:13",
																		"nodeType": "YulLiteral",
																		"src": "13470:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13473:4:13",
																		"nodeType": "YulLiteral",
																		"src": "13473:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "13463:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13463:6:13"
																},
																"nativeSrc": "13463:15:13",
																"nodeType": "YulFunctionCall",
																"src": "13463:15:13"
															},
															"nativeSrc": "13463:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "13463:15:13"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "13304:180:13",
												"nodeType": "YulFunctionDefinition",
												"src": "13304:180:13"
											},
											{
												"body": {
													"nativeSrc": "13522:138:13",
													"nodeType": "YulBlock",
													"src": "13522:138:13",
													"statements": [
														{
															"nativeSrc": "13532:23:13",
															"nodeType": "YulAssignment",
															"src": "13532:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "13553:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "13553:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "13537:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "13537:15:13"
																},
																"nativeSrc": "13537:18:13",
																"nodeType": "YulFunctionCall",
																"src": "13537:18:13"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "13532:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "13532:1:13"
																}
															]
														},
														{
															"nativeSrc": "13564:23:13",
															"nodeType": "YulAssignment",
															"src": "13564:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "13585:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "13585:1:13"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "13569:15:13",
																	"nodeType": "YulIdentifier",
																	"src": "13569:15:13"
																},
																"nativeSrc": "13569:18:13",
																"nodeType": "YulFunctionCall",
																"src": "13569:18:13"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "13564:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "13564:1:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "13609:22:13",
																"nodeType": "YulBlock",
																"src": "13609:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "13611:16:13",
																				"nodeType": "YulIdentifier",
																				"src": "13611:16:13"
																			},
																			"nativeSrc": "13611:18:13",
																			"nodeType": "YulFunctionCall",
																			"src": "13611:18:13"
																		},
																		"nativeSrc": "13611:18:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "13611:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "13606:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "13606:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "13599:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "13599:6:13"
																},
																"nativeSrc": "13599:9:13",
																"nodeType": "YulFunctionCall",
																"src": "13599:9:13"
															},
															"nativeSrc": "13596:35:13",
															"nodeType": "YulIf",
															"src": "13596:35:13"
														},
														{
															"nativeSrc": "13640:14:13",
															"nodeType": "YulAssignment",
															"src": "13640:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "13649:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "13649:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "13652:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "13652:1:13"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nativeSrc": "13645:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "13645:3:13"
																},
																"nativeSrc": "13645:9:13",
																"nodeType": "YulFunctionCall",
																"src": "13645:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "13640:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "13640:1:13"
																}
															]
														}
													]
												},
												"name": "mod_t_uint8",
												"nativeSrc": "13490:170:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "13511:1:13",
														"nodeType": "YulTypedName",
														"src": "13511:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "13514:1:13",
														"nodeType": "YulTypedName",
														"src": "13514:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "13520:1:13",
														"nodeType": "YulTypedName",
														"src": "13520:1:13",
														"type": ""
													}
												],
												"src": "13490:170:13"
											},
											{
												"body": {
													"nativeSrc": "13820:288:13",
													"nodeType": "YulBlock",
													"src": "13820:288:13",
													"statements": [
														{
															"nativeSrc": "13830:26:13",
															"nodeType": "YulAssignment",
															"src": "13830:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "13842:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "13842:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13853:2:13",
																		"nodeType": "YulLiteral",
																		"src": "13853:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13838:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "13838:3:13"
																},
																"nativeSrc": "13838:18:13",
																"nodeType": "YulFunctionCall",
																"src": "13838:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13830:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "13830:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "13910:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "13910:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13923:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "13923:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13934:1:13",
																				"nodeType": "YulLiteral",
																				"src": "13934:1:13",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13919:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "13919:3:13"
																		},
																		"nativeSrc": "13919:17:13",
																		"nodeType": "YulFunctionCall",
																		"src": "13919:17:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13866:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "13866:43:13"
																},
																"nativeSrc": "13866:71:13",
																"nodeType": "YulFunctionCall",
																"src": "13866:71:13"
															},
															"nativeSrc": "13866:71:13",
															"nodeType": "YulExpressionStatement",
															"src": "13866:71:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "13991:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "13991:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14004:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "14004:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14015:2:13",
																				"nodeType": "YulLiteral",
																				"src": "14015:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14000:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "14000:3:13"
																		},
																		"nativeSrc": "14000:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14000:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13947:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "13947:43:13"
																},
																"nativeSrc": "13947:72:13",
																"nodeType": "YulFunctionCall",
																"src": "13947:72:13"
															},
															"nativeSrc": "13947:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "13947:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "14073:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "14073:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14086:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "14086:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14097:2:13",
																				"nodeType": "YulLiteral",
																				"src": "14097:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14082:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "14082:3:13"
																		},
																		"nativeSrc": "14082:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14082:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14029:43:13",
																	"nodeType": "YulIdentifier",
																	"src": "14029:43:13"
																},
																"nativeSrc": "14029:72:13",
																"nodeType": "YulFunctionCall",
																"src": "14029:72:13"
															},
															"nativeSrc": "14029:72:13",
															"nodeType": "YulExpressionStatement",
															"src": "14029:72:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "13666:442:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13776:9:13",
														"nodeType": "YulTypedName",
														"src": "13776:9:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "13788:6:13",
														"nodeType": "YulTypedName",
														"src": "13788:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "13796:6:13",
														"nodeType": "YulTypedName",
														"src": "13796:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "13804:6:13",
														"nodeType": "YulTypedName",
														"src": "13804:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "13815:4:13",
														"nodeType": "YulTypedName",
														"src": "13815:4:13",
														"type": ""
													}
												],
												"src": "13666:442:13"
											},
											{
												"body": {
													"nativeSrc": "14154:76:13",
													"nodeType": "YulBlock",
													"src": "14154:76:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "14208:16:13",
																"nodeType": "YulBlock",
																"src": "14208:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "14217:1:13",
																					"nodeType": "YulLiteral",
																					"src": "14217:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "14220:1:13",
																					"nodeType": "YulLiteral",
																					"src": "14220:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "14210:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "14210:6:13"
																			},
																			"nativeSrc": "14210:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14210:12:13"
																		},
																		"nativeSrc": "14210:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "14210:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "14177:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "14177:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "14199:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "14199:5:13"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "14184:14:13",
																					"nodeType": "YulIdentifier",
																					"src": "14184:14:13"
																				},
																				"nativeSrc": "14184:21:13",
																				"nodeType": "YulFunctionCall",
																				"src": "14184:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "14174:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "14174:2:13"
																		},
																		"nativeSrc": "14174:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14174:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "14167:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "14167:6:13"
																},
																"nativeSrc": "14167:40:13",
																"nodeType": "YulFunctionCall",
																"src": "14167:40:13"
															},
															"nativeSrc": "14164:60:13",
															"nodeType": "YulIf",
															"src": "14164:60:13"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "14114:116:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "14147:5:13",
														"nodeType": "YulTypedName",
														"src": "14147:5:13",
														"type": ""
													}
												],
												"src": "14114:116:13"
											},
											{
												"body": {
													"nativeSrc": "14296:77:13",
													"nodeType": "YulBlock",
													"src": "14296:77:13",
													"statements": [
														{
															"nativeSrc": "14306:22:13",
															"nodeType": "YulAssignment",
															"src": "14306:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "14321:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "14321:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "14315:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14315:5:13"
																},
																"nativeSrc": "14315:13:13",
																"nodeType": "YulFunctionCall",
																"src": "14315:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "14306:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14306:5:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "14361:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "14361:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "14337:23:13",
																	"nodeType": "YulIdentifier",
																	"src": "14337:23:13"
																},
																"nativeSrc": "14337:30:13",
																"nodeType": "YulFunctionCall",
																"src": "14337:30:13"
															},
															"nativeSrc": "14337:30:13",
															"nodeType": "YulExpressionStatement",
															"src": "14337:30:13"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "14236:137:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "14274:6:13",
														"nodeType": "YulTypedName",
														"src": "14274:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "14282:3:13",
														"nodeType": "YulTypedName",
														"src": "14282:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "14290:5:13",
														"nodeType": "YulTypedName",
														"src": "14290:5:13",
														"type": ""
													}
												],
												"src": "14236:137:13"
											},
											{
												"body": {
													"nativeSrc": "14453:271:13",
													"nodeType": "YulBlock",
													"src": "14453:271:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "14499:83:13",
																"nodeType": "YulBlock",
																"src": "14499:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "14501:77:13",
																				"nodeType": "YulIdentifier",
																				"src": "14501:77:13"
																			},
																			"nativeSrc": "14501:79:13",
																			"nodeType": "YulFunctionCall",
																			"src": "14501:79:13"
																		},
																		"nativeSrc": "14501:79:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "14501:79:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "14474:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "14474:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "14483:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "14483:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "14470:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "14470:3:13"
																		},
																		"nativeSrc": "14470:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14470:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14495:2:13",
																		"nodeType": "YulLiteral",
																		"src": "14495:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "14466:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "14466:3:13"
																},
																"nativeSrc": "14466:32:13",
																"nodeType": "YulFunctionCall",
																"src": "14466:32:13"
															},
															"nativeSrc": "14463:119:13",
															"nodeType": "YulIf",
															"src": "14463:119:13"
														},
														{
															"nativeSrc": "14592:125:13",
															"nodeType": "YulBlock",
															"src": "14592:125:13",
															"statements": [
																{
																	"nativeSrc": "14607:15:13",
																	"nodeType": "YulVariableDeclaration",
																	"src": "14607:15:13",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "14621:1:13",
																		"nodeType": "YulLiteral",
																		"src": "14621:1:13",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "14611:6:13",
																			"nodeType": "YulTypedName",
																			"src": "14611:6:13",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "14636:71:13",
																	"nodeType": "YulAssignment",
																	"src": "14636:71:13",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "14679:9:13",
																						"nodeType": "YulIdentifier",
																						"src": "14679:9:13"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "14690:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "14690:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "14675:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "14675:3:13"
																				},
																				"nativeSrc": "14675:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "14675:22:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "14699:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "14699:7:13"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "14646:28:13",
																			"nodeType": "YulIdentifier",
																			"src": "14646:28:13"
																		},
																		"nativeSrc": "14646:61:13",
																		"nodeType": "YulFunctionCall",
																		"src": "14646:61:13"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "14636:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "14636:6:13"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "14379:345:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14423:9:13",
														"nodeType": "YulTypedName",
														"src": "14423:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "14434:7:13",
														"nodeType": "YulTypedName",
														"src": "14434:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "14446:6:13",
														"nodeType": "YulTypedName",
														"src": "14446:6:13",
														"type": ""
													}
												],
												"src": "14379:345:13"
											},
											{
												"body": {
													"nativeSrc": "14788:40:13",
													"nodeType": "YulBlock",
													"src": "14788:40:13",
													"statements": [
														{
															"nativeSrc": "14799:22:13",
															"nodeType": "YulAssignment",
															"src": "14799:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "14815:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "14815:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "14809:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "14809:5:13"
																},
																"nativeSrc": "14809:12:13",
																"nodeType": "YulFunctionCall",
																"src": "14809:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "14799:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "14799:6:13"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "14730:98:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "14771:5:13",
														"nodeType": "YulTypedName",
														"src": "14771:5:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "14781:6:13",
														"nodeType": "YulTypedName",
														"src": "14781:6:13",
														"type": ""
													}
												],
												"src": "14730:98:13"
											},
											{
												"body": {
													"nativeSrc": "14947:34:13",
													"nodeType": "YulBlock",
													"src": "14947:34:13",
													"statements": [
														{
															"nativeSrc": "14957:18:13",
															"nodeType": "YulAssignment",
															"src": "14957:18:13",
															"value": {
																"name": "pos",
																"nativeSrc": "14972:3:13",
																"nodeType": "YulIdentifier",
																"src": "14972:3:13"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "14957:11:13",
																	"nodeType": "YulIdentifier",
																	"src": "14957:11:13"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "14834:147:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "14919:3:13",
														"nodeType": "YulTypedName",
														"src": "14919:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "14924:6:13",
														"nodeType": "YulTypedName",
														"src": "14924:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "14935:11:13",
														"nodeType": "YulTypedName",
														"src": "14935:11:13",
														"type": ""
													}
												],
												"src": "14834:147:13"
											},
											{
												"body": {
													"nativeSrc": "15095:278:13",
													"nodeType": "YulBlock",
													"src": "15095:278:13",
													"statements": [
														{
															"nativeSrc": "15105:52:13",
															"nodeType": "YulVariableDeclaration",
															"src": "15105:52:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "15151:5:13",
																		"nodeType": "YulIdentifier",
																		"src": "15151:5:13"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "15119:31:13",
																	"nodeType": "YulIdentifier",
																	"src": "15119:31:13"
																},
																"nativeSrc": "15119:38:13",
																"nodeType": "YulFunctionCall",
																"src": "15119:38:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "15109:6:13",
																	"nodeType": "YulTypedName",
																	"src": "15109:6:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "15166:95:13",
															"nodeType": "YulAssignment",
															"src": "15166:95:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "15249:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "15249:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "15254:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15254:6:13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "15173:75:13",
																	"nodeType": "YulIdentifier",
																	"src": "15173:75:13"
																},
																"nativeSrc": "15173:88:13",
																"nodeType": "YulFunctionCall",
																"src": "15173:88:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "15166:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15166:3:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "15309:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "15309:5:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15316:4:13",
																				"nodeType": "YulLiteral",
																				"src": "15316:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15305:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "15305:3:13"
																		},
																		"nativeSrc": "15305:16:13",
																		"nodeType": "YulFunctionCall",
																		"src": "15305:16:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "15323:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "15323:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "15328:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15328:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "15270:34:13",
																	"nodeType": "YulIdentifier",
																	"src": "15270:34:13"
																},
																"nativeSrc": "15270:65:13",
																"nodeType": "YulFunctionCall",
																"src": "15270:65:13"
															},
															"nativeSrc": "15270:65:13",
															"nodeType": "YulExpressionStatement",
															"src": "15270:65:13"
														},
														{
															"nativeSrc": "15344:23:13",
															"nodeType": "YulAssignment",
															"src": "15344:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "15355:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "15355:3:13"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "15360:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15360:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15351:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15351:3:13"
																},
																"nativeSrc": "15351:16:13",
																"nodeType": "YulFunctionCall",
																"src": "15351:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "15344:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15344:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "14987:386:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "15076:5:13",
														"nodeType": "YulTypedName",
														"src": "15076:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "15083:3:13",
														"nodeType": "YulTypedName",
														"src": "15083:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "15091:3:13",
														"nodeType": "YulTypedName",
														"src": "15091:3:13",
														"type": ""
													}
												],
												"src": "14987:386:13"
											},
											{
												"body": {
													"nativeSrc": "15513:137:13",
													"nodeType": "YulBlock",
													"src": "15513:137:13",
													"statements": [
														{
															"nativeSrc": "15524:100:13",
															"nodeType": "YulAssignment",
															"src": "15524:100:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15611:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "15611:6:13"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "15620:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "15620:3:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "15531:79:13",
																	"nodeType": "YulIdentifier",
																	"src": "15531:79:13"
																},
																"nativeSrc": "15531:93:13",
																"nodeType": "YulFunctionCall",
																"src": "15531:93:13"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "15524:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15524:3:13"
																}
															]
														},
														{
															"nativeSrc": "15634:10:13",
															"nodeType": "YulAssignment",
															"src": "15634:10:13",
															"value": {
																"name": "pos",
																"nativeSrc": "15641:3:13",
																"nodeType": "YulIdentifier",
																"src": "15641:3:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "15634:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "15634:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "15379:271:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "15492:3:13",
														"nodeType": "YulTypedName",
														"src": "15492:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15498:6:13",
														"nodeType": "YulTypedName",
														"src": "15498:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "15509:3:13",
														"nodeType": "YulTypedName",
														"src": "15509:3:13",
														"type": ""
													}
												],
												"src": "15379:271:13"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint8(x, y) -> sum {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xff) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint8(x, y) -> r {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n}\n",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1243": [
									{
										"length": 32,
										"start": 1582
									},
									{
										"length": 32,
										"start": 2097
									},
									{
										"length": 32,
										"start": 5518
									},
									{
										"length": 32,
										"start": 5885
									}
								],
								"1245": [
									{
										"length": 32,
										"start": 2048
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80638da5cb5b116100f7578063ba0af7a911610095578063ce96cb771161006f578063ce96cb771461056b578063d905777e1461059b578063dd62ed3e146105cb578063ef8b30f7146105fb576101a7565b8063ba0af7a9146104ed578063c63d75b61461050b578063c6e6f5921461053b576101a7565b8063a9059cbb116100d1578063a9059cbb1461042d578063b3d7f6b91461045d578063b460af941461048d578063ba087652146104bd576101a7565b80638da5cb5b146103c157806394bf804d146103df57806395d89b411461040f576101a7565b806323b872dd11610164578063402d267d1161013e578063402d267d146103015780634cdad506146103315780636e553f651461036157806370a0823114610391576101a7565b806323b872dd14610295578063313ce567146102c557806338d52e0f146102e3576101a7565b806301e1d114146101ab57806306fdde03146101c957806307a2d13a146101e7578063095ea7b3146102175780630a28a4771461024757806318160ddd14610277575b5f80fd5b6101b361062b565b6040516101c09190611cb0565b60405180910390f35b6101d16106c9565b6040516101de9190611d39565b60405180910390f35b61020160048036038101906101fc9190611d87565b610759565b60405161020e9190611cb0565b60405180910390f35b610231600480360381019061022c9190611e0c565b61076b565b60405161023e9190611e64565b60405180910390f35b610261600480360381019061025c9190611d87565b61078d565b60405161026e9190611cb0565b60405180910390f35b61027f6107be565b60405161028c9190611cb0565b60405180910390f35b6102af60048036038101906102aa9190611e7d565b6107c7565b6040516102bc9190611e64565b60405180910390f35b6102cd6107f5565b6040516102da9190611ee8565b60405180910390f35b6102eb61082e565b6040516102f89190611f10565b60405180910390f35b61031b60048036038101906103169190611f29565b610855565b6040516103289190611cb0565b60405180910390f35b61034b60048036038101906103469190611d87565b61087e565b6040516103589190611cb0565b60405180910390f35b61037b60048036038101906103769190611f54565b6108af565b6040516103889190611cb0565b60405180910390f35b6103ab60048036038101906103a69190611f29565b61092f565b6040516103b89190611cb0565b60405180910390f35b6103c9610974565b6040516103d69190611fb2565b60405180910390f35b6103f960048036038101906103f49190611f54565b610999565b6040516104069190611cb0565b60405180910390f35b610417610a19565b6040516104249190611d39565b60405180910390f35b61044760048036038101906104429190611e0c565b610aa9565b6040516104549190611e64565b60405180910390f35b61047760048036038101906104729190611d87565b610acb565b6040516104849190611cb0565b60405180910390f35b6104a760048036038101906104a29190611fcb565b610afc565b6040516104b49190611cb0565b60405180910390f35b6104d760048036038101906104d29190611fcb565b610b7e565b6040516104e49190611cb0565b60405180910390f35b6104f5610c00565b6040516105029190611cb0565b60405180910390f35b61052560048036038101906105209190611f29565b610c06565b6040516105329190611cb0565b60405180910390f35b61055560048036038101906105509190611d87565b610c2f565b6040516105629190611cb0565b60405180910390f35b61058560048036038101906105809190611f29565b610c41565b6040516105929190611cb0565b60405180910390f35b6105b560048036038101906105b09190611f29565b610c5b565b6040516105c29190611cb0565b60405180910390f35b6105e560048036038101906105e0919061201b565b610c6c565b6040516105f29190611cb0565b60405180910390f35b61061560048036038101906106109190611d87565b610cee565b6040516106229190611cb0565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106859190611f10565b602060405180830381865afa1580156106a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c4919061206d565b905090565b6060600380546106d8906120c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610704906120c5565b801561074f5780601f106107265761010080835404028352916020019161074f565b820191905f5260205f20905b81548152906001019060200180831161073257829003601f168201915b5050505050905090565b5f610764825f610d1f565b9050919050565b5f80610775610d77565b9050610782818585610d7e565b600191505092915050565b5f806107a08361079b610d90565b610d94565b90506107b681846107b19190612122565b610db7565b915050919050565b5f600254905090565b5f806107d1610d77565b90506107de858285610dca565b6107e9858585610e5c565b60019150509392505050565b5f6107fe610f4c565b7f00000000000000000000000000000000000000000000000000000000000000006108299190612155565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f8061088983610f50565b905061089c81610897610d90565b610f62565b816108a79190612189565b915050919050565b5f806108ba83610855565b905080841115610905578284826040517f79012fb20000000000000000000000000000000000000000000000000000000081526004016108fc939291906121bc565b60405180910390fd5b5f61090f85610cee565b905061092461091c610d77565b858784610f90565b809250505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f806109a483610c06565b9050808411156109ef578284826040517f284ff6670000000000000000000000000000000000000000000000000000000081526004016109e6939291906121bc565b60405180910390fd5b5f6109f985610acb565b9050610a0e610a06610d77565b858388610f90565b809250505092915050565b606060048054610a28906120c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a54906120c5565b8015610a9f5780601f10610a7657610100808354040283529160200191610a9f565b820191905f5260205f20905b815481529060010190602001808311610a8257829003601f168201915b5050505050905090565b5f80610ab3610d77565b9050610ac0818585610e5c565b600191505092915050565b5f80610ad683611016565b9050610ae981610ae4611029565b610d94565b81610af49190612122565b915050919050565b5f80610b0783610c41565b905080851115610b52578285826040517ffe9cceec000000000000000000000000000000000000000000000000000000008152600401610b49939291906121bc565b60405180910390fd5b5f610b5c8661078d565b9050610b72610b69610d77565b86868985611032565b80925050509392505050565b5f80610b8983610c5b565b905080851115610bd4578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610bcb939291906121bc565b60405180910390fd5b5f610bde8661087e565b9050610bf4610beb610d77565b8686848a611032565b80925050509392505050565b60065481565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610c3a825f6110ba565b9050919050565b5f610c54610c4e8361092f565b5f610d1f565b9050919050565b5f610c658261092f565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f80610d0183610cfc611029565b610f62565b9050610d178184610d129190612189565b611112565b915050919050565b5f610d6f6001610d2d61062b565b610d379190612122565b610d3f610f4c565b600a610d4b9190612320565b610d536107be565b610d5d9190612122565b8486611124909392919063ffffffff16565b905092915050565b5f33905090565b610d8b8383836001611179565b505050565b5f90565b5f610daf82612710600186611124909392919063ffffffff16565b905092915050565b5f610dc38260016110ba565b9050919050565b5f610dd58484610c6c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e565781811015610e47578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610e3e939291906121bc565b60405180910390fd5b610e5584848484035f611179565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ecc575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610ec39190611f10565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f3c575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610f339190611f10565b60405180910390fd5b610f47838383611348565b505050565b5f90565b5f610f5b825f610d1f565b9050919050565b5f610f888261271084610f759190612122565b600186611124909392919063ffffffff16565b905092915050565b5f610fa283610f9d611029565b610f62565b90505f610fad611561565b9050610fbb86868686611589565b5f82118015610ff657503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561100e5761100d61100661082e565b828461162c565b5b505050505050565b5f611022826001610d1f565b9050919050565b5f600654905090565b5f6110448361103f610d90565b610d94565b90505f61104f6116ab565b905061105e87878787876116af565b5f8211801561109957503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156110b1576110b06110a961082e565b828461162c565b5b50505050505050565b5f61110a6110c6610f4c565b600a6110d29190612320565b6110da6107be565b6110e49190612122565b60016110ee61062b565b6110f89190612122565b8486611124909392919063ffffffff16565b905092915050565b5f61111d825f6110ba565b9050919050565b5f806111318686866117a8565b905061113c836118a7565b801561115857505f84806111535761115261236a565b5b868809115b1561116d5760018161116a9190612122565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036111e9575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016111e09190611f10565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611259575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016112509190611f10565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611342578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516113399190611cb0565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611398578060025f82825461138c9190612122565b92505081905550611466565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611421578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611418939291906121bc565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ad578060025f82825403925050819055506114f7565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115549190611cb0565b60405180910390a3505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115b57f00000000000000000000000000000000000000000000000000000000000000008530856118d4565b6115bf8382611956565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7848460405161161e929190612397565b60405180910390a350505050565b6116a6838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161165f9291906123be565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d5565b505050565b5f90565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146116ee576116ed838683610dca565b5b6116f88382611a6a565b6117237f0000000000000000000000000000000000000000000000000000000000000000858461162c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611799929190612397565b60405180910390a45050505050565b5f8083850290505f8019858709828110838203039150505f81036117e0578382816117d6576117d561236a565b5b04925050506118a0565b808411611819576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f600160028360038111156118bf576118be6123e5565b5b6118c99190612412565b60ff16149050919050565b611950848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161190993929190612442565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d5565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119c6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016119bd9190611f10565b60405180910390fd5b6119d15f8383611348565b5050565b5f6119ff828473ffffffffffffffffffffffffffffffffffffffff16611ae990919063ffffffff16565b90505f815114158015611a23575080806020019051810190611a2191906124a1565b155b15611a6557826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611a5c9190611f10565b60405180910390fd5b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ada575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401611ad19190611f10565b60405180910390fd5b611ae5825f83611348565b5050565b6060611af683835f611afe565b905092915050565b606081471015611b4557306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611b3c9190611f10565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611b6d9190612510565b5f6040518083038185875af1925050503d805f8114611ba7576040519150601f19603f3d011682016040523d82523d5f602084013e611bac565b606091505b5091509150611bbc868383611bc7565b925050509392505050565b606082611bdc57611bd782611c54565b611c4c565b5f8251148015611c0257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611c4457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611c3b9190611f10565b60405180910390fd5b819050611c4d565b5b9392505050565b5f81511115611c665780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611caa81611c98565b82525050565b5f602082019050611cc35f830184611ca1565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611d0b82611cc9565b611d158185611cd3565b9350611d25818560208601611ce3565b611d2e81611cf1565b840191505092915050565b5f6020820190508181035f830152611d518184611d01565b905092915050565b5f80fd5b611d6681611c98565b8114611d70575f80fd5b50565b5f81359050611d8181611d5d565b92915050565b5f60208284031215611d9c57611d9b611d59565b5b5f611da984828501611d73565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ddb82611db2565b9050919050565b611deb81611dd1565b8114611df5575f80fd5b50565b5f81359050611e0681611de2565b92915050565b5f8060408385031215611e2257611e21611d59565b5b5f611e2f85828601611df8565b9250506020611e4085828601611d73565b9150509250929050565b5f8115159050919050565b611e5e81611e4a565b82525050565b5f602082019050611e775f830184611e55565b92915050565b5f805f60608486031215611e9457611e93611d59565b5b5f611ea186828701611df8565b9350506020611eb286828701611df8565b9250506040611ec386828701611d73565b9150509250925092565b5f60ff82169050919050565b611ee281611ecd565b82525050565b5f602082019050611efb5f830184611ed9565b92915050565b611f0a81611dd1565b82525050565b5f602082019050611f235f830184611f01565b92915050565b5f60208284031215611f3e57611f3d611d59565b5b5f611f4b84828501611df8565b91505092915050565b5f8060408385031215611f6a57611f69611d59565b5b5f611f7785828601611d73565b9250506020611f8885828601611df8565b9150509250929050565b5f611f9c82611db2565b9050919050565b611fac81611f92565b82525050565b5f602082019050611fc55f830184611fa3565b92915050565b5f805f60608486031215611fe257611fe1611d59565b5b5f611fef86828701611d73565b935050602061200086828701611df8565b925050604061201186828701611df8565b9150509250925092565b5f806040838503121561203157612030611d59565b5b5f61203e85828601611df8565b925050602061204f85828601611df8565b9150509250929050565b5f8151905061206781611d5d565b92915050565b5f6020828403121561208257612081611d59565b5b5f61208f84828501612059565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806120dc57607f821691505b6020821081036120ef576120ee612098565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61212c82611c98565b915061213783611c98565b925082820190508082111561214f5761214e6120f5565b5b92915050565b5f61215f82611ecd565b915061216a83611ecd565b9250828201905060ff811115612183576121826120f5565b5b92915050565b5f61219382611c98565b915061219e83611c98565b92508282039050818111156121b6576121b56120f5565b5b92915050565b5f6060820190506121cf5f830186611f01565b6121dc6020830185611ca1565b6121e96040830184611ca1565b949350505050565b5f8160011c9050919050565b5f808291508390505b600185111561224657808604811115612222576122216120f5565b5b60018516156122315780820291505b808102905061223f856121f1565b9450612206565b94509492505050565b5f8261225e5760019050612319565b8161226b575f9050612319565b8160018114612281576002811461228b576122ba565b6001915050612319565b60ff84111561229d5761229c6120f5565b5b8360020a9150848211156122b4576122b36120f5565b5b50612319565b5060208310610133831016604e8410600b84101617156122ef5782820a9050838111156122ea576122e96120f5565b5b612319565b6122fc84848460016121fd565b92509050818404811115612313576123126120f5565b5b81810290505b9392505050565b5f61232a82611c98565b915061233583611ecd565b92506123627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461224f565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506123aa5f830185611ca1565b6123b76020830184611ca1565b9392505050565b5f6040820190506123d15f830185611f01565b6123de6020830184611ca1565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f61241c82611ecd565b915061242783611ecd565b9250826124375761243661236a565b5b828206905092915050565b5f6060820190506124555f830186611f01565b6124626020830185611f01565b61246f6040830184611ca1565b949350505050565b61248081611e4a565b811461248a575f80fd5b50565b5f8151905061249b81612477565b92915050565b5f602082840312156124b6576124b5611d59565b5b5f6124c38482850161248d565b91505092915050565b5f81519050919050565b5f81905092915050565b5f6124ea826124cc565b6124f481856124d6565b9350612504818560208601611ce3565b80840191505092915050565b5f61251b82846124e0565b91508190509291505056fea2646970667358221220c733f6cb83933133afe6a4d42c9cdc1af596c077301b34c416913646670960b464736f6c63430008190033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBA0AF7A9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x5FB JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xBA0AF7A9 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x53B JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xA9059CBB GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4BD JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x40F JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x391 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2E3 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x277 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3 PUSH2 0x62B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x759 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x1E0C JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x261 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH2 0x7BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x1E7D JUMP JUMPDEST PUSH2 0x7C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x1EE8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EB PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x855 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x358 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C9 PUSH2 0x974 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F4 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x999 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x417 PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x442 SWAP2 SWAP1 PUSH2 0x1E0C JUMP JUMPDEST PUSH2 0xAA9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xACB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B4 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F5 PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x502 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x525 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x520 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x555 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x550 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x585 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x580 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1F29 JUMP JUMPDEST PUSH2 0xC5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E0 SWAP2 SWAP1 PUSH2 0x201B JUMP JUMPDEST PUSH2 0xC6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x615 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x610 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0xCEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x685 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A0 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C4 SWAP2 SWAP1 PUSH2 0x206D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x6D8 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x704 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x74F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x726 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x74F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x732 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x764 DUP3 PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x775 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0x782 DUP2 DUP6 DUP6 PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7A0 DUP4 PUSH2 0x79B PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP PUSH2 0x7B6 DUP2 DUP5 PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0xDB7 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7D1 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0x7DE DUP6 DUP3 DUP6 PUSH2 0xDCA JUMP JUMPDEST PUSH2 0x7E9 DUP6 DUP6 DUP6 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7FE PUSH2 0xF4C JUMP JUMPDEST PUSH32 0x0 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x2155 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x889 DUP4 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP PUSH2 0x89C DUP2 PUSH2 0x897 PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST DUP2 PUSH2 0x8A7 SWAP2 SWAP1 PUSH2 0x2189 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x8BA DUP4 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x905 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x90F DUP6 PUSH2 0xCEE JUMP JUMPDEST SWAP1 POP PUSH2 0x924 PUSH2 0x91C PUSH2 0xD77 JUMP JUMPDEST DUP6 DUP8 DUP5 PUSH2 0xF90 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x9A4 DUP4 PUSH2 0xC06 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x9EF JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x284FF66700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x9F9 DUP6 PUSH2 0xACB JUMP JUMPDEST SWAP1 POP PUSH2 0xA0E PUSH2 0xA06 PUSH2 0xD77 JUMP JUMPDEST DUP6 DUP4 DUP9 PUSH2 0xF90 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA28 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA54 SWAP1 PUSH2 0x20C5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA9F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA76 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA9F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA82 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAB3 PUSH2 0xD77 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC0 DUP2 DUP6 DUP6 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xAD6 DUP4 PUSH2 0x1016 JUMP JUMPDEST SWAP1 POP PUSH2 0xAE9 DUP2 PUSH2 0xAE4 PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST DUP2 PUSH2 0xAF4 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB07 DUP4 PUSH2 0xC41 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xB52 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB49 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xB5C DUP7 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP PUSH2 0xB72 PUSH2 0xB69 PUSH2 0xD77 JUMP JUMPDEST DUP7 DUP7 DUP10 DUP6 PUSH2 0x1032 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB89 DUP4 PUSH2 0xC5B JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xBD4 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xBDE DUP7 PUSH2 0x87E JUMP JUMPDEST SWAP1 POP PUSH2 0xBF4 PUSH2 0xBEB PUSH2 0xD77 JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1032 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC3A DUP3 PUSH0 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC54 PUSH2 0xC4E DUP4 PUSH2 0x92F JUMP JUMPDEST PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xC65 DUP3 PUSH2 0x92F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xD01 DUP4 PUSH2 0xCFC PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST SWAP1 POP PUSH2 0xD17 DUP2 DUP5 PUSH2 0xD12 SWAP2 SWAP1 PUSH2 0x2189 JUMP JUMPDEST PUSH2 0x1112 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xD6F PUSH1 0x1 PUSH2 0xD2D PUSH2 0x62B JUMP JUMPDEST PUSH2 0xD37 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH2 0xD3F PUSH2 0xF4C JUMP JUMPDEST PUSH1 0xA PUSH2 0xD4B SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0xD53 PUSH2 0x7BE JUMP JUMPDEST PUSH2 0xD5D SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD8B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1179 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xDAF DUP3 PUSH2 0x2710 PUSH1 0x1 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDC3 DUP3 PUSH1 0x1 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDD5 DUP5 DUP5 PUSH2 0xC6C JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xE56 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE47 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE3E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE55 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1179 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xECC JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC3 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF3C JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF33 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF47 DUP4 DUP4 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xF5B DUP3 PUSH0 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF88 DUP3 PUSH2 0x2710 DUP5 PUSH2 0xF75 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFA2 DUP4 PUSH2 0xF9D PUSH2 0x1029 JUMP JUMPDEST PUSH2 0xF62 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xFAD PUSH2 0x1561 JUMP JUMPDEST SWAP1 POP PUSH2 0xFBB DUP7 DUP7 DUP7 DUP7 PUSH2 0x1589 JUMP JUMPDEST PUSH0 DUP3 GT DUP1 ISZERO PUSH2 0xFF6 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x100E JUMPI PUSH2 0x100D PUSH2 0x1006 PUSH2 0x82E JUMP JUMPDEST DUP3 DUP5 PUSH2 0x162C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1022 DUP3 PUSH1 0x1 PUSH2 0xD1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x6 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1044 DUP4 PUSH2 0x103F PUSH2 0xD90 JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x104F PUSH2 0x16AB JUMP JUMPDEST SWAP1 POP PUSH2 0x105E DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x16AF JUMP JUMPDEST PUSH0 DUP3 GT DUP1 ISZERO PUSH2 0x1099 JUMPI POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x10B1 JUMPI PUSH2 0x10B0 PUSH2 0x10A9 PUSH2 0x82E JUMP JUMPDEST DUP3 DUP5 PUSH2 0x162C JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x110A PUSH2 0x10C6 PUSH2 0xF4C JUMP JUMPDEST PUSH1 0xA PUSH2 0x10D2 SWAP2 SWAP1 PUSH2 0x2320 JUMP JUMPDEST PUSH2 0x10DA PUSH2 0x7BE JUMP JUMPDEST PUSH2 0x10E4 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x10EE PUSH2 0x62B JUMP JUMPDEST PUSH2 0x10F8 SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x1124 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x111D DUP3 PUSH0 PUSH2 0x10BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x1131 DUP7 DUP7 DUP7 PUSH2 0x17A8 JUMP JUMPDEST SWAP1 POP PUSH2 0x113C DUP4 PUSH2 0x18A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1158 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x1153 JUMPI PUSH2 0x1152 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x116D JUMPI PUSH1 0x1 DUP2 PUSH2 0x116A SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11E9 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11E0 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1259 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1250 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1342 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1339 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1398 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x138C SWAP2 SWAP1 PUSH2 0x2122 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1466 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1421 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1418 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14AD JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x14F7 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1554 SWAP2 SWAP1 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x15B5 PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x18D4 JUMP JUMPDEST PUSH2 0x15BF DUP4 DUP3 PUSH2 0x1956 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x161E SWAP3 SWAP2 SWAP1 PUSH2 0x2397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x16A6 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x165F SWAP3 SWAP2 SWAP1 PUSH2 0x23BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19D5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16EE JUMPI PUSH2 0x16ED DUP4 DUP7 DUP4 PUSH2 0xDCA JUMP JUMPDEST JUMPDEST PUSH2 0x16F8 DUP4 DUP3 PUSH2 0x1A6A JUMP JUMPDEST PUSH2 0x1723 PUSH32 0x0 DUP6 DUP5 PUSH2 0x162C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1799 SWAP3 SWAP2 SWAP1 PUSH2 0x2397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x17E0 JUMPI DUP4 DUP3 DUP2 PUSH2 0x17D6 JUMPI PUSH2 0x17D5 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x18A0 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1819 JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18BF JUMPI PUSH2 0x18BE PUSH2 0x23E5 JUMP JUMPDEST JUMPDEST PUSH2 0x18C9 SWAP2 SWAP1 PUSH2 0x2412 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1950 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1909 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2442 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19D5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19C6 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BD SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19D1 PUSH0 DUP4 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x19FF DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1AE9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1A23 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1A21 SWAP2 SWAP1 PUSH2 0x24A1 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A65 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5C SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1ADA JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD1 SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AE5 DUP3 PUSH0 DUP4 PUSH2 0x1348 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AF6 DUP4 DUP4 PUSH0 PUSH2 0x1AFE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1B45 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1B6D SWAP2 SWAP1 PUSH2 0x2510 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1BA7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BAC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1BBC DUP7 DUP4 DUP4 PUSH2 0x1BC7 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1BDC JUMPI PUSH2 0x1BD7 DUP3 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0x1C4C JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1C02 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1C44 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C3B SWAP2 SWAP1 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1C66 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CAA DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CC3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D0B DUP3 PUSH2 0x1CC9 JUMP JUMPDEST PUSH2 0x1D15 DUP2 DUP6 PUSH2 0x1CD3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D25 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x1D2E DUP2 PUSH2 0x1CF1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1D51 DUP2 DUP5 PUSH2 0x1D01 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1D66 DUP2 PUSH2 0x1C98 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D70 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D81 DUP2 PUSH2 0x1D5D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9C JUMPI PUSH2 0x1D9B PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1DA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DDB DUP3 PUSH2 0x1DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DEB DUP2 PUSH2 0x1DD1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DF5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E06 DUP2 PUSH2 0x1DE2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E22 JUMPI PUSH2 0x1E21 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E2F DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E40 DUP6 DUP3 DUP7 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E5E DUP2 PUSH2 0x1E4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E77 PUSH0 DUP4 ADD DUP5 PUSH2 0x1E55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E94 JUMPI PUSH2 0x1E93 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EA1 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1EB2 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1EC3 DUP7 DUP3 DUP8 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EE2 DUP2 PUSH2 0x1ECD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EFB PUSH0 DUP4 ADD DUP5 PUSH2 0x1ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1F0A DUP2 PUSH2 0x1DD1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F23 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F01 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F3E JUMPI PUSH2 0x1F3D PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F4B DUP5 DUP3 DUP6 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F6A JUMPI PUSH2 0x1F69 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F77 DUP6 DUP3 DUP7 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F88 DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1F9C DUP3 PUSH2 0x1DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FAC DUP2 PUSH2 0x1F92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FC5 PUSH0 DUP4 ADD DUP5 PUSH2 0x1FA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FE2 JUMPI PUSH2 0x1FE1 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1FEF DUP7 DUP3 DUP8 ADD PUSH2 0x1D73 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2000 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2011 DUP7 DUP3 DUP8 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2031 JUMPI PUSH2 0x2030 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x203E DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x204F DUP6 DUP3 DUP7 ADD PUSH2 0x1DF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2067 DUP2 PUSH2 0x1D5D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2082 JUMPI PUSH2 0x2081 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x208F DUP5 DUP3 DUP6 ADD PUSH2 0x2059 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x20DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20EF JUMPI PUSH2 0x20EE PUSH2 0x2098 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x212C DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x2137 DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x214F JUMPI PUSH2 0x214E PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x215F DUP3 PUSH2 0x1ECD JUMP JUMPDEST SWAP2 POP PUSH2 0x216A DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2193 DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x219E DUP4 PUSH2 0x1C98 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x21B6 JUMPI PUSH2 0x21B5 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x21CF PUSH0 DUP4 ADD DUP7 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x21DC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1CA1 JUMP JUMPDEST PUSH2 0x21E9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x2246 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x2222 JUMPI PUSH2 0x2221 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x2231 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x223F DUP6 PUSH2 0x21F1 JUMP JUMPDEST SWAP5 POP PUSH2 0x2206 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x225E JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x2319 JUMP JUMPDEST DUP2 PUSH2 0x226B JUMPI PUSH0 SWAP1 POP PUSH2 0x2319 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2281 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x228B JUMPI PUSH2 0x22BA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x2319 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x229D JUMPI PUSH2 0x229C PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x22B4 JUMPI PUSH2 0x22B3 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST POP PUSH2 0x2319 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x22EF JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x22EA JUMPI PUSH2 0x22E9 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST PUSH2 0x2319 JUMP JUMPDEST PUSH2 0x22FC DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x21FD JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x2313 JUMPI PUSH2 0x2312 PUSH2 0x20F5 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x232A DUP3 PUSH2 0x1C98 JUMP JUMPDEST SWAP2 POP PUSH2 0x2335 DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP PUSH2 0x2362 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x224F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x23AA PUSH0 DUP4 ADD DUP6 PUSH2 0x1CA1 JUMP JUMPDEST PUSH2 0x23B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x23D1 PUSH0 DUP4 ADD DUP6 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x23DE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x241C DUP3 PUSH2 0x1ECD JUMP JUMPDEST SWAP2 POP PUSH2 0x2427 DUP4 PUSH2 0x1ECD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2437 JUMPI PUSH2 0x2436 PUSH2 0x236A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2455 PUSH0 DUP4 ADD DUP7 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x2462 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0x246F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1CA1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2480 DUP2 PUSH2 0x1E4A JUMP JUMPDEST DUP2 EQ PUSH2 0x248A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x249B DUP2 PUSH2 0x2477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24B6 JUMPI PUSH2 0x24B5 PUSH2 0x1D59 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x24C3 DUP5 DUP3 DUP6 ADD PUSH2 0x248D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x24EA DUP3 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x24F4 DUP2 DUP6 PUSH2 0x24D6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2504 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1CE3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x251B DUP3 DUP5 PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 CALLER 0xF6 0xCB DUP4 SWAP4 BALANCE CALLER 0xAF 0xE6 LOG4 0xD4 0x2C SWAP13 0xDC BYTE CREATE2 SWAP7 0xC0 PUSH24 0x301B34C416913646670960B464736F6C6343000819003300 ",
							"sourceMap": "175:528:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5780:116:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6152:148:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1249:211:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:97:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5441:151:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5636:94;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6349:108;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1547:215:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7809:392:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:116:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;212:28:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8468:380:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3610:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;948:210:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8895:413:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9353:405;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;246:34:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6503:105:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5950:148;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6658:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6859:112;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3846:140:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;652:212:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5780:116:5;5832:7;5858:6;:16;;;5883:4;5858:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5851:38;;5780:116;:::o;2074:89:3:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;6152:148:5:-;6222:7;6248:45;6265:6;6273:19;6248:16;:45::i;:::-;6241:52;;6152:148;;;:::o;4293:186:3:-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;1249:211:2:-;1328:7;1347:11;1361:40;1371:6;1379:21;:19;:21::i;:::-;1361:9;:40::i;:::-;1347:54;;1418:35;1449:3;1440:6;:12;;;;:::i;:::-;1418:21;:35::i;:::-;1411:42;;;1249:211;;;:::o;3144:97:3:-;3196:7;3222:12;;3215:19;;3144:97;:::o;5039:244::-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;5441:151:5:-;5522:5;5568:17;:15;:17::i;:::-;5546:19;:39;;;;:::i;:::-;5539:46;;5441:151;:::o;5636:94::-;5682:7;5716:6;5701:22;;5636:94;:::o;6349:108::-;6407:7;6433:17;6426:24;;6349:108;;;:::o;1547:215:2:-;1624:7;1643:14;1660:27;1680:6;1660:19;:27::i;:::-;1643:44;;1713:42;1725:6;1733:21;:19;:21::i;:::-;1713:11;:42::i;:::-;1704:6;:51;;;;:::i;:::-;1697:58;;;1547:215;;;:::o;7809:392:5:-;7884:7;7903:17;7923:20;7934:8;7923:10;:20::i;:::-;7903:40;;7966:9;7957:6;:18;7953:110;;;8024:8;8034:6;8042:9;7998:54;;;;;;;;;;;;;:::i;:::-;;;;;;;;7953:110;8073:14;8090:22;8105:6;8090:14;:22::i;:::-;8073:39;;8122:48;8131:12;:10;:12::i;:::-;8145:8;8155:6;8163;8122:8;:48::i;:::-;8188:6;8181:13;;;;7809:392;;;;:::o;3299:116:3:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;212:28:12:-;;;;;;;;;;;;;:::o;8468:380:5:-;8540:7;8559:17;8579;8587:8;8579:7;:17::i;:::-;8559:37;;8619:9;8610:6;:18;8606:107;;;8674:8;8684:6;8692:9;8651:51;;;;;;;;;;;;;:::i;:::-;;;;;;;;8606:107;8723:14;8740:19;8752:6;8740:11;:19::i;:::-;8723:36;;8769:48;8778:12;:10;:12::i;:::-;8792:8;8802:6;8810;8769:8;:48::i;:::-;8835:6;8828:13;;;;8468:380;;;;:::o;2276:93:3:-;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;3610:178::-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;948:210:2:-;1023:7;1042:14;1059:25;1077:6;1059:17;:25::i;:::-;1042:42;;1110:41;1120:6;1128:22;:20;:22::i;:::-;1110:9;:41::i;:::-;1101:6;:50;;;;:::i;:::-;1094:57;;;948:210;;;:::o;8895:413:5:-;8986:7;9005:17;9025:18;9037:5;9025:11;:18::i;:::-;9005:38;;9066:9;9057:6;:18;9053:108;;;9125:5;9132:6;9140:9;9098:52;;;;;;;;;;;;;:::i;:::-;;;;;;;;9053:108;9171:14;9188:23;9204:6;9188:15;:23::i;:::-;9171:40;;9221:56;9231:12;:10;:12::i;:::-;9245:8;9255:5;9262:6;9270;9221:9;:56::i;:::-;9295:6;9288:13;;;;8895:413;;;;;:::o;9353:405::-;9442:7;9461:17;9481:16;9491:5;9481:9;:16::i;:::-;9461:36;;9520:9;9511:6;:18;9507:106;;;9577:5;9584:6;9592:9;9552:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;9507:106;9623:14;9640:21;9654:6;9640:13;:21::i;:::-;9623:38;;9671:56;9681:12;:10;:12::i;:::-;9695:8;9705:5;9712:6;9720;9671:9;:56::i;:::-;9745:6;9738:13;;;;9353:405;;;;;:::o;246:34:12:-;;;;:::o;6503:105:5:-;6558:7;6584:17;6577:24;;6503:105;;;:::o;5950:148::-;6020:7;6046:45;6063:6;6071:19;6046:16;:45::i;:::-;6039:52;;5950:148;;;:::o;6658:153::-;6723:7;6749:55;6766:16;6776:5;6766:9;:16::i;:::-;6784:19;6749:16;:55::i;:::-;6742:62;;6658:153;;;:::o;6859:112::-;6922:7;6948:16;6958:5;6948:9;:16::i;:::-;6941:23;;6859:112;;;:::o;3846:140:3:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;652:212:2:-;730:7;749:11;763:43;775:6;783:22;:20;:22::i;:::-;763:11;:43::i;:::-;749:57;;823:34;853:3;844:6;:12;;;;:::i;:::-;823:20;:34::i;:::-;816:41;;;652:212;;;:::o;10219:213:5:-;10316:7;10342:83;10372:1;10356:13;:11;:13::i;:::-;:17;;;;:::i;:::-;10397;:15;:17::i;:::-;10391:2;:23;;;;:::i;:::-;10375:13;:11;:13::i;:::-;:39;;;;:::i;:::-;10416:8;10342:6;:13;;:83;;;;;;:::i;:::-;10335:90;;10219:213;;;;:::o;656:96:10:-;709:7;735:10;728:17;;656:96;:::o;8989:128:3:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;3021::2:-;3083:7;3021:128;:::o;3665:183::-;3746:7;3772:69;3786:14;532:3;3822:18;3772:6;:13;;:69;;;;;;:::i;:::-;3765:76;;3665:183;;;;:::o;7418:147:5:-;7488:7;7514:44;7531:6;7539:18;7514:16;:44::i;:::-;7507:51;;7418:147;;;:::o;10663:477:3:-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;12313:90:5:-;12371:5;12313:90;:::o;7617:146::-;7685:7;7711:45;7728:6;7736:19;7711:16;:45::i;:::-;7704:52;;7617:146;;;:::o;4010:202:2:-;4093:7;4119:86;4133:14;532:3;4149:14;:35;;;;:::i;:::-;4186:18;4119:6;:13;;:86;;;;;;:::i;:::-;4112:93;;4010:202;;;;:::o;1846:426::-;1966:11;1980:43;1992:6;2000:22;:20;:22::i;:::-;1980:11;:43::i;:::-;1966:57;;2033:17;2053:20;:18;:20::i;:::-;2033:40;;2084:48;2099:6;2107:8;2117:6;2125;2084:14;:48::i;:::-;2153:1;2147:3;:7;:37;;;;;2179:4;2158:26;;:9;:26;;;;2147:37;2143:123;;;2200:55;2230:7;:5;:7::i;:::-;2240:9;2251:3;2200:22;:55::i;:::-;2143:123;1956:316;;1846:426;;;;:::o;7221:143:5:-;7287:7;7313:44;7330:6;7338:18;7313:16;:44::i;:::-;7306:51;;7221:143;;;:::o;479:116:12:-;543:7;569:19;;562:26;;479:116;:::o;2354:492:2:-;2536:11;2550:40;2560:6;2568:21;:19;:21::i;:::-;2550:9;:40::i;:::-;2536:54;;2600:17;2620:19;:17;:19::i;:::-;2600:39;;2650:56;2666:6;2674:8;2684:5;2691:6;2699;2650:15;:56::i;:::-;2727:1;2721:3;:7;:37;;;;;2753:4;2732:26;;:9;:26;;;;2721:37;2717:123;;;2774:55;2804:7;:5;:7::i;:::-;2814:9;2825:3;2774:22;:55::i;:::-;2717:123;2526:320;;2354:492;;;;;:::o;9882:213:5:-;9979:7;10005:83;10041:17;:15;:17::i;:::-;10035:2;:23;;;;:::i;:::-;10019:13;:11;:13::i;:::-;:39;;;;:::i;:::-;10076:1;10060:13;:11;:13::i;:::-;:17;;;;:::i;:::-;10079:8;10005:6;:13;;:83;;;;;;:::i;:::-;9998:90;;9882:213;;;;:::o;7024:147::-;7093:7;7119:45;7136:6;7144:19;7119:16;:45::i;:::-;7112:52;;7024:147;;;:::o;8051:302:11:-;8152:7;8171:14;8188:25;8195:1;8198;8201:11;8188:6;:25::i;:::-;8171:42;;8227:26;8244:8;8227:16;:26::i;:::-;:59;;;;;8285:1;8270:11;8257:25;;;;;:::i;:::-;;8267:1;8264;8257:25;:29;8227:59;8223:101;;;8312:1;8302:11;;;;;:::i;:::-;;;8223:101;8340:6;8333:13;;;8051:302;;;;;;:::o;9949:432:3:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;601:100:12:-;663:7;689:5;;;;;;;;;;;682:12;;601:100;:::o;10496:830:5:-;11164:65;11191:6;11199;11215:4;11222:6;11164:26;:65::i;:::-;11239:23;11245:8;11255:6;11239:5;:23::i;:::-;11294:8;11278:41;;11286:6;11278:41;;;11304:6;11312;11278:41;;;;;;;:::i;:::-;;;;;;;;10496:830;;;;:::o;1303:160:8:-;1385:71;1405:5;1427;:14;;;1444:2;1448:5;1412:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1385:19;:71::i;:::-;1303:160;;;:::o;3305:143:2:-;3365:7;3305:143;:::o;11393:914:5:-;11580:5;11570:15;;:6;:15;;;11566:84;;11601:38;11617:5;11624:6;11632;11601:15;:38::i;:::-;11566:84;12157:20;12163:5;12170:6;12157:5;:20::i;:::-;12187:48;12210:6;12218:8;12228:6;12187:22;:48::i;:::-;12278:5;12251:49;;12268:8;12251:49;;12260:6;12251:49;;;12285:6;12293;12251:49;;;;;;;:::i;:::-;;;;;;;;11393:914;;;;;:::o;3803:4116:11:-;3885:14;4232:13;4252:1;4248;:5;4232:21;;4312:13;4437:1;4433:6;4430:1;4427;4420:20;4493:5;4489:2;4486:13;4478:5;4474:2;4470:14;4466:34;4457:43;;4392:122;4604:1;4595:5;:10;4591:368;;4933:11;4925:5;:19;;;;;:::i;:::-;;;4918:26;;;;;;4591:368;5080:5;5065:11;:20;5061:88;;5112:22;;;;;;;;;;;;;;5061:88;5404:17;5539:11;5536:1;5533;5526:25;5513:38;;5667:5;5656:9;5653:20;5646:5;5642:32;5633:41;;5711:9;5704:5;5700:21;5691:30;;5939:12;5973:11;5969:1;:15;5954:11;:31;5939:46;;6105:4;6092:11;6088:22;6073:37;;6197:4;6190:5;6186:16;6177:25;;6354:1;6347:4;6340;6337:1;6333:12;6329:23;6325:31;6317:39;;6453:4;6445:5;:12;6436:21;;;;6775:15;6813:1;6798:11;6794:1;:15;6793:21;6775:39;;7060:7;7046:11;:21;7042:1;:25;7031:36;;;;7129:7;7115:11;:21;7111:1;:25;7100:36;;;;7199:7;7185:11;:21;7181:1;:25;7170:36;;;;7269:7;7255:11;:21;7251:1;:25;7240:36;;;;7339:7;7325:11;:21;7321:1;:25;7310:36;;;;7410:7;7396:11;:21;7392:1;:25;7381:36;;;;7868:7;7860:5;:15;7851:24;;7889:13;;;;;3803:4116;;;;;;:::o;14993:122::-;15061:4;15107:1;15102;15090:8;15084:15;;;;;;;;:::i;:::-;;:19;;;;:::i;:::-;:24;;;15077:31;;14993:122;;;:::o;1702:188:8:-;1802:81;1822:5;1844;:18;;;1865:4;1871:2;1875:5;1829:53;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1802:19;:81::i;:::-;1702:188;;;;:::o;7721:208:3:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;4059:629:8:-;4478:23;4504:33;4532:4;4512:5;4504:27;;;;:33;;;;:::i;:::-;4478:59;;4572:1;4551:10;:17;:22;;:57;;;;;4589:10;4578:30;;;;;;;;;;;;:::i;:::-;4577:31;4551:57;4547:135;;;4664:5;4631:40;;;;;;;;;;;:::i;:::-;;;;;;;;4547:135;4129:559;4059:629;;:::o;8247:206:3:-;8336:1;8317:21;;:7;:21;;;8313:89;;8388:1;8361:30;;;;;;;;;;;:::i;:::-;;;;;;;;8313:89;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;:::-;8247:206;;:::o;2705:151:9:-;2780:12;2811:38;2833:6;2841:4;2847:1;2811:21;:38::i;:::-;2804:45;;2705:151;;;;:::o;3180:392::-;3279:12;3331:5;3307:21;:29;3303:108;;;3394:4;3359:41;;;;;;;;;;;:::i;:::-;;;;;;;;3303:108;3421:12;3435:23;3462:6;:11;;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;:::-;3503:62;;;;3180:392;;;;;:::o;4625:582::-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:77:13;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:99::-;494:6;528:5;522:12;512:22;;442:99;;;:::o;547:169::-;631:11;665:6;660:3;653:19;705:4;700:3;696:14;681:29;;547:169;;;;:::o;722:139::-;811:6;806:3;801;795:23;852:1;843:6;838:3;834:16;827:27;722:139;;;:::o;867:102::-;908:6;959:2;955:7;950:2;943:5;939:14;935:28;925:38;;867:102;;;:::o;975:377::-;1063:3;1091:39;1124:5;1091:39;:::i;:::-;1146:71;1210:6;1205:3;1146:71;:::i;:::-;1139:78;;1226:65;1284:6;1279:3;1272:4;1265:5;1261:16;1226:65;:::i;:::-;1316:29;1338:6;1316:29;:::i;:::-;1311:3;1307:39;1300:46;;1067:285;975:377;;;;:::o;1358:313::-;1471:4;1509:2;1498:9;1494:18;1486:26;;1558:9;1552:4;1548:20;1544:1;1533:9;1529:17;1522:47;1586:78;1659:4;1650:6;1586:78;:::i;:::-;1578:86;;1358:313;;;;:::o;1758:117::-;1867:1;1864;1857:12;2004:122;2077:24;2095:5;2077:24;:::i;:::-;2070:5;2067:35;2057:63;;2116:1;2113;2106:12;2057:63;2004:122;:::o;2132:139::-;2178:5;2216:6;2203:20;2194:29;;2232:33;2259:5;2232:33;:::i;:::-;2132:139;;;;:::o;2277:329::-;2336:6;2385:2;2373:9;2364:7;2360:23;2356:32;2353:119;;;2391:79;;:::i;:::-;2353:119;2511:1;2536:53;2581:7;2572:6;2561:9;2557:22;2536:53;:::i;:::-;2526:63;;2482:117;2277:329;;;;:::o;2612:126::-;2649:7;2689:42;2682:5;2678:54;2667:65;;2612:126;;;:::o;2744:96::-;2781:7;2810:24;2828:5;2810:24;:::i;:::-;2799:35;;2744:96;;;:::o;2846:122::-;2919:24;2937:5;2919:24;:::i;:::-;2912:5;2909:35;2899:63;;2958:1;2955;2948:12;2899:63;2846:122;:::o;2974:139::-;3020:5;3058:6;3045:20;3036:29;;3074:33;3101:5;3074:33;:::i;:::-;2974:139;;;;:::o;3119:474::-;3187:6;3195;3244:2;3232:9;3223:7;3219:23;3215:32;3212:119;;;3250:79;;:::i;:::-;3212:119;3370:1;3395:53;3440:7;3431:6;3420:9;3416:22;3395:53;:::i;:::-;3385:63;;3341:117;3497:2;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3468:118;3119:474;;;;;:::o;3599:90::-;3633:7;3676:5;3669:13;3662:21;3651:32;;3599:90;;;:::o;3695:109::-;3776:21;3791:5;3776:21;:::i;:::-;3771:3;3764:34;3695:109;;:::o;3810:210::-;3897:4;3935:2;3924:9;3920:18;3912:26;;3948:65;4010:1;3999:9;3995:17;3986:6;3948:65;:::i;:::-;3810:210;;;;:::o;4026:619::-;4103:6;4111;4119;4168:2;4156:9;4147:7;4143:23;4139:32;4136:119;;;4174:79;;:::i;:::-;4136:119;4294:1;4319:53;4364:7;4355:6;4344:9;4340:22;4319:53;:::i;:::-;4309:63;;4265:117;4421:2;4447:53;4492:7;4483:6;4472:9;4468:22;4447:53;:::i;:::-;4437:63;;4392:118;4549:2;4575:53;4620:7;4611:6;4600:9;4596:22;4575:53;:::i;:::-;4565:63;;4520:118;4026:619;;;;;:::o;4651:86::-;4686:7;4726:4;4719:5;4715:16;4704:27;;4651:86;;;:::o;4743:112::-;4826:22;4842:5;4826:22;:::i;:::-;4821:3;4814:35;4743:112;;:::o;4861:214::-;4950:4;4988:2;4977:9;4973:18;4965:26;;5001:67;5065:1;5054:9;5050:17;5041:6;5001:67;:::i;:::-;4861:214;;;;:::o;5081:118::-;5168:24;5186:5;5168:24;:::i;:::-;5163:3;5156:37;5081:118;;:::o;5205:222::-;5298:4;5336:2;5325:9;5321:18;5313:26;;5349:71;5417:1;5406:9;5402:17;5393:6;5349:71;:::i;:::-;5205:222;;;;:::o;5433:329::-;5492:6;5541:2;5529:9;5520:7;5516:23;5512:32;5509:119;;;5547:79;;:::i;:::-;5509:119;5667:1;5692:53;5737:7;5728:6;5717:9;5713:22;5692:53;:::i;:::-;5682:63;;5638:117;5433:329;;;;:::o;5768:474::-;5836:6;5844;5893:2;5881:9;5872:7;5868:23;5864:32;5861:119;;;5899:79;;:::i;:::-;5861:119;6019:1;6044:53;6089:7;6080:6;6069:9;6065:22;6044:53;:::i;:::-;6034:63;;5990:117;6146:2;6172:53;6217:7;6208:6;6197:9;6193:22;6172:53;:::i;:::-;6162:63;;6117:118;5768:474;;;;;:::o;6248:104::-;6293:7;6322:24;6340:5;6322:24;:::i;:::-;6311:35;;6248:104;;;:::o;6358:142::-;6461:32;6487:5;6461:32;:::i;:::-;6456:3;6449:45;6358:142;;:::o;6506:254::-;6615:4;6653:2;6642:9;6638:18;6630:26;;6666:87;6750:1;6739:9;6735:17;6726:6;6666:87;:::i;:::-;6506:254;;;;:::o;6766:619::-;6843:6;6851;6859;6908:2;6896:9;6887:7;6883:23;6879:32;6876:119;;;6914:79;;:::i;:::-;6876:119;7034:1;7059:53;7104:7;7095:6;7084:9;7080:22;7059:53;:::i;:::-;7049:63;;7005:117;7161:2;7187:53;7232:7;7223:6;7212:9;7208:22;7187:53;:::i;:::-;7177:63;;7132:118;7289:2;7315:53;7360:7;7351:6;7340:9;7336:22;7315:53;:::i;:::-;7305:63;;7260:118;6766:619;;;;;:::o;7391:474::-;7459:6;7467;7516:2;7504:9;7495:7;7491:23;7487:32;7484:119;;;7522:79;;:::i;:::-;7484:119;7642:1;7667:53;7712:7;7703:6;7692:9;7688:22;7667:53;:::i;:::-;7657:63;;7613:117;7769:2;7795:53;7840:7;7831:6;7820:9;7816:22;7795:53;:::i;:::-;7785:63;;7740:118;7391:474;;;;;:::o;7871:143::-;7928:5;7959:6;7953:13;7944:22;;7975:33;8002:5;7975:33;:::i;:::-;7871:143;;;;:::o;8020:351::-;8090:6;8139:2;8127:9;8118:7;8114:23;8110:32;8107:119;;;8145:79;;:::i;:::-;8107:119;8265:1;8290:64;8346:7;8337:6;8326:9;8322:22;8290:64;:::i;:::-;8280:74;;8236:128;8020:351;;;;:::o;8377:180::-;8425:77;8422:1;8415:88;8522:4;8519:1;8512:15;8546:4;8543:1;8536:15;8563:320;8607:6;8644:1;8638:4;8634:12;8624:22;;8691:1;8685:4;8681:12;8712:18;8702:81;;8768:4;8760:6;8756:17;8746:27;;8702:81;8830:2;8822:6;8819:14;8799:18;8796:38;8793:84;;8849:18;;:::i;:::-;8793:84;8614:269;8563:320;;;:::o;8889:180::-;8937:77;8934:1;8927:88;9034:4;9031:1;9024:15;9058:4;9055:1;9048:15;9075:191;9115:3;9134:20;9152:1;9134:20;:::i;:::-;9129:25;;9168:20;9186:1;9168:20;:::i;:::-;9163:25;;9211:1;9208;9204:9;9197:16;;9232:3;9229:1;9226:10;9223:36;;;9239:18;;:::i;:::-;9223:36;9075:191;;;;:::o;9272:188::-;9310:3;9329:18;9345:1;9329:18;:::i;:::-;9324:23;;9361:18;9377:1;9361:18;:::i;:::-;9356:23;;9402:1;9399;9395:9;9388:16;;9425:4;9420:3;9417:13;9414:39;;;9433:18;;:::i;:::-;9414:39;9272:188;;;;:::o;9466:194::-;9506:4;9526:20;9544:1;9526:20;:::i;:::-;9521:25;;9560:20;9578:1;9560:20;:::i;:::-;9555:25;;9604:1;9601;9597:9;9589:17;;9628:1;9622:4;9619:11;9616:37;;;9633:18;;:::i;:::-;9616:37;9466:194;;;;:::o;9666:442::-;9815:4;9853:2;9842:9;9838:18;9830:26;;9866:71;9934:1;9923:9;9919:17;9910:6;9866:71;:::i;:::-;9947:72;10015:2;10004:9;10000:18;9991:6;9947:72;:::i;:::-;10029;10097:2;10086:9;10082:18;10073:6;10029:72;:::i;:::-;9666:442;;;;;;:::o;10114:102::-;10156:8;10203:5;10200:1;10196:13;10175:34;;10114:102;;;:::o;10222:848::-;10283:5;10290:4;10314:6;10305:15;;10338:5;10329:14;;10352:712;10373:1;10363:8;10360:15;10352:712;;;10468:4;10463:3;10459:14;10453:4;10450:24;10447:50;;;10477:18;;:::i;:::-;10447:50;10527:1;10517:8;10513:16;10510:451;;;10942:4;10935:5;10931:16;10922:25;;10510:451;10992:4;10986;10982:15;10974:23;;11022:32;11045:8;11022:32;:::i;:::-;11010:44;;10352:712;;;10222:848;;;;;;;:::o;11076:1073::-;11130:5;11321:8;11311:40;;11342:1;11333:10;;11344:5;;11311:40;11370:4;11360:36;;11387:1;11378:10;;11389:5;;11360:36;11456:4;11504:1;11499:27;;;;11540:1;11535:191;;;;11449:277;;11499:27;11517:1;11508:10;;11519:5;;;11535:191;11580:3;11570:8;11567:17;11564:43;;;11587:18;;:::i;:::-;11564:43;11636:8;11633:1;11629:16;11620:25;;11671:3;11664:5;11661:14;11658:40;;;11678:18;;:::i;:::-;11658:40;11711:5;;;11449:277;;11835:2;11825:8;11822:16;11816:3;11810:4;11807:13;11803:36;11785:2;11775:8;11772:16;11767:2;11761:4;11758:12;11754:35;11738:111;11735:246;;;11891:8;11885:4;11881:19;11872:28;;11926:3;11919:5;11916:14;11913:40;;;11933:18;;:::i;:::-;11913:40;11966:5;;11735:246;12006:42;12044:3;12034:8;12028:4;12025:1;12006:42;:::i;:::-;11991:57;;;;12080:4;12075:3;12071:14;12064:5;12061:25;12058:51;;;12089:18;;:::i;:::-;12058:51;12138:4;12131:5;12127:16;12118:25;;11076:1073;;;;;;:::o;12155:281::-;12213:5;12237:23;12255:4;12237:23;:::i;:::-;12229:31;;12281:25;12297:8;12281:25;:::i;:::-;12269:37;;12325:104;12362:66;12352:8;12346:4;12325:104;:::i;:::-;12316:113;;12155:281;;;;:::o;12442:180::-;12490:77;12487:1;12480:88;12587:4;12584:1;12577:15;12611:4;12608:1;12601:15;12628:332;12749:4;12787:2;12776:9;12772:18;12764:26;;12800:71;12868:1;12857:9;12853:17;12844:6;12800:71;:::i;:::-;12881:72;12949:2;12938:9;12934:18;12925:6;12881:72;:::i;:::-;12628:332;;;;;:::o;12966:::-;13087:4;13125:2;13114:9;13110:18;13102:26;;13138:71;13206:1;13195:9;13191:17;13182:6;13138:71;:::i;:::-;13219:72;13287:2;13276:9;13272:18;13263:6;13219:72;:::i;:::-;12966:332;;;;;:::o;13304:180::-;13352:77;13349:1;13342:88;13449:4;13446:1;13439:15;13473:4;13470:1;13463:15;13490:170;13520:1;13537:18;13553:1;13537:18;:::i;:::-;13532:23;;13569:18;13585:1;13569:18;:::i;:::-;13564:23;;13606:1;13596:35;;13611:18;;:::i;:::-;13596:35;13652:1;13649;13645:9;13640:14;;13490:170;;;;:::o;13666:442::-;13815:4;13853:2;13842:9;13838:18;13830:26;;13866:71;13934:1;13923:9;13919:17;13910:6;13866:71;:::i;:::-;13947:72;14015:2;14004:9;14000:18;13991:6;13947:72;:::i;:::-;14029;14097:2;14086:9;14082:18;14073:6;14029:72;:::i;:::-;13666:442;;;;;;:::o;14114:116::-;14184:21;14199:5;14184:21;:::i;:::-;14177:5;14174:32;14164:60;;14220:1;14217;14210:12;14164:60;14114:116;:::o;14236:137::-;14290:5;14321:6;14315:13;14306:22;;14337:30;14361:5;14337:30;:::i;:::-;14236:137;;;;:::o;14379:345::-;14446:6;14495:2;14483:9;14474:7;14470:23;14466:32;14463:119;;;14501:79;;:::i;:::-;14463:119;14621:1;14646:61;14699:7;14690:6;14679:9;14675:22;14646:61;:::i;:::-;14636:71;;14592:125;14379:345;;;;:::o;14730:98::-;14781:6;14815:5;14809:12;14799:22;;14730:98;;;:::o;14834:147::-;14935:11;14972:3;14957:18;;14834:147;;;;:::o;14987:386::-;15091:3;15119:38;15151:5;15119:38;:::i;:::-;15173:88;15254:6;15249:3;15173:88;:::i;:::-;15166:95;;15270:65;15328:6;15323:3;15316:4;15309:5;15305:16;15270:65;:::i;:::-;15360:6;15355:3;15351:16;15344:23;;15095:278;14987:386;;;;:::o;15379:271::-;15509:3;15531:93;15620:3;15611:6;15531:93;:::i;:::-;15524:100;;15641:3;15634:10;;15379:271;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1912800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"asset()": "infinite",
								"balanceOf(address)": "2940",
								"convertToAssets(uint256)": "infinite",
								"convertToShares(uint256)": "infinite",
								"decimals()": "infinite",
								"deposit(uint256,address)": "infinite",
								"entryFeeBasisPoints()": "2470",
								"maxDeposit(address)": "686",
								"maxMint(address)": "708",
								"maxRedeem(address)": "2937",
								"maxWithdraw(address)": "infinite",
								"mint(uint256,address)": "infinite",
								"name()": "infinite",
								"owner()": "2554",
								"previewDeposit(uint256)": "infinite",
								"previewMint(uint256)": "infinite",
								"previewRedeem(uint256)": "infinite",
								"previewWithdraw(uint256)": "infinite",
								"redeem(uint256,address,address)": "infinite",
								"symbol()": "infinite",
								"totalAssets()": "infinite",
								"totalSupply()": "2566",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"withdraw(uint256,address,address)": "infinite"
							},
							"internal": {
								"_entryFeeBasisPoints()": "2122",
								"_entryFeeRecipient()": "2157"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "C0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 287,
									"end": 473,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 287,
									"end": 473,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 344,
									"end": 350,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "F"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "42726F6B656E204D616E20486F6C650000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "76424D4800000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 4203,
									"end": 4215,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4217,
									"end": 4236,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4261,
									"end": 4267,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "SHR",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4307,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4326,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4310,
									"end": 4323,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4347,
									"end": 4353,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4165,
									"end": 4360,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 411,
									"end": 421,
									"modifierDepth": 2,
									"name": "CALLER",
									"source": 12
								},
								{
									"begin": 395,
									"end": 400,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 395,
									"end": 400,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "EXP",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 395,
									"end": 422,
									"modifierDepth": 2,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 454,
									"end": 466,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 432,
									"end": 451,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 432,
									"end": 466,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 432,
									"end": 466,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 432,
									"end": 466,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 432,
									"end": 466,
									"modifierDepth": 2,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 287,
									"end": 473,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4570,
									"end": 4574,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4576,
									"end": 4581,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4594,
									"end": 4606,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4608,
									"end": 4636,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4648,
									"end": 4654,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "313CE567"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "E0"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP6",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "GAS",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "STATICCALL",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "1F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "3F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATACOPY",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 5,
									"value": "60"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 5,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4754,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4784,
									"end": 4786,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4758,
									"end": 4773,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4780,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "tag",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4826,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4840,
									"end": 4855,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "27"
								},
								{
									"begin": 4829,
									"end": 4867,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "tag",
									"source": 5,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4905,
									"end": 4920,
									"name": "PUSH",
									"source": 5,
									"value": "FF"
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4901,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4948,
									"end": 4952,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 4960,
									"end": 4976,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "tag",
									"source": 5,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4788,
									"end": 5003,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "tag",
									"source": 5,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 5020,
									"end": 5025,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 5027,
									"end": 5028,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "69"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 13,
									"value": "69"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 568,
									"end": 679,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 568,
									"end": 679,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 620,
									"end": 627,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 649,
									"end": 673,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "71"
								},
								{
									"begin": 667,
									"end": 672,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 649,
									"end": 673,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 649,
									"end": 673,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 649,
									"end": 673,
									"name": "tag",
									"source": 13,
									"value": "71"
								},
								{
									"begin": 649,
									"end": 673,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 638,
									"end": 673,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 638,
									"end": 673,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 568,
									"end": 679,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 568,
									"end": 679,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 568,
									"end": 679,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 568,
									"end": 679,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 685,
									"end": 837,
									"name": "tag",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 685,
									"end": 837,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 773,
									"end": 812,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 806,
									"end": 811,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 773,
									"end": 812,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 773,
									"end": 812,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 773,
									"end": 812,
									"name": "tag",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 773,
									"end": 812,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 766,
									"end": 771,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 763,
									"end": 813,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 753,
									"end": 831,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "74"
								},
								{
									"begin": 753,
									"end": 831,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 827,
									"end": 828,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 824,
									"end": 825,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 817,
									"end": 829,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 753,
									"end": 831,
									"name": "tag",
									"source": 13,
									"value": "74"
								},
								{
									"begin": 753,
									"end": 831,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 685,
									"end": 837,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 685,
									"end": 837,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "tag",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 915,
									"end": 920,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 946,
									"end": 952,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 940,
									"end": 953,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 931,
									"end": 953,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 931,
									"end": 953,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 962,
									"end": 1010,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "76"
								},
								{
									"begin": 1004,
									"end": 1009,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 962,
									"end": 1010,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "35"
								},
								{
									"begin": 962,
									"end": 1010,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 962,
									"end": 1010,
									"name": "tag",
									"source": 13,
									"value": "76"
								},
								{
									"begin": 962,
									"end": 1010,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 843,
									"end": 1016,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1022,
									"end": 1099,
									"name": "tag",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 1022,
									"end": 1099,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1059,
									"end": 1066,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1088,
									"end": 1093,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1077,
									"end": 1093,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1077,
									"end": 1093,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1022,
									"end": 1099,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1022,
									"end": 1099,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1022,
									"end": 1099,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1022,
									"end": 1099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1105,
									"end": 1227,
									"name": "tag",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1105,
									"end": 1227,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1178,
									"end": 1202,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "79"
								},
								{
									"begin": 1196,
									"end": 1201,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1178,
									"end": 1202,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 1178,
									"end": 1202,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1178,
									"end": 1202,
									"name": "tag",
									"source": 13,
									"value": "79"
								},
								{
									"begin": 1178,
									"end": 1202,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1171,
									"end": 1176,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1168,
									"end": 1203,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 1158,
									"end": 1221,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1158,
									"end": 1221,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1217,
									"end": 1218,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1214,
									"end": 1215,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1207,
									"end": 1219,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1158,
									"end": 1221,
									"name": "tag",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1158,
									"end": 1221,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1105,
									"end": 1227,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1105,
									"end": 1227,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "tag",
									"source": 13,
									"value": "39"
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1290,
									"end": 1295,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1321,
									"end": 1327,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1315,
									"end": 1328,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1306,
									"end": 1328,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1306,
									"end": 1328,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1337,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "82"
								},
								{
									"begin": 1364,
									"end": 1369,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1337,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1337,
									"end": 1370,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1337,
									"end": 1370,
									"name": "tag",
									"source": 13,
									"value": "82"
								},
								{
									"begin": 1337,
									"end": 1370,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1233,
									"end": 1376,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "tag",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1476,
									"end": 1482,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1484,
									"end": 1490,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1533,
									"end": 1535,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1521,
									"end": 1530,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1512,
									"end": 1519,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1508,
									"end": 1531,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1504,
									"end": 1536,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 1501,
									"end": 1620,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1501,
									"end": 1620,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "84"
								},
								{
									"begin": 1501,
									"end": 1620,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1539,
									"end": 1618,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "85"
								},
								{
									"begin": 1539,
									"end": 1618,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 1539,
									"end": 1618,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1539,
									"end": 1618,
									"name": "tag",
									"source": 13,
									"value": "85"
								},
								{
									"begin": 1539,
									"end": 1618,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1501,
									"end": 1620,
									"name": "tag",
									"source": 13,
									"value": "84"
								},
								{
									"begin": 1501,
									"end": 1620,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1659,
									"end": 1660,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1684,
									"end": 1763,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "86"
								},
								{
									"begin": 1755,
									"end": 1762,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1746,
									"end": 1752,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1735,
									"end": 1744,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1731,
									"end": 1753,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1684,
									"end": 1763,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 1684,
									"end": 1763,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1684,
									"end": 1763,
									"name": "tag",
									"source": 13,
									"value": "86"
								},
								{
									"begin": 1684,
									"end": 1763,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1674,
									"end": 1763,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1674,
									"end": 1763,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1630,
									"end": 1773,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1812,
									"end": 1814,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1838,
									"end": 1902,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "87"
								},
								{
									"begin": 1894,
									"end": 1901,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1885,
									"end": 1891,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1874,
									"end": 1883,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1870,
									"end": 1892,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1838,
									"end": 1902,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "39"
								},
								{
									"begin": 1838,
									"end": 1902,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1838,
									"end": 1902,
									"name": "tag",
									"source": 13,
									"value": "87"
								},
								{
									"begin": 1838,
									"end": 1902,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1828,
									"end": 1902,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1828,
									"end": 1902,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1783,
									"end": 1912,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1382,
									"end": 1919,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1925,
									"end": 2024,
									"name": "tag",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1925,
									"end": 2024,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1977,
									"end": 1983,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2011,
									"end": 2016,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2005,
									"end": 2017,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1995,
									"end": 2017,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1995,
									"end": 2017,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1925,
									"end": 2024,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1925,
									"end": 2024,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1925,
									"end": 2024,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1925,
									"end": 2024,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2030,
									"end": 2210,
									"name": "tag",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 2030,
									"end": 2210,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2078,
									"end": 2155,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2075,
									"end": 2076,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2068,
									"end": 2156,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2175,
									"end": 2179,
									"name": "PUSH",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 2172,
									"end": 2173,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 2165,
									"end": 2180,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2199,
									"end": 2203,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 2196,
									"end": 2197,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2189,
									"end": 2204,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 2216,
									"end": 2396,
									"name": "tag",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 2216,
									"end": 2396,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2264,
									"end": 2341,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2261,
									"end": 2262,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2254,
									"end": 2342,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2361,
									"end": 2365,
									"name": "PUSH",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 2358,
									"end": 2359,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 2351,
									"end": 2366,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2385,
									"end": 2389,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 2382,
									"end": 2383,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2375,
									"end": 2390,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 2402,
									"end": 2722,
									"name": "tag",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 2402,
									"end": 2722,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2446,
									"end": 2452,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 2477,
									"end": 2481,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2473,
									"end": 2485,
									"name": "DIV",
									"source": 13
								},
								{
									"begin": 2463,
									"end": 2485,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2463,
									"end": 2485,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2530,
									"end": 2531,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 2524,
									"end": 2528,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2520,
									"end": 2532,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 2551,
									"end": 2569,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 2541,
									"end": 2622,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "92"
								},
								{
									"begin": 2541,
									"end": 2622,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 2607,
									"end": 2611,
									"name": "PUSH",
									"source": 13,
									"value": "7F"
								},
								{
									"begin": 2599,
									"end": 2605,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2595,
									"end": 2612,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2585,
									"end": 2612,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2541,
									"end": 2622,
									"name": "tag",
									"source": 13,
									"value": "92"
								},
								{
									"begin": 2541,
									"end": 2622,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2669,
									"end": 2671,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2661,
									"end": 2667,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2658,
									"end": 2672,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 2638,
									"end": 2656,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2635,
									"end": 2673,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 2632,
									"end": 2716,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "93"
								},
								{
									"begin": 2632,
									"end": 2716,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 2688,
									"end": 2706,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "94"
								},
								{
									"begin": 2688,
									"end": 2706,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 2688,
									"end": 2706,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2688,
									"end": 2706,
									"name": "tag",
									"source": 13,
									"value": "94"
								},
								{
									"begin": 2688,
									"end": 2706,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2632,
									"end": 2716,
									"name": "tag",
									"source": 13,
									"value": "93"
								},
								{
									"begin": 2632,
									"end": 2716,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2453,
									"end": 2722,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2402,
									"end": 2722,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2402,
									"end": 2722,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2402,
									"end": 2722,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2402,
									"end": 2722,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2728,
									"end": 2869,
									"name": "tag",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 2728,
									"end": 2869,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2777,
									"end": 2781,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2800,
									"end": 2803,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2792,
									"end": 2803,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2792,
									"end": 2803,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2823,
									"end": 2826,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2820,
									"end": 2821,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2813,
									"end": 2827,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2857,
									"end": 2861,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2854,
									"end": 2855,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2844,
									"end": 2862,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 2836,
									"end": 2862,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2836,
									"end": 2862,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2728,
									"end": 2869,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2728,
									"end": 2869,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2728,
									"end": 2869,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2728,
									"end": 2869,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2875,
									"end": 2968,
									"name": "tag",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 2875,
									"end": 2968,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2912,
									"end": 2918,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2959,
									"end": 2961,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2954,
									"end": 2956,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 2947,
									"end": 2952,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 2943,
									"end": 2957,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2939,
									"end": 2962,
									"name": "DIV",
									"source": 13
								},
								{
									"begin": 2929,
									"end": 2962,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2929,
									"end": 2962,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2875,
									"end": 2968,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2875,
									"end": 2968,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2875,
									"end": 2968,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2875,
									"end": 2968,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "tag",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3018,
									"end": 3026,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3068,
									"end": 3073,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3062,
									"end": 3066,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3058,
									"end": 3074,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3037,
									"end": 3074,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3037,
									"end": 3074,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2974,
									"end": 3081,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "tag",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3156,
									"end": 3162,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3206,
									"end": 3207,
									"name": "PUSH",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 3194,
									"end": 3204,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3190,
									"end": 3208,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 3229,
									"end": 3326,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "99"
								},
								{
									"begin": 3259,
									"end": 3325,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3248,
									"end": 3257,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3229,
									"end": 3326,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 3229,
									"end": 3326,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3229,
									"end": 3326,
									"name": "tag",
									"source": 13,
									"value": "99"
								},
								{
									"begin": 3229,
									"end": 3326,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3347,
									"end": 3386,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3377,
									"end": 3385,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 3366,
									"end": 3375,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3347,
									"end": 3386,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 3347,
									"end": 3386,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3347,
									"end": 3386,
									"name": "tag",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3347,
									"end": 3386,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3335,
									"end": 3386,
									"name": "SWAP6",
									"source": 13
								},
								{
									"begin": 3335,
									"end": 3386,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3419,
									"end": 3423,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3415,
									"end": 3424,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 3408,
									"end": 3413,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3404,
									"end": 3425,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 3395,
									"end": 3425,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 3395,
									"end": 3425,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3468,
									"end": 3472,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3458,
									"end": 3466,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 3454,
									"end": 3473,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 3447,
									"end": 3452,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3444,
									"end": 3474,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 3434,
									"end": 3474,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 3434,
									"end": 3474,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3163,
									"end": 3480,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3163,
									"end": 3480,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3087,
									"end": 3480,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3486,
									"end": 3546,
									"name": "tag",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 3486,
									"end": 3546,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3514,
									"end": 3517,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3535,
									"end": 3540,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3528,
									"end": 3540,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3528,
									"end": 3540,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3486,
									"end": 3546,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3486,
									"end": 3546,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3486,
									"end": 3546,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3486,
									"end": 3546,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3552,
									"end": 3694,
									"name": "tag",
									"source": 13,
									"value": "49"
								},
								{
									"begin": 3552,
									"end": 3694,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3602,
									"end": 3611,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3635,
									"end": 3688,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "103"
								},
								{
									"begin": 3653,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "104"
								},
								{
									"begin": 3662,
									"end": 3686,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "105"
								},
								{
									"begin": 3680,
									"end": 3685,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3662,
									"end": 3686,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 3662,
									"end": 3686,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3662,
									"end": 3686,
									"name": "tag",
									"source": 13,
									"value": "105"
								},
								{
									"begin": 3662,
									"end": 3686,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3653,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 3653,
									"end": 3687,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3653,
									"end": 3687,
									"name": "tag",
									"source": 13,
									"value": "104"
								},
								{
									"begin": 3653,
									"end": 3687,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3635,
									"end": 3688,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 3635,
									"end": 3688,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3635,
									"end": 3688,
									"name": "tag",
									"source": 13,
									"value": "103"
								},
								{
									"begin": 3635,
									"end": 3688,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3622,
									"end": 3688,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3622,
									"end": 3688,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3552,
									"end": 3694,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3552,
									"end": 3694,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3552,
									"end": 3694,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3552,
									"end": 3694,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3700,
									"end": 3775,
									"name": "tag",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 3700,
									"end": 3775,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3743,
									"end": 3746,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3764,
									"end": 3769,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3757,
									"end": 3769,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3757,
									"end": 3769,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3700,
									"end": 3775,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3700,
									"end": 3775,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3700,
									"end": 3775,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3700,
									"end": 3775,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3781,
									"end": 4050,
									"name": "tag",
									"source": 13,
									"value": "51"
								},
								{
									"begin": 3781,
									"end": 4050,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3891,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "108"
								},
								{
									"begin": 3922,
									"end": 3929,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3891,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "49"
								},
								{
									"begin": 3891,
									"end": 3930,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3891,
									"end": 3930,
									"name": "tag",
									"source": 13,
									"value": "108"
								},
								{
									"begin": 3891,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3952,
									"end": 4043,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "109"
								},
								{
									"begin": 4001,
									"end": 4042,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "110"
								},
								{
									"begin": 4025,
									"end": 4041,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4001,
									"end": 4042,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 4001,
									"end": 4042,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4001,
									"end": 4042,
									"name": "tag",
									"source": 13,
									"value": "110"
								},
								{
									"begin": 4001,
									"end": 4042,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3993,
									"end": 3999,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3986,
									"end": 3990,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3980,
									"end": 3991,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 3952,
									"end": 4043,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 3952,
									"end": 4043,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3952,
									"end": 4043,
									"name": "tag",
									"source": 13,
									"value": "109"
								},
								{
									"begin": 3952,
									"end": 4043,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3946,
									"end": 3950,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3939,
									"end": 4044,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 3857,
									"end": 4050,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3781,
									"end": 4050,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3781,
									"end": 4050,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3781,
									"end": 4050,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3781,
									"end": 4050,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4056,
									"end": 4129,
									"name": "tag",
									"source": 13,
									"value": "52"
								},
								{
									"begin": 4056,
									"end": 4129,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4101,
									"end": 4104,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4056,
									"end": 4129,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4056,
									"end": 4129,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4135,
									"end": 4324,
									"name": "tag",
									"source": 13,
									"value": "53"
								},
								{
									"begin": 4135,
									"end": 4324,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4212,
									"end": 4244,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "113"
								},
								{
									"begin": 4212,
									"end": 4244,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "52"
								},
								{
									"begin": 4212,
									"end": 4244,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4212,
									"end": 4244,
									"name": "tag",
									"source": 13,
									"value": "113"
								},
								{
									"begin": 4212,
									"end": 4244,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4253,
									"end": 4318,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "114"
								},
								{
									"begin": 4311,
									"end": 4317,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4303,
									"end": 4309,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4297,
									"end": 4301,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4253,
									"end": 4318,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "51"
								},
								{
									"begin": 4253,
									"end": 4318,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4253,
									"end": 4318,
									"name": "tag",
									"source": 13,
									"value": "114"
								},
								{
									"begin": 4253,
									"end": 4318,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4188,
									"end": 4324,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4135,
									"end": 4324,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4135,
									"end": 4324,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4135,
									"end": 4324,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4330,
									"end": 4516,
									"name": "tag",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 4330,
									"end": 4516,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "tag",
									"source": 13,
									"value": "116"
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4407,
									"end": 4410,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4400,
									"end": 4405,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4397,
									"end": 4411,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "118"
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 4461,
									"end": 4500,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "119"
								},
								{
									"begin": 4498,
									"end": 4499,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4491,
									"end": 4496,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4461,
									"end": 4500,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "53"
								},
								{
									"begin": 4461,
									"end": 4500,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4461,
									"end": 4500,
									"name": "tag",
									"source": 13,
									"value": "119"
								},
								{
									"begin": 4461,
									"end": 4500,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4434,
									"end": 4435,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 4427,
									"end": 4432,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4423,
									"end": 4436,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4414,
									"end": 4436,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4414,
									"end": 4436,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "116"
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "tag",
									"source": 13,
									"value": "118"
								},
								{
									"begin": 4390,
									"end": 4510,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4330,
									"end": 4516,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4330,
									"end": 4516,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4330,
									"end": 4516,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4522,
									"end": 5065,
									"name": "tag",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 4522,
									"end": 5065,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4623,
									"end": 4625,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 4618,
									"end": 4621,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4615,
									"end": 4626,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 4612,
									"end": 5058,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 4612,
									"end": 5058,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "121"
								},
								{
									"begin": 4612,
									"end": 5058,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 4657,
									"end": 4695,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "122"
								},
								{
									"begin": 4689,
									"end": 4694,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4657,
									"end": 4695,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 4657,
									"end": 4695,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4657,
									"end": 4695,
									"name": "tag",
									"source": 13,
									"value": "122"
								},
								{
									"begin": 4657,
									"end": 4695,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4741,
									"end": 4770,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "123"
								},
								{
									"begin": 4759,
									"end": 4769,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 4741,
									"end": 4770,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 4741,
									"end": 4770,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4741,
									"end": 4770,
									"name": "tag",
									"source": 13,
									"value": "123"
								},
								{
									"begin": 4741,
									"end": 4770,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4731,
									"end": 4739,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4727,
									"end": 4771,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4924,
									"end": 4926,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 4912,
									"end": 4922,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 4909,
									"end": 4927,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 4906,
									"end": 4955,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 4906,
									"end": 4955,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "124"
								},
								{
									"begin": 4906,
									"end": 4955,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 4945,
									"end": 4953,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4930,
									"end": 4953,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4930,
									"end": 4953,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4906,
									"end": 4955,
									"name": "tag",
									"source": 13,
									"value": "124"
								},
								{
									"begin": 4906,
									"end": 4955,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4968,
									"end": 5048,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "125"
								},
								{
									"begin": 5024,
									"end": 5046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "126"
								},
								{
									"begin": 5042,
									"end": 5045,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 5024,
									"end": 5046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 5024,
									"end": 5046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5024,
									"end": 5046,
									"name": "tag",
									"source": 13,
									"value": "126"
								},
								{
									"begin": 5024,
									"end": 5046,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5014,
									"end": 5022,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5010,
									"end": 5047,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4997,
									"end": 5008,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4968,
									"end": 5048,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 4968,
									"end": 5048,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4968,
									"end": 5048,
									"name": "tag",
									"source": 13,
									"value": "125"
								},
								{
									"begin": 4968,
									"end": 5048,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4627,
									"end": 5058,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4627,
									"end": 5058,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4612,
									"end": 5058,
									"name": "tag",
									"source": 13,
									"value": "121"
								},
								{
									"begin": 4612,
									"end": 5058,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 4522,
									"end": 5065,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4522,
									"end": 5065,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4522,
									"end": 5065,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4522,
									"end": 5065,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "tag",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5125,
									"end": 5133,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5175,
									"end": 5180,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5169,
									"end": 5173,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5165,
									"end": 5181,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 5144,
									"end": 5181,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 5144,
									"end": 5181,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5071,
									"end": 5188,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "tag",
									"source": 13,
									"value": "57"
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5238,
									"end": 5244,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5271,
									"end": 5322,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "129"
								},
								{
									"begin": 5319,
									"end": 5320,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5315,
									"end": 5321,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 5307,
									"end": 5312,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 5304,
									"end": 5305,
									"name": "PUSH",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 5300,
									"end": 5313,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 5271,
									"end": 5322,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 5271,
									"end": 5322,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5271,
									"end": 5322,
									"name": "tag",
									"source": 13,
									"value": "129"
								},
								{
									"begin": 5271,
									"end": 5322,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5267,
									"end": 5323,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 5352,
									"end": 5356,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 5346,
									"end": 5350,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5342,
									"end": 5357,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 5332,
									"end": 5357,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5332,
									"end": 5357,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5245,
									"end": 5363,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5194,
									"end": 5363,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "tag",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5444,
									"end": 5448,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 5590,
									"end": 5619,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "131"
								},
								{
									"begin": 5615,
									"end": 5618,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5609,
									"end": 5613,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 5590,
									"end": 5619,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "57"
								},
								{
									"begin": 5590,
									"end": 5619,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5590,
									"end": 5619,
									"name": "tag",
									"source": 13,
									"value": "131"
								},
								{
									"begin": 5590,
									"end": 5619,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5582,
									"end": 5619,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5582,
									"end": 5619,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5652,
									"end": 5655,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5649,
									"end": 5650,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 5645,
									"end": 5656,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 5639,
									"end": 5643,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5636,
									"end": 5657,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 5628,
									"end": 5657,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 5628,
									"end": 5657,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5368,
									"end": 5663,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5668,
									"end": 7063,
									"name": "tag",
									"source": 13,
									"value": "9"
								},
								{
									"begin": 5668,
									"end": 7063,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5785,
									"end": 5822,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "133"
								},
								{
									"begin": 5818,
									"end": 5821,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5785,
									"end": 5822,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 5785,
									"end": 5822,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5785,
									"end": 5822,
									"name": "tag",
									"source": 13,
									"value": "133"
								},
								{
									"begin": 5785,
									"end": 5822,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5887,
									"end": 5905,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5879,
									"end": 5885,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 5876,
									"end": 5906,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 5873,
									"end": 5929,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 5873,
									"end": 5929,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "134"
								},
								{
									"begin": 5873,
									"end": 5929,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 5909,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "135"
								},
								{
									"begin": 5909,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 5909,
									"end": 5927,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5909,
									"end": 5927,
									"name": "tag",
									"source": 13,
									"value": "135"
								},
								{
									"begin": 5909,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5873,
									"end": 5929,
									"name": "tag",
									"source": 13,
									"value": "134"
								},
								{
									"begin": 5873,
									"end": 5929,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 5953,
									"end": 5991,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "136"
								},
								{
									"begin": 5985,
									"end": 5989,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 5979,
									"end": 5990,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 5953,
									"end": 5991,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 5953,
									"end": 5991,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 5953,
									"end": 5991,
									"name": "tag",
									"source": 13,
									"value": "136"
								},
								{
									"begin": 5953,
									"end": 5991,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6038,
									"end": 6105,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "137"
								},
								{
									"begin": 6098,
									"end": 6104,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6090,
									"end": 6096,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6084,
									"end": 6088,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 6038,
									"end": 6105,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 6038,
									"end": 6105,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6038,
									"end": 6105,
									"name": "tag",
									"source": 13,
									"value": "137"
								},
								{
									"begin": 6038,
									"end": 6105,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6132,
									"end": 6133,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6156,
									"end": 6160,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 6143,
									"end": 6160,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6143,
									"end": 6160,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6188,
									"end": 6190,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 6180,
									"end": 6186,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6177,
									"end": 6191,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 6205,
									"end": 6206,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "139"
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6862,
									"end": 6863,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6879,
									"end": 6885,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6876,
									"end": 6953,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 6876,
									"end": 6953,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "140"
								},
								{
									"begin": 6876,
									"end": 6953,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6928,
									"end": 6937,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6923,
									"end": 6926,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 6919,
									"end": 6938,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6913,
									"end": 6939,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6904,
									"end": 6939,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6904,
									"end": 6939,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6876,
									"end": 6953,
									"name": "tag",
									"source": 13,
									"value": "140"
								},
								{
									"begin": 6876,
									"end": 6953,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6979,
									"end": 7046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "141"
								},
								{
									"begin": 7039,
									"end": 7045,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 7032,
									"end": 7037,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6979,
									"end": 7046,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 6979,
									"end": 7046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6979,
									"end": 7046,
									"name": "tag",
									"source": 13,
									"value": "141"
								},
								{
									"begin": 6979,
									"end": 7046,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6973,
									"end": 6977,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 6966,
									"end": 7047,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 6835,
									"end": 7057,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6170,
									"end": 7057,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "138"
								},
								{
									"begin": 6170,
									"end": 7057,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "tag",
									"source": 13,
									"value": "139"
								},
								{
									"begin": 6200,
									"end": 6818,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6252,
									"end": 6256,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 6248,
									"end": 6257,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 6240,
									"end": 6246,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6236,
									"end": 6258,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 6286,
									"end": 6323,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "142"
								},
								{
									"begin": 6318,
									"end": 6322,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 6286,
									"end": 6323,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 6286,
									"end": 6323,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6286,
									"end": 6323,
									"name": "tag",
									"source": 13,
									"value": "142"
								},
								{
									"begin": 6286,
									"end": 6323,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6345,
									"end": 6346,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "tag",
									"source": 13,
									"value": "143"
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6373,
									"end": 6380,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6370,
									"end": 6371,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6367,
									"end": 6381,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "145"
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6452,
									"end": 6461,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6447,
									"end": 6450,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 6443,
									"end": 6462,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6437,
									"end": 6463,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6429,
									"end": 6435,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6422,
									"end": 6464,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 6503,
									"end": 6504,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 6495,
									"end": 6501,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6491,
									"end": 6505,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6481,
									"end": 6505,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 6481,
									"end": 6505,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6550,
									"end": 6552,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 6539,
									"end": 6548,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 6535,
									"end": 6553,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6522,
									"end": 6553,
									"name": "SWAP5",
									"source": 13
								},
								{
									"begin": 6522,
									"end": 6553,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6396,
									"end": 6400,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 6393,
									"end": 6394,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 6389,
									"end": 6401,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6384,
									"end": 6401,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 6384,
									"end": 6401,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "143"
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "tag",
									"source": 13,
									"value": "145"
								},
								{
									"begin": 6359,
									"end": 6567,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6595,
									"end": 6601,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 6586,
									"end": 6593,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6583,
									"end": 6602,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 6580,
									"end": 6759,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 6580,
									"end": 6759,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "146"
								},
								{
									"begin": 6580,
									"end": 6759,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 6653,
									"end": 6662,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 6648,
									"end": 6651,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 6644,
									"end": 6663,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6638,
									"end": 6664,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 6696,
									"end": 6744,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "147"
								},
								{
									"begin": 6738,
									"end": 6742,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 6730,
									"end": 6736,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 6726,
									"end": 6743,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 6715,
									"end": 6724,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 6696,
									"end": 6744,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "57"
								},
								{
									"begin": 6696,
									"end": 6744,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 6696,
									"end": 6744,
									"name": "tag",
									"source": 13,
									"value": "147"
								},
								{
									"begin": 6696,
									"end": 6744,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6688,
									"end": 6694,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 6681,
									"end": 6745,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 6603,
									"end": 6759,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6580,
									"end": 6759,
									"name": "tag",
									"source": 13,
									"value": "146"
								},
								{
									"begin": 6580,
									"end": 6759,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6805,
									"end": 6806,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 6801,
									"end": 6802,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 6793,
									"end": 6799,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 6789,
									"end": 6803,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 6785,
									"end": 6807,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 6779,
									"end": 6783,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 6772,
									"end": 6808,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 6207,
									"end": 6818,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6207,
									"end": 6818,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6207,
									"end": 6818,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 6170,
									"end": 7057,
									"name": "tag",
									"source": 13,
									"value": "138"
								},
								{
									"begin": 6170,
									"end": 7057,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 6170,
									"end": 7057,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5760,
									"end": 7063,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5760,
									"end": 7063,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5760,
									"end": 7063,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5668,
									"end": 7063,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5668,
									"end": 7063,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 5668,
									"end": 7063,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7069,
									"end": 7167,
									"name": "tag",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 7069,
									"end": 7167,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7120,
									"end": 7126,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7154,
									"end": 7159,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7148,
									"end": 7160,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 7138,
									"end": 7160,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 7138,
									"end": 7160,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7069,
									"end": 7167,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7069,
									"end": 7167,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 7069,
									"end": 7167,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7069,
									"end": 7167,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "tag",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7274,
									"end": 7285,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7311,
									"end": 7314,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7296,
									"end": 7314,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 7296,
									"end": 7314,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7173,
									"end": 7320,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7326,
									"end": 7465,
									"name": "tag",
									"source": 13,
									"value": "61"
								},
								{
									"begin": 7326,
									"end": 7465,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7415,
									"end": 7421,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 7410,
									"end": 7413,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7405,
									"end": 7408,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 7399,
									"end": 7422,
									"name": "MCOPY",
									"source": 13
								},
								{
									"begin": 7456,
									"end": 7457,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7447,
									"end": 7453,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 7442,
									"end": 7445,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 7438,
									"end": 7454,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 7431,
									"end": 7458,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 7326,
									"end": 7465,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7326,
									"end": 7465,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7326,
									"end": 7465,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7326,
									"end": 7465,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "tag",
									"source": 13,
									"value": "62"
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7575,
									"end": 7578,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 7603,
									"end": 7641,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "152"
								},
								{
									"begin": 7635,
									"end": 7640,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 7603,
									"end": 7641,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 7603,
									"end": 7641,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7603,
									"end": 7641,
									"name": "tag",
									"source": 13,
									"value": "152"
								},
								{
									"begin": 7603,
									"end": 7641,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7657,
									"end": 7745,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "153"
								},
								{
									"begin": 7738,
									"end": 7744,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7733,
									"end": 7736,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 7657,
									"end": 7745,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 7657,
									"end": 7745,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7657,
									"end": 7745,
									"name": "tag",
									"source": 13,
									"value": "153"
								},
								{
									"begin": 7657,
									"end": 7745,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7650,
									"end": 7745,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 7650,
									"end": 7745,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7754,
									"end": 7819,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "154"
								},
								{
									"begin": 7812,
									"end": 7818,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 7807,
									"end": 7810,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 7800,
									"end": 7804,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 7793,
									"end": 7798,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 7789,
									"end": 7805,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 7754,
									"end": 7819,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "61"
								},
								{
									"begin": 7754,
									"end": 7819,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7754,
									"end": 7819,
									"name": "tag",
									"source": 13,
									"value": "154"
								},
								{
									"begin": 7754,
									"end": 7819,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7844,
									"end": 7850,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 7839,
									"end": 7842,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 7835,
									"end": 7851,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 7828,
									"end": 7851,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7828,
									"end": 7851,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7579,
									"end": 7857,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7471,
									"end": 7857,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "tag",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 7993,
									"end": 7996,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 8015,
									"end": 8108,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "156"
								},
								{
									"begin": 8104,
									"end": 8107,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 8095,
									"end": 8101,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 8015,
									"end": 8108,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "62"
								},
								{
									"begin": 8015,
									"end": 8108,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 8015,
									"end": 8108,
									"name": "tag",
									"source": 13,
									"value": "156"
								},
								{
									"begin": 8015,
									"end": 8108,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8008,
									"end": 8108,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 8008,
									"end": 8108,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 8125,
									"end": 8128,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 8118,
									"end": 8128,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 8118,
									"end": 8128,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 7863,
									"end": 8134,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "tag",
									"source": 13,
									"value": "27"
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8210,
									"end": 8216,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 8259,
									"end": 8261,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 8247,
									"end": 8256,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 8238,
									"end": 8245,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 8234,
									"end": 8257,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 8230,
									"end": 8262,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 8227,
									"end": 8346,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 8227,
									"end": 8346,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "158"
								},
								{
									"begin": 8227,
									"end": 8346,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 8265,
									"end": 8344,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "159"
								},
								{
									"begin": 8265,
									"end": 8344,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 8265,
									"end": 8344,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 8265,
									"end": 8344,
									"name": "tag",
									"source": 13,
									"value": "159"
								},
								{
									"begin": 8265,
									"end": 8344,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8227,
									"end": 8346,
									"name": "tag",
									"source": 13,
									"value": "158"
								},
								{
									"begin": 8227,
									"end": 8346,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8385,
									"end": 8386,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 8410,
									"end": 8474,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "160"
								},
								{
									"begin": 8466,
									"end": 8473,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 8457,
									"end": 8463,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 8446,
									"end": 8455,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 8442,
									"end": 8464,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 8410,
									"end": 8474,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "39"
								},
								{
									"begin": 8410,
									"end": 8474,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 8410,
									"end": 8474,
									"name": "tag",
									"source": 13,
									"value": "160"
								},
								{
									"begin": 8410,
									"end": 8474,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 8400,
									"end": 8474,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 8400,
									"end": 8474,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 8356,
									"end": 8484,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 8140,
									"end": 8491,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 175,
									"end": 703,
									"name": "tag",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "A0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "1245"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "1243"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 703,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c733f6cb83933133afe6a4d42c9cdc1af596c077301b34c416913646670960b464736f6c63430008190033",
									".code": [
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "8DA5CB5B"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "BA0AF7A9"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "CE96CB77"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "CE96CB77"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "D905777E"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "DD62ED3E"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "EF8B30F7"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "BA0AF7A9"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "C63D75B6"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "C6E6F592"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "B3D7F6B9"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "B460AF94"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "BA087652"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "8DA5CB5B"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "94BF804D"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "402D267D"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "402D267D"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "4CDAD506"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "6E553F65"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "38D52E0F"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "1E1D114"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "7A2D13A"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "A28A477"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 175,
											"end": 703,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1249,
											"end": 1460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 1249,
											"end": 1460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1249,
											"end": 1460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 1547,
											"end": 1762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1547,
											"end": 1762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1547,
											"end": 1762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 7809,
											"end": 8201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 7809,
											"end": 8201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 7809,
											"end": 8201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 212,
											"end": 240,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 212,
											"end": 240,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 212,
											"end": 240,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 948,
											"end": 1158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 948,
											"end": 1158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 948,
											"end": 1158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 8895,
											"end": 9308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 8895,
											"end": 9308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 8895,
											"end": 9308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 246,
											"end": 280,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 246,
											"end": 280,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "tag",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 246,
											"end": 280,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "tag",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "142"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "143"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 652,
											"end": 864,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 652,
											"end": 864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 652,
											"end": 864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 652,
											"end": 864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5832,
											"end": 5839,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1243"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 5883,
											"end": 5887,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "152"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "152"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "153"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "154"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "153"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "160"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "161"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6222,
											"end": 6229,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "163"
										},
										{
											"begin": 6265,
											"end": 6271,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6292,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 6248,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "tag",
											"source": 5,
											"value": "163"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 4398,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4429,
											"end": 4434,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1328,
											"end": 1335,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1347,
											"end": 1358,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1361,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1379,
											"end": 1400,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 1379,
											"end": 1398,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 1379,
											"end": 1400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1379,
											"end": 1400,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 1379,
											"end": 1400,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1361,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 1361,
											"end": 1401,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1361,
											"end": 1401,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 1361,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1347,
											"end": 1401,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1347,
											"end": 1401,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1418,
											"end": 1453,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 1449,
											"end": 1452,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1440,
											"end": 1446,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 1440,
											"end": 1452,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 1440,
											"end": 1452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1418,
											"end": 1439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 1418,
											"end": 1453,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1418,
											"end": 1453,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 1418,
											"end": 1453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1411,
											"end": 1453,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1411,
											"end": 1453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1411,
											"end": 1453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1249,
											"end": 1460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5157,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 5160,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 5160,
											"end": 5172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5204,
											"end": 5211,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5522,
											"end": 5527,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 5568,
											"end": 5583,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 5568,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "tag",
											"source": 5,
											"value": "187"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5565,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1245"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "189"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "190"
										},
										{
											"begin": 5546,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "tag",
											"source": 5,
											"value": "189"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5682,
											"end": 5689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1243"
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6407,
											"end": 6414,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1624,
											"end": 1631,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1643,
											"end": 1657,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1660,
											"end": 1687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 1680,
											"end": 1686,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1660,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 1660,
											"end": 1687,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1660,
											"end": 1687,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 1660,
											"end": 1687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1643,
											"end": 1687,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1643,
											"end": 1687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1713,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 1725,
											"end": 1731,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1733,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 1733,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 1733,
											"end": 1754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1733,
											"end": 1754,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 1733,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1713,
											"end": 1724,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 1713,
											"end": 1755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1713,
											"end": 1755,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 1713,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1704,
											"end": 1710,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 1704,
											"end": 1755,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 1704,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1697,
											"end": 1755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1697,
											"end": 1755,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1697,
											"end": 1755,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1547,
											"end": 1762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7884,
											"end": 7891,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7903,
											"end": 7920,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 7934,
											"end": 7942,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7923,
											"end": 7933,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 7923,
											"end": 7943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "tag",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7903,
											"end": 7943,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7903,
											"end": 7943,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7966,
											"end": 7975,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7957,
											"end": 7963,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7957,
											"end": 7975,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "203"
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8024,
											"end": 8032,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8034,
											"end": 8040,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8042,
											"end": 8051,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 5,
											"value": "79012FB200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 7998,
											"end": 8052,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "tag",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "tag",
											"source": 5,
											"value": "203"
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8073,
											"end": 8087,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "206"
										},
										{
											"begin": 8105,
											"end": 8111,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8090,
											"end": 8104,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 8090,
											"end": 8112,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "tag",
											"source": 5,
											"value": "206"
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8073,
											"end": 8112,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8073,
											"end": 8112,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "207"
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "208"
										},
										{
											"begin": 8131,
											"end": 8141,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 8131,
											"end": 8143,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "tag",
											"source": 5,
											"value": "208"
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8145,
											"end": 8153,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8155,
											"end": 8161,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8122,
											"end": 8130,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "209"
										},
										{
											"begin": 8122,
											"end": 8170,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "tag",
											"source": 5,
											"value": "207"
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8188,
											"end": 8194,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7809,
											"end": 8201,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3400,
											"end": 3407,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 212,
											"end": 240,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 212,
											"end": 240,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 212,
											"end": 240,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8540,
											"end": 8547,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8559,
											"end": 8576,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "212"
										},
										{
											"begin": 8587,
											"end": 8595,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8579,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 8579,
											"end": 8596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "tag",
											"source": 5,
											"value": "212"
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8559,
											"end": 8596,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8559,
											"end": 8596,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8619,
											"end": 8628,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8610,
											"end": 8616,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8610,
											"end": 8628,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8674,
											"end": 8682,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8684,
											"end": 8690,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8692,
											"end": 8701,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 5,
											"value": "284FF66700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "214"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 8651,
											"end": 8702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "tag",
											"source": 5,
											"value": "214"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "tag",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8723,
											"end": 8737,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 8752,
											"end": 8758,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8740,
											"end": 8751,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 8740,
											"end": 8759,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "tag",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8723,
											"end": 8759,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8723,
											"end": 8759,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 8778,
											"end": 8788,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 8778,
											"end": 8790,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "tag",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8792,
											"end": 8800,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8802,
											"end": 8808,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8810,
											"end": 8816,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 8769,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "209"
										},
										{
											"begin": 8769,
											"end": 8817,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "tag",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8835,
											"end": 8841,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3695,
											"end": 3708,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 3711,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 3711,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "tag",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3743,
											"end": 3748,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "tag",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3781,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1023,
											"end": 1030,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1042,
											"end": 1056,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1059,
											"end": 1084,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 1077,
											"end": 1083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1059,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 1059,
											"end": 1084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1059,
											"end": 1084,
											"name": "tag",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 1059,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1042,
											"end": 1084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1042,
											"end": 1084,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1110,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1128,
											"end": 1150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 1128,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 1128,
											"end": 1150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1128,
											"end": 1150,
											"name": "tag",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 1128,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1110,
											"end": 1119,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 1110,
											"end": 1151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1110,
											"end": 1151,
											"name": "tag",
											"source": 2,
											"value": "230"
										},
										{
											"begin": 1110,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1107,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 1101,
											"end": 1151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 1101,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1094,
											"end": 1151,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1094,
											"end": 1151,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1094,
											"end": 1151,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 948,
											"end": 1158,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 5,
											"value": "115"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8986,
											"end": 8993,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9005,
											"end": 9022,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 9037,
											"end": 9042,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9025,
											"end": 9036,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 9025,
											"end": 9043,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "tag",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9005,
											"end": 9043,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9005,
											"end": 9043,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9066,
											"end": 9075,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9057,
											"end": 9063,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9057,
											"end": 9075,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9125,
											"end": 9130,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9132,
											"end": 9138,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9140,
											"end": 9149,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 5,
											"value": "FE9CCEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 9098,
											"end": 9150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "tag",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "tag",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9171,
											"end": 9185,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 9204,
											"end": 9210,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9188,
											"end": 9203,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 9188,
											"end": 9211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9171,
											"end": 9211,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9171,
											"end": 9211,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 9231,
											"end": 9241,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 9231,
											"end": 9243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9245,
											"end": 9253,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9255,
											"end": 9260,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9262,
											"end": 9268,
											"name": "DUP10",
											"source": 5
										},
										{
											"begin": 9270,
											"end": 9276,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9221,
											"end": 9230,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 9221,
											"end": 9277,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "tag",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9295,
											"end": 9301,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8895,
											"end": 9308,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9442,
											"end": 9449,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9478,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 9491,
											"end": 9496,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9490,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 9481,
											"end": 9497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "tag",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9520,
											"end": 9529,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9517,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9577,
											"end": 9582,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9584,
											"end": 9590,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 9592,
											"end": 9601,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "B94ABEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 9552,
											"end": 9602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "tag",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9637,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 9654,
											"end": 9660,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9640,
											"end": 9653,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 9640,
											"end": 9661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "tag",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 9681,
											"end": 9691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 9681,
											"end": 9693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "tag",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9695,
											"end": 9703,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9705,
											"end": 9710,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 9712,
											"end": 9718,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9680,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 9671,
											"end": 9727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9745,
											"end": 9751,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 246,
											"end": 280,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 246,
											"end": 280,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 246,
											"end": 280,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6558,
											"end": 6565,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6601,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6020,
											"end": 6027,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 6063,
											"end": 6069,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6071,
											"end": 6090,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "tag",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6723,
											"end": 6730,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "254"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 6776,
											"end": 6781,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 6766,
											"end": 6782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "tag",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6784,
											"end": 6803,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 6749,
											"end": 6804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "tag",
											"source": 5,
											"value": "254"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 6958,
											"end": 6963,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6948,
											"end": 6957,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 6948,
											"end": 6964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "tag",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "143"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3969,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 652,
											"end": 864,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 652,
											"end": 864,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 730,
											"end": 737,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 749,
											"end": 760,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 763,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 783,
											"end": 803,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 783,
											"end": 805,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 783,
											"end": 805,
											"name": "tag",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 763,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 763,
											"end": 806,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 763,
											"end": 806,
											"name": "tag",
											"source": 2,
											"value": "260"
										},
										{
											"begin": 763,
											"end": 806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 749,
											"end": 806,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 749,
											"end": 806,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 823,
											"end": 857,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 853,
											"end": 856,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 844,
											"end": 850,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 844,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 844,
											"end": 856,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 844,
											"end": 856,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 844,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 844,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 844,
											"end": 856,
											"name": "tag",
											"source": 2,
											"value": "263"
										},
										{
											"begin": 844,
											"end": 856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 823,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "264"
										},
										{
											"begin": 823,
											"end": 857,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 823,
											"end": 857,
											"name": "tag",
											"source": 2,
											"value": "262"
										},
										{
											"begin": 823,
											"end": 857,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 816,
											"end": 857,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 816,
											"end": 857,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 816,
											"end": 857,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 652,
											"end": 864,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "tag",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10316,
											"end": 10323,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "266"
										},
										{
											"begin": 10372,
											"end": 10373,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 10356,
											"end": 10367,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 10356,
											"end": 10369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "tag",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "268"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 10356,
											"end": 10373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "tag",
											"source": 5,
											"value": "268"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "269"
										},
										{
											"begin": 10397,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 10397,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "269"
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10393,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 10391,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "270"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 10375,
											"end": 10386,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 10375,
											"end": 10388,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "tag",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "273"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 10375,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "tag",
											"source": 5,
											"value": "273"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10416,
											"end": 10424,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10348,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "274"
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "tag",
											"source": 5,
											"value": "266"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3021,
											"end": 3149,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 3021,
											"end": 3149,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3083,
											"end": 3090,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3021,
											"end": 3149,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3021,
											"end": 3149,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3746,
											"end": 3753,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 3786,
											"end": 3800,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 532,
											"end": 535,
											"name": "PUSH",
											"source": 2,
											"value": "2710"
										},
										{
											"begin": 3822,
											"end": 3840,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 3772,
											"end": 3785,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "tag",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 3772,
											"end": 3841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3765,
											"end": 3841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3765,
											"end": 3841,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3665,
											"end": 3848,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 5,
											"value": "178"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7488,
											"end": 7495,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "283"
										},
										{
											"begin": 7531,
											"end": 7537,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 7514,
											"end": 7530,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 7514,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "tag",
											"source": 5,
											"value": "283"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 10799,
											"end": 10804,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10806,
											"end": 10813,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10798,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "143"
										},
										{
											"begin": 10789,
											"end": 10814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "tag",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10848,
											"end": 10865,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10828,
											"end": 10844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10972,
											"end": 10988,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10990,
											"end": 10995,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 10936,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "tag",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "289"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 3,
											"value": "289"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5743,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 5780,
											"end": 5810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "tag",
											"source": 3,
											"value": "292"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5848,
											"end": 5849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5836,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "293"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 5873,
											"end": 5905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "tag",
											"source": 3,
											"value": "294"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "293"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "tag",
											"source": 3,
											"value": "295"
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "tag",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12371,
											"end": 12376,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12313,
											"end": 12403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 5,
											"value": "195"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 7728,
											"end": 7734,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7736,
											"end": 7755,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7727,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 7711,
											"end": 7756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "tag",
											"source": 5,
											"value": "299"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "tag",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4093,
											"end": 4100,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "301"
										},
										{
											"begin": 4133,
											"end": 4147,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 532,
											"end": 535,
											"name": "PUSH",
											"source": 2,
											"value": "2710"
										},
										{
											"begin": 4149,
											"end": 4163,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 4149,
											"end": 4184,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "tag",
											"source": 2,
											"value": "302"
										},
										{
											"begin": 4149,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4186,
											"end": 4204,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4119,
											"end": 4125,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 4119,
											"end": 4132,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "tag",
											"source": 2,
											"value": "301"
										},
										{
											"begin": 4119,
											"end": 4205,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4112,
											"end": 4205,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4112,
											"end": 4205,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4010,
											"end": 4212,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4010,
											"end": 4212,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1966,
											"end": 1977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1980,
											"end": 2023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 1992,
											"end": 1998,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2000,
											"end": 2022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 2000,
											"end": 2020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2000,
											"end": 2022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2000,
											"end": 2022,
											"name": "tag",
											"source": 2,
											"value": "305"
										},
										{
											"begin": 2000,
											"end": 2022,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "198"
										},
										{
											"begin": 1980,
											"end": 2023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2023,
											"name": "tag",
											"source": 2,
											"value": "304"
										},
										{
											"begin": 1980,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1966,
											"end": 2023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1966,
											"end": 2023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2033,
											"end": 2050,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2053,
											"end": 2073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 2053,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "307"
										},
										{
											"begin": 2053,
											"end": 2073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2053,
											"end": 2073,
											"name": "tag",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 2053,
											"end": 2073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2033,
											"end": 2073,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2033,
											"end": 2073,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2084,
											"end": 2132,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 2099,
											"end": 2105,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2107,
											"end": 2115,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2117,
											"end": 2123,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2125,
											"end": 2131,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2084,
											"end": 2098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "309"
										},
										{
											"begin": 2084,
											"end": 2132,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2084,
											"end": 2132,
											"name": "tag",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 2084,
											"end": 2132,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2154,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2147,
											"end": 2150,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2154,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2179,
											"end": 2183,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2158,
											"end": 2167,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2158,
											"end": 2184,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "tag",
											"source": 2,
											"value": "310"
										},
										{
											"begin": 2147,
											"end": 2184,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2266,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 2143,
											"end": 2266,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2200,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "313"
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2230,
											"end": 2237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "tag",
											"source": 2,
											"value": "313"
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2240,
											"end": 2249,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2251,
											"end": 2254,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2200,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "314"
										},
										{
											"begin": 2200,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2200,
											"end": 2255,
											"name": "tag",
											"source": 2,
											"value": "312"
										},
										{
											"begin": 2200,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2266,
											"name": "tag",
											"source": 2,
											"value": "311"
										},
										{
											"begin": 2143,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1956,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1956,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1846,
											"end": 2272,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 5,
											"value": "229"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7287,
											"end": 7294,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "316"
										},
										{
											"begin": 7330,
											"end": 7336,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 7313,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 7313,
											"end": 7357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "tag",
											"source": 5,
											"value": "316"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 479,
											"end": 595,
											"name": "tag",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 479,
											"end": 595,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 543,
											"end": 550,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 569,
											"end": 588,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 569,
											"end": 588,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 562,
											"end": 588,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 562,
											"end": 588,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 479,
											"end": 595,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 479,
											"end": 595,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2536,
											"end": 2547,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2590,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 2560,
											"end": 2566,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2568,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 2568,
											"end": 2587,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 2568,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2568,
											"end": 2589,
											"name": "tag",
											"source": 2,
											"value": "320"
										},
										{
											"begin": 2568,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2550,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 2550,
											"end": 2590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2550,
											"end": 2590,
											"name": "tag",
											"source": 2,
											"value": "319"
										},
										{
											"begin": 2550,
											"end": 2590,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2536,
											"end": 2590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2536,
											"end": 2590,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2600,
											"end": 2617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2620,
											"end": 2639,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "321"
										},
										{
											"begin": 2620,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 2620,
											"end": 2639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2620,
											"end": 2639,
											"name": "tag",
											"source": 2,
											"value": "321"
										},
										{
											"begin": 2620,
											"end": 2639,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2600,
											"end": 2639,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2600,
											"end": 2639,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2650,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "323"
										},
										{
											"begin": 2666,
											"end": 2672,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2674,
											"end": 2682,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2684,
											"end": 2689,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2691,
											"end": 2697,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2699,
											"end": 2705,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2650,
											"end": 2665,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "324"
										},
										{
											"begin": 2650,
											"end": 2706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2650,
											"end": 2706,
											"name": "tag",
											"source": 2,
											"value": "323"
										},
										{
											"begin": 2650,
											"end": 2706,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2727,
											"end": 2728,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2721,
											"end": 2724,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2728,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2753,
											"end": 2757,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2732,
											"end": 2741,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2732,
											"end": 2758,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "tag",
											"source": 2,
											"value": "325"
										},
										{
											"begin": 2721,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2717,
											"end": 2840,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2717,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 2717,
											"end": 2840,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2774,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 2804,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2804,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2804,
											"end": 2811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2804,
											"end": 2811,
											"name": "tag",
											"source": 2,
											"value": "328"
										},
										{
											"begin": 2804,
											"end": 2811,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2814,
											"end": 2823,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2825,
											"end": 2828,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2774,
											"end": 2796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "314"
										},
										{
											"begin": 2774,
											"end": 2829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2774,
											"end": 2829,
											"name": "tag",
											"source": 2,
											"value": "327"
										},
										{
											"begin": 2774,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2717,
											"end": 2840,
											"name": "tag",
											"source": 2,
											"value": "326"
										},
										{
											"begin": 2717,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2526,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2526,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2354,
											"end": 2846,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9979,
											"end": 9986,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "331"
										},
										{
											"begin": 10041,
											"end": 10056,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 10041,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "tag",
											"source": 5,
											"value": "331"
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10035,
											"end": 10037,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "271"
										},
										{
											"begin": 10035,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "tag",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "333"
										},
										{
											"begin": 10019,
											"end": 10030,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 10019,
											"end": 10032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "tag",
											"source": 5,
											"value": "333"
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 10019,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "tag",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10076,
											"end": 10077,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 10060,
											"end": 10071,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 10060,
											"end": 10073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "tag",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "336"
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 10060,
											"end": 10077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "tag",
											"source": 5,
											"value": "336"
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10079,
											"end": 10087,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10011,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "274"
										},
										{
											"begin": 10005,
											"end": 10018,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "tag",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9998,
											"end": 10088,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9998,
											"end": 10088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 5,
											"value": "264"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7093,
											"end": 7100,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "338"
										},
										{
											"begin": 7136,
											"end": 7142,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7144,
											"end": 7163,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7135,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 7119,
											"end": 7164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "tag",
											"source": 5,
											"value": "338"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "tag",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8152,
											"end": 8159,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8171,
											"end": 8185,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "340"
										},
										{
											"begin": 8195,
											"end": 8196,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8198,
											"end": 8199,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8201,
											"end": 8212,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8194,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "tag",
											"source": 11,
											"value": "340"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "342"
										},
										{
											"begin": 8244,
											"end": 8252,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 8227,
											"end": 8253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "tag",
											"source": 11,
											"value": "342"
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8285,
											"end": 8286,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8270,
											"end": 8281,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "345"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "346"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "347"
										},
										{
											"begin": 8257,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 11,
											"value": "346"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 11,
											"value": "345"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8267,
											"end": 8268,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 8264,
											"end": 8265,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8286,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "tag",
											"source": 11,
											"value": "344"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "348"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8312,
											"end": 8313,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 8302,
											"end": 8313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "tag",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "tag",
											"source": 11,
											"value": "348"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8340,
											"end": 8346,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10078,
											"end": 10079,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "352"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 10103,
											"end": 10135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "tag",
											"source": 3,
											"value": "352"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10178,
											"end": 10179,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10166,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "353"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "354"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 10203,
											"end": 10234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "tag",
											"source": 3,
											"value": "354"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "353"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10284,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10266,
											"end": 10271,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10280,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "356"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 10333,
											"end": 10364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 3,
											"value": "356"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "tag",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6364,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "358"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "359"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "359"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "360"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "358"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6617,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6614,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "361"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6680,
											"end": 6691,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6693,
											"end": 6698,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "362"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 6649,
											"end": 6699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "tag",
											"source": 3,
											"value": "362"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "361"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6863,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6844,
											"end": 6848,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6534,
											"end": 6896,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "360"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6924,
											"end": 6925,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "363"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7089,
											"end": 7094,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "364"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "363"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7301,
											"end": 7306,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "364"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "365"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 7346,
											"end": 7371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 3,
											"value": "365"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 601,
											"end": 701,
											"name": "tag",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 601,
											"end": 701,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 663,
											"end": 670,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 689,
											"end": 694,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 682,
											"end": 694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 682,
											"end": 694,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 601,
											"end": 701,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 601,
											"end": 701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "tag",
											"source": 5,
											"value": "309"
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "368"
										},
										{
											"begin": 11191,
											"end": 11197,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1243"
										},
										{
											"begin": 11199,
											"end": 11205,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11215,
											"end": 11219,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 11222,
											"end": 11228,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11164,
											"end": 11190,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "369"
										},
										{
											"begin": 11164,
											"end": 11229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "tag",
											"source": 5,
											"value": "368"
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "370"
										},
										{
											"begin": 11245,
											"end": 11253,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11255,
											"end": 11261,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11239,
											"end": 11244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "371"
										},
										{
											"begin": 11239,
											"end": 11262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "tag",
											"source": 5,
											"value": "370"
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11294,
											"end": 11302,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11286,
											"end": 11292,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "DCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7"
										},
										{
											"begin": 11304,
											"end": 11310,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11312,
											"end": 11318,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "372"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "373"
										},
										{
											"begin": 11278,
											"end": 11319,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "tag",
											"source": 5,
											"value": "372"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "tag",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 1405,
											"end": 1410,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1432,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 1444,
											"end": 1446,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1448,
											"end": 1453,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 1385,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1303,
											"end": 1463,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3305,
											"end": 3448,
											"name": "tag",
											"source": 2,
											"value": "322"
										},
										{
											"begin": 3305,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3365,
											"end": 3372,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3305,
											"end": 3448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3305,
											"end": 3448,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "tag",
											"source": 5,
											"value": "324"
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11580,
											"end": 11585,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11576,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "381"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "382"
										},
										{
											"begin": 11617,
											"end": 11622,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11624,
											"end": 11630,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11616,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "183"
										},
										{
											"begin": 11601,
											"end": 11639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "tag",
											"source": 5,
											"value": "382"
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "tag",
											"source": 5,
											"value": "381"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "383"
										},
										{
											"begin": 12163,
											"end": 12168,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 12170,
											"end": 12176,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12162,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "384"
										},
										{
											"begin": 12157,
											"end": 12177,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "tag",
											"source": 5,
											"value": "383"
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "385"
										},
										{
											"begin": 12210,
											"end": 12216,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "1243"
										},
										{
											"begin": 12218,
											"end": 12226,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12228,
											"end": 12234,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "314"
										},
										{
											"begin": 12187,
											"end": 12235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "tag",
											"source": 5,
											"value": "385"
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12278,
											"end": 12283,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12268,
											"end": 12276,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12260,
											"end": 12266,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB"
										},
										{
											"begin": 12285,
											"end": 12291,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12293,
											"end": 12299,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "386"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "373"
										},
										{
											"begin": 12251,
											"end": 12300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "tag",
											"source": 5,
											"value": "386"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "LOG4",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3885,
											"end": 3899,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4232,
											"end": 4245,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4252,
											"end": 4253,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4248,
											"end": 4249,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4248,
											"end": 4253,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4312,
											"end": 4325,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4437,
											"end": 4438,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4433,
											"end": 4439,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 4430,
											"end": 4431,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4427,
											"end": 4428,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4420,
											"end": 4440,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 4493,
											"end": 4498,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4489,
											"end": 4491,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4486,
											"end": 4499,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 4478,
											"end": 4483,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4474,
											"end": 4476,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4470,
											"end": 4484,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4466,
											"end": 4500,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4392,
											"end": 4514,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4605,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4595,
											"end": 4600,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4595,
											"end": 4605,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "388"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4933,
											"end": 4944,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4930,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "389"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "390"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "347"
										},
										{
											"begin": 4925,
											"end": 4944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 11,
											"value": "390"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 11,
											"value": "389"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "tag",
											"source": 11,
											"value": "388"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5080,
											"end": 5085,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5076,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "391"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "227BC15300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "tag",
											"source": 11,
											"value": "391"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5404,
											"end": 5421,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5539,
											"end": 5550,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5536,
											"end": 5537,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5533,
											"end": 5534,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5526,
											"end": 5551,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5667,
											"end": 5672,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5656,
											"end": 5665,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5653,
											"end": 5673,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5646,
											"end": 5651,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5642,
											"end": 5674,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5711,
											"end": 5720,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5704,
											"end": 5709,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5700,
											"end": 5721,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5951,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5973,
											"end": 5984,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5969,
											"end": 5970,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5969,
											"end": 5984,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5954,
											"end": 5965,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5954,
											"end": 5985,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6105,
											"end": 6109,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6092,
											"end": 6103,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 6088,
											"end": 6110,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6197,
											"end": 6201,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6190,
											"end": 6195,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6186,
											"end": 6202,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6354,
											"end": 6355,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6347,
											"end": 6351,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6340,
											"end": 6344,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6337,
											"end": 6338,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6333,
											"end": 6345,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6329,
											"end": 6352,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6325,
											"end": 6356,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6453,
											"end": 6457,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6445,
											"end": 6450,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6790,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6813,
											"end": 6814,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 6798,
											"end": 6809,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 6794,
											"end": 6795,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 6794,
											"end": 6809,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 6793,
											"end": 6814,
											"name": "XOR",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7060,
											"end": 7067,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7046,
											"end": 7057,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7046,
											"end": 7067,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7042,
											"end": 7043,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7042,
											"end": 7067,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7129,
											"end": 7136,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7115,
											"end": 7126,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7115,
											"end": 7136,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7111,
											"end": 7112,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7111,
											"end": 7136,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7199,
											"end": 7206,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7185,
											"end": 7196,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7185,
											"end": 7206,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7181,
											"end": 7206,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7269,
											"end": 7276,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7255,
											"end": 7266,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7255,
											"end": 7276,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7251,
											"end": 7252,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7251,
											"end": 7276,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7339,
											"end": 7346,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7325,
											"end": 7336,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7325,
											"end": 7346,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7321,
											"end": 7322,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7321,
											"end": 7346,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7410,
											"end": 7417,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7396,
											"end": 7407,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7396,
											"end": 7417,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7392,
											"end": 7393,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7392,
											"end": 7417,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7868,
											"end": 7875,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7860,
											"end": 7865,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7860,
											"end": 7875,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "tag",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15061,
											"end": 15065,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 15107,
											"end": 15108,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 15102,
											"end": 15103,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 15090,
											"end": 15098,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "394"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "395"
										},
										{
											"begin": 15084,
											"end": 15099,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 11,
											"value": "394"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "396"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "397"
										},
										{
											"begin": 15084,
											"end": 15103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "tag",
											"source": 11,
											"value": "396"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14993,
											"end": 15115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "tag",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 1822,
											"end": 1827,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1849,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 1865,
											"end": 1869,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1871,
											"end": 1873,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1875,
											"end": 1880,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 1829,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "tag",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1821,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 1802,
											"end": 1883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "tag",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 3,
											"value": "371"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7810,
											"end": 7811,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7798,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "403"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "404"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 7835,
											"end": 7867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "tag",
											"source": 3,
											"value": "404"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 3,
											"value": "403"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "405"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "tag",
											"source": 3,
											"value": "405"
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4501,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 4532,
											"end": 4536,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4512,
											"end": 4517,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "tag",
											"source": 8,
											"value": "407"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4572,
											"end": 4573,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4561,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4568,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "409"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 4578,
											"end": 4608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4577,
											"end": 4608,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "409"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4664,
											"end": 4669,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "5274AFE700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4631,
											"end": 4671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "tag",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4129,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 3,
											"value": "384"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8324,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "415"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "416"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 8361,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "tag",
											"source": 3,
											"value": "416"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 3,
											"value": "415"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "417"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "296"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "tag",
											"source": 3,
											"value": "417"
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "tag",
											"source": 9,
											"value": "408"
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2792,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "419"
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2841,
											"end": 2845,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2811,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "420"
										},
										{
											"begin": 2811,
											"end": 2849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "tag",
											"source": 9,
											"value": "419"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2856,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "tag",
											"source": 9,
											"value": "420"
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3279,
											"end": 3291,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3331,
											"end": 3336,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3307,
											"end": 3328,
											"name": "SELFBALANCE",
											"source": 9
										},
										{
											"begin": 3307,
											"end": 3336,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "422"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3394,
											"end": 3398,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "CD78605900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "423"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 3359,
											"end": 3400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "tag",
											"source": 9,
											"value": "423"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "tag",
											"source": 9,
											"value": "422"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3433,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3458,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3468,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3481,
											"end": 3486,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3488,
											"end": 3492,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "424"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "425"
										},
										{
											"begin": 3462,
											"end": 3493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "424"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "428"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "427"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "428"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 9,
											"value": "427"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "429"
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3545,
											"end": 3552,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3554,
											"end": 3564,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "430"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 9,
											"value": "429"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3180,
											"end": 3572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "430"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4769,
											"end": 4781,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4798,
											"end": 4805,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "432"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "433"
										},
										{
											"begin": 4829,
											"end": 4839,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4828,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "434"
										},
										{
											"begin": 4821,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "tag",
											"source": 9,
											"value": "433"
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "435"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "432"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5045,
											"end": 5055,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5062,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "436"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5093,
											"end": 5094,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5071,
											"end": 5077,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 9,
											"value": "436"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "437"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5138,
											"end": 5144,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "9996B31500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "438"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 5121,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "tag",
											"source": 9,
											"value": "438"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 9,
											"value": "437"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5180,
											"end": 5190,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "431"
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "435"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "431"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "tag",
											"source": 9,
											"value": "434"
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5894,
											"end": 5895,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5874,
											"end": 5884,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "440"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6102,
											"end": 6112,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6096,
											"end": 6113,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6158,
											"end": 6173,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6145,
											"end": 6155,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6141,
											"end": 6143,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6130,
											"end": 6174,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 9,
											"value": "440"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "1425EA4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7,
											"end": 84,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "tag",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 90,
											"end": 208,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "479"
										},
										{
											"begin": 195,
											"end": 200,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 177,
											"end": 201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 177,
											"end": 201,
											"name": "tag",
											"source": 13,
											"value": "479"
										},
										{
											"begin": 177,
											"end": 201,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 172,
											"end": 175,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 165,
											"end": 202,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 90,
											"end": 208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "tag",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 214,
											"end": 436,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 307,
											"end": 311,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 347,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 330,
											"end": 348,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 322,
											"end": 348,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 322,
											"end": 348,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "481"
										},
										{
											"begin": 426,
											"end": 427,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 424,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 411,
											"end": 428,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 402,
											"end": 408,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 358,
											"end": 429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 358,
											"end": 429,
											"name": "tag",
											"source": 13,
											"value": "481"
										},
										{
											"begin": 358,
											"end": 429,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 214,
											"end": 436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "tag",
											"source": 13,
											"value": "444"
										},
										{
											"begin": 442,
											"end": 541,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 494,
											"end": 500,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 528,
											"end": 533,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 522,
											"end": 534,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 512,
											"end": 534,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 512,
											"end": 534,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 442,
											"end": 541,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "tag",
											"source": 13,
											"value": "445"
										},
										{
											"begin": 547,
											"end": 716,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 631,
											"end": 642,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 665,
											"end": 671,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 660,
											"end": 663,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 653,
											"end": 672,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 705,
											"end": 709,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 700,
											"end": 703,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 696,
											"end": 710,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 681,
											"end": 710,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 681,
											"end": 710,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 547,
											"end": 716,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "tag",
											"source": 13,
											"value": "446"
										},
										{
											"begin": 722,
											"end": 861,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 811,
											"end": 817,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 806,
											"end": 809,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 801,
											"end": 804,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 795,
											"end": 818,
											"name": "MCOPY",
											"source": 13
										},
										{
											"begin": 852,
											"end": 853,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 838,
											"end": 841,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 834,
											"end": 850,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 827,
											"end": 854,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 722,
											"end": 861,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "tag",
											"source": 13,
											"value": "447"
										},
										{
											"begin": 867,
											"end": 969,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 908,
											"end": 914,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 959,
											"end": 961,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 955,
											"end": 962,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 950,
											"end": 952,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 943,
											"end": 948,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 939,
											"end": 953,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 935,
											"end": 963,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 925,
											"end": 963,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 925,
											"end": 963,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 867,
											"end": 969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "tag",
											"source": 13,
											"value": "448"
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1063,
											"end": 1066,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "487"
										},
										{
											"begin": 1124,
											"end": 1129,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "444"
										},
										{
											"begin": 1091,
											"end": 1130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "tag",
											"source": 13,
											"value": "487"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "488"
										},
										{
											"begin": 1210,
											"end": 1216,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1205,
											"end": 1208,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "445"
										},
										{
											"begin": 1146,
											"end": 1217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "tag",
											"source": 13,
											"value": "488"
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "489"
										},
										{
											"begin": 1284,
											"end": 1290,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1282,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1272,
											"end": 1276,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1265,
											"end": 1270,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1261,
											"end": 1277,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "446"
										},
										{
											"begin": 1226,
											"end": 1291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "tag",
											"source": 13,
											"value": "489"
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "490"
										},
										{
											"begin": 1338,
											"end": 1344,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "447"
										},
										{
											"begin": 1316,
											"end": 1345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "tag",
											"source": 13,
											"value": "490"
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1311,
											"end": 1314,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1307,
											"end": 1346,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1067,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 975,
											"end": 1352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "tag",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1471,
											"end": 1475,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1509,
											"end": 1511,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1494,
											"end": 1512,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1558,
											"end": 1567,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1552,
											"end": 1556,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1548,
											"end": 1568,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1544,
											"end": 1545,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1533,
											"end": 1542,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1529,
											"end": 1546,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1522,
											"end": 1569,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "492"
										},
										{
											"begin": 1659,
											"end": 1663,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1650,
											"end": 1656,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "448"
										},
										{
											"begin": 1586,
											"end": 1664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "tag",
											"source": 13,
											"value": "492"
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1358,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "tag",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1867,
											"end": 1868,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1864,
											"end": 1865,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1857,
											"end": 1869,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "tag",
											"source": 13,
											"value": "452"
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "497"
										},
										{
											"begin": 2095,
											"end": 2100,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 2077,
											"end": 2101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "tag",
											"source": 13,
											"value": "497"
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2070,
											"end": 2075,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2067,
											"end": 2102,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "498"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2116,
											"end": 2117,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2113,
											"end": 2114,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2106,
											"end": 2118,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "tag",
											"source": 13,
											"value": "498"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2004,
											"end": 2126,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "tag",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2183,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2203,
											"end": 2223,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 2259,
											"end": 2264,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "452"
										},
										{
											"begin": 2232,
											"end": 2265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "tag",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2132,
											"end": 2271,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "tag",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2336,
											"end": 2342,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2373,
											"end": 2382,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2364,
											"end": 2371,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2360,
											"end": 2383,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2356,
											"end": 2388,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "503"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 2391,
											"end": 2470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "tag",
											"source": 13,
											"value": "503"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "tag",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2511,
											"end": 2512,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "504"
										},
										{
											"begin": 2581,
											"end": 2588,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2572,
											"end": 2578,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 2570,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2557,
											"end": 2579,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 2536,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "tag",
											"source": 13,
											"value": "504"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2482,
											"end": 2599,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "tag",
											"source": 13,
											"value": "454"
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2649,
											"end": 2656,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2682,
											"end": 2687,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2678,
											"end": 2732,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2738,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "tag",
											"source": 13,
											"value": "455"
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2781,
											"end": 2788,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 2828,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "454"
										},
										{
											"begin": 2810,
											"end": 2834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "tag",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2840,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "tag",
											"source": 13,
											"value": "456"
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 2937,
											"end": 2942,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "455"
										},
										{
											"begin": 2919,
											"end": 2943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "tag",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2912,
											"end": 2917,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2909,
											"end": 2944,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2958,
											"end": 2959,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2956,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2948,
											"end": 2960,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "tag",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2846,
											"end": 2968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "tag",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3020,
											"end": 3025,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3064,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3045,
											"end": 3065,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 3101,
											"end": 3106,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "456"
										},
										{
											"begin": 3074,
											"end": 3107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2974,
											"end": 3113,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "tag",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3187,
											"end": 3193,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3195,
											"end": 3201,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3244,
											"end": 3246,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3232,
											"end": 3241,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3223,
											"end": 3230,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3242,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3215,
											"end": 3247,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 3250,
											"end": 3329,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "tag",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "tag",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3370,
											"end": 3371,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "516"
										},
										{
											"begin": 3440,
											"end": 3447,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3431,
											"end": 3437,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3416,
											"end": 3438,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 3395,
											"end": 3448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "tag",
											"source": 13,
											"value": "516"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3341,
											"end": 3458,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3497,
											"end": 3499,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "517"
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3559,
											"end": 3565,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3544,
											"end": 3566,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 3523,
											"end": 3576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "tag",
											"source": 13,
											"value": "517"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3468,
											"end": 3586,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3119,
											"end": 3593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "tag",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3633,
											"end": 3640,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3681,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3669,
											"end": 3682,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3683,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3599,
											"end": 3689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "tag",
											"source": 13,
											"value": "459"
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "520"
										},
										{
											"begin": 3791,
											"end": 3796,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 3776,
											"end": 3797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "tag",
											"source": 13,
											"value": "520"
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3771,
											"end": 3774,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3764,
											"end": 3798,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3695,
											"end": 3804,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "tag",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3897,
											"end": 3901,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3935,
											"end": 3937,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 3933,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3920,
											"end": 3938,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "522"
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3999,
											"end": 4008,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3995,
											"end": 4012,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "459"
										},
										{
											"begin": 3948,
											"end": 4013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "tag",
											"source": 13,
											"value": "522"
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3810,
											"end": 4020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "tag",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4103,
											"end": 4109,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4111,
											"end": 4117,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4119,
											"end": 4125,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4170,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4156,
											"end": 4165,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4147,
											"end": 4154,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4143,
											"end": 4166,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4139,
											"end": 4171,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "524"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "525"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 4174,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "tag",
											"source": 13,
											"value": "525"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "tag",
											"source": 13,
											"value": "524"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "526"
										},
										{
											"begin": 4364,
											"end": 4371,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4355,
											"end": 4361,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4344,
											"end": 4353,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4340,
											"end": 4362,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 4319,
											"end": 4372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "tag",
											"source": 13,
											"value": "526"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4265,
											"end": 4382,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4421,
											"end": 4423,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "527"
										},
										{
											"begin": 4492,
											"end": 4499,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4483,
											"end": 4489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4481,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4468,
											"end": 4490,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 4447,
											"end": 4500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "tag",
											"source": 13,
											"value": "527"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4392,
											"end": 4510,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4549,
											"end": 4551,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "528"
										},
										{
											"begin": 4620,
											"end": 4627,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4600,
											"end": 4609,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4596,
											"end": 4618,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 4575,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "tag",
											"source": 13,
											"value": "528"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4520,
											"end": 4638,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4026,
											"end": 4645,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "tag",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4686,
											"end": 4693,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4730,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 4719,
											"end": 4724,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4731,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4651,
											"end": 4737,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "tag",
											"source": 13,
											"value": "461"
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "531"
										},
										{
											"begin": 4842,
											"end": 4847,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 4826,
											"end": 4848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "tag",
											"source": 13,
											"value": "531"
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4821,
											"end": 4824,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4814,
											"end": 4849,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "tag",
											"source": 13,
											"value": "70"
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4950,
											"end": 4954,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4988,
											"end": 4990,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4977,
											"end": 4986,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4973,
											"end": 4991,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "533"
										},
										{
											"begin": 5065,
											"end": 5066,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5054,
											"end": 5063,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5050,
											"end": 5067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "461"
										},
										{
											"begin": 5001,
											"end": 5068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "tag",
											"source": 13,
											"value": "533"
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4861,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "tag",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "535"
										},
										{
											"begin": 5186,
											"end": 5191,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "455"
										},
										{
											"begin": 5168,
											"end": 5192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "tag",
											"source": 13,
											"value": "535"
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5163,
											"end": 5166,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5156,
											"end": 5193,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5298,
											"end": 5302,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5336,
											"end": 5338,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5325,
											"end": 5334,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "537"
										},
										{
											"begin": 5417,
											"end": 5418,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5406,
											"end": 5415,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5402,
											"end": 5419,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 5349,
											"end": 5420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "tag",
											"source": 13,
											"value": "537"
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "tag",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5492,
											"end": 5498,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5541,
											"end": 5543,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5538,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5520,
											"end": 5527,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5516,
											"end": 5539,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5512,
											"end": 5544,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "539"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "540"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 5547,
											"end": 5626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "tag",
											"source": 13,
											"value": "540"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "tag",
											"source": 13,
											"value": "539"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5667,
											"end": 5668,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "541"
										},
										{
											"begin": 5737,
											"end": 5744,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5728,
											"end": 5734,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5717,
											"end": 5726,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5713,
											"end": 5735,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 5692,
											"end": 5745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "tag",
											"source": 13,
											"value": "541"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5638,
											"end": 5755,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5433,
											"end": 5762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "tag",
											"source": 13,
											"value": "86"
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5836,
											"end": 5842,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5844,
											"end": 5850,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5881,
											"end": 5890,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5872,
											"end": 5879,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5868,
											"end": 5891,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5864,
											"end": 5896,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "543"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 5899,
											"end": 5978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "tag",
											"source": 13,
											"value": "544"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "tag",
											"source": 13,
											"value": "543"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6019,
											"end": 6020,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "545"
										},
										{
											"begin": 6089,
											"end": 6096,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6080,
											"end": 6086,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6069,
											"end": 6078,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6065,
											"end": 6087,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 6044,
											"end": 6097,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "tag",
											"source": 13,
											"value": "545"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5990,
											"end": 6107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6146,
											"end": 6148,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "546"
										},
										{
											"begin": 6217,
											"end": 6224,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6208,
											"end": 6214,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6197,
											"end": 6206,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6193,
											"end": 6215,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 6172,
											"end": 6225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "tag",
											"source": 13,
											"value": "546"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6117,
											"end": 6235,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5768,
											"end": 6242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6352,
											"name": "tag",
											"source": 13,
											"value": "463"
										},
										{
											"begin": 6248,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6293,
											"end": 6300,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6322,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 6340,
											"end": 6345,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6322,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "454"
										},
										{
											"begin": 6322,
											"end": 6346,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6322,
											"end": 6346,
											"name": "tag",
											"source": 13,
											"value": "548"
										},
										{
											"begin": 6322,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6311,
											"end": 6346,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6311,
											"end": 6346,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6352,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6352,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6352,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6248,
											"end": 6352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6358,
											"end": 6500,
											"name": "tag",
											"source": 13,
											"value": "464"
										},
										{
											"begin": 6358,
											"end": 6500,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6461,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 6487,
											"end": 6492,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6461,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "463"
										},
										{
											"begin": 6461,
											"end": 6493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6461,
											"end": 6493,
											"name": "tag",
											"source": 13,
											"value": "550"
										},
										{
											"begin": 6461,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6456,
											"end": 6459,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6449,
											"end": 6494,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6358,
											"end": 6500,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6358,
											"end": 6500,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6358,
											"end": 6500,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "tag",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6615,
											"end": 6619,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6653,
											"end": 6655,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6642,
											"end": 6651,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6638,
											"end": 6656,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6630,
											"end": 6656,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6630,
											"end": 6656,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6666,
											"end": 6753,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 6750,
											"end": 6751,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6739,
											"end": 6748,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6735,
											"end": 6752,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6726,
											"end": 6732,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6666,
											"end": 6753,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "464"
										},
										{
											"begin": 6666,
											"end": 6753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6666,
											"end": 6753,
											"name": "tag",
											"source": 13,
											"value": "552"
										},
										{
											"begin": 6666,
											"end": 6753,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6506,
											"end": 6760,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "tag",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6843,
											"end": 6849,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6851,
											"end": 6857,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6859,
											"end": 6865,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6910,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6896,
											"end": 6905,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6887,
											"end": 6894,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6883,
											"end": 6906,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6879,
											"end": 6911,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 6876,
											"end": 6995,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6876,
											"end": 6995,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "554"
										},
										{
											"begin": 6876,
											"end": 6995,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6914,
											"end": 6993,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 6914,
											"end": 6993,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 6914,
											"end": 6993,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6914,
											"end": 6993,
											"name": "tag",
											"source": 13,
											"value": "555"
										},
										{
											"begin": 6914,
											"end": 6993,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6876,
											"end": 6995,
											"name": "tag",
											"source": 13,
											"value": "554"
										},
										{
											"begin": 6876,
											"end": 6995,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7034,
											"end": 7035,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7059,
											"end": 7112,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "556"
										},
										{
											"begin": 7104,
											"end": 7111,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7095,
											"end": 7101,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7084,
											"end": 7093,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7080,
											"end": 7102,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7059,
											"end": 7112,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "453"
										},
										{
											"begin": 7059,
											"end": 7112,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7059,
											"end": 7112,
											"name": "tag",
											"source": 13,
											"value": "556"
										},
										{
											"begin": 7059,
											"end": 7112,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7049,
											"end": 7112,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 7049,
											"end": 7112,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7005,
											"end": 7122,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7161,
											"end": 7163,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7187,
											"end": 7240,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "557"
										},
										{
											"begin": 7232,
											"end": 7239,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7223,
											"end": 7229,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7212,
											"end": 7221,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7208,
											"end": 7230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7187,
											"end": 7240,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 7187,
											"end": 7240,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7187,
											"end": 7240,
											"name": "tag",
											"source": 13,
											"value": "557"
										},
										{
											"begin": 7187,
											"end": 7240,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7177,
											"end": 7240,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7177,
											"end": 7240,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7132,
											"end": 7250,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7289,
											"end": 7291,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7315,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "558"
										},
										{
											"begin": 7360,
											"end": 7367,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7351,
											"end": 7357,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7340,
											"end": 7349,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7336,
											"end": 7358,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7315,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 7315,
											"end": 7368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7315,
											"end": 7368,
											"name": "tag",
											"source": 13,
											"value": "558"
										},
										{
											"begin": 7315,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7305,
											"end": 7368,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7305,
											"end": 7368,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7260,
											"end": 7378,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6766,
											"end": 7385,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "tag",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7459,
											"end": 7465,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7467,
											"end": 7473,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7516,
											"end": 7518,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7513,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7495,
											"end": 7502,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7491,
											"end": 7514,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7487,
											"end": 7519,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 7484,
											"end": 7603,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7484,
											"end": 7603,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 7484,
											"end": 7603,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7522,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "561"
										},
										{
											"begin": 7522,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 7522,
											"end": 7601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7522,
											"end": 7601,
											"name": "tag",
											"source": 13,
											"value": "561"
										},
										{
											"begin": 7522,
											"end": 7601,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7484,
											"end": 7603,
											"name": "tag",
											"source": 13,
											"value": "560"
										},
										{
											"begin": 7484,
											"end": 7603,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7642,
											"end": 7643,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7667,
											"end": 7720,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 7712,
											"end": 7719,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7703,
											"end": 7709,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7692,
											"end": 7701,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7688,
											"end": 7710,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7667,
											"end": 7720,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 7667,
											"end": 7720,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7667,
											"end": 7720,
											"name": "tag",
											"source": 13,
											"value": "562"
										},
										{
											"begin": 7667,
											"end": 7720,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7657,
											"end": 7720,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7657,
											"end": 7720,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7613,
											"end": 7730,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7769,
											"end": 7771,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7795,
											"end": 7848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 7840,
											"end": 7847,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7831,
											"end": 7837,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7820,
											"end": 7829,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7816,
											"end": 7838,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7795,
											"end": 7848,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "457"
										},
										{
											"begin": 7795,
											"end": 7848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7795,
											"end": 7848,
											"name": "tag",
											"source": 13,
											"value": "563"
										},
										{
											"begin": 7795,
											"end": 7848,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7785,
											"end": 7848,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7785,
											"end": 7848,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7858,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7865,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "tag",
											"source": 13,
											"value": "465"
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7928,
											"end": 7933,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7959,
											"end": 7965,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7966,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7944,
											"end": 7966,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7944,
											"end": 7966,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7975,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "565"
										},
										{
											"begin": 8002,
											"end": 8007,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7975,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "452"
										},
										{
											"begin": 7975,
											"end": 8008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7975,
											"end": 8008,
											"name": "tag",
											"source": 13,
											"value": "565"
										},
										{
											"begin": 7975,
											"end": 8008,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 8014,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "tag",
											"source": 13,
											"value": "154"
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8090,
											"end": 8096,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8139,
											"end": 8141,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8127,
											"end": 8136,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8125,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8114,
											"end": 8137,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8110,
											"end": 8142,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 8107,
											"end": 8226,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8107,
											"end": 8226,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "567"
										},
										{
											"begin": 8107,
											"end": 8226,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8145,
											"end": 8224,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "568"
										},
										{
											"begin": 8145,
											"end": 8224,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 8145,
											"end": 8224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8145,
											"end": 8224,
											"name": "tag",
											"source": 13,
											"value": "568"
										},
										{
											"begin": 8145,
											"end": 8224,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8107,
											"end": 8226,
											"name": "tag",
											"source": 13,
											"value": "567"
										},
										{
											"begin": 8107,
											"end": 8226,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8265,
											"end": 8266,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8290,
											"end": 8354,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "569"
										},
										{
											"begin": 8346,
											"end": 8353,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8337,
											"end": 8343,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8326,
											"end": 8335,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 8322,
											"end": 8344,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8290,
											"end": 8354,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "465"
										},
										{
											"begin": 8290,
											"end": 8354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8290,
											"end": 8354,
											"name": "tag",
											"source": 13,
											"value": "569"
										},
										{
											"begin": 8290,
											"end": 8354,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8280,
											"end": 8354,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8280,
											"end": 8354,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8236,
											"end": 8364,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8020,
											"end": 8371,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8377,
											"end": 8557,
											"name": "tag",
											"source": 13,
											"value": "466"
										},
										{
											"begin": 8377,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8425,
											"end": 8502,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8422,
											"end": 8423,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8415,
											"end": 8503,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8522,
											"end": 8526,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 8519,
											"end": 8520,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8512,
											"end": 8527,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8546,
											"end": 8550,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8543,
											"end": 8544,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8536,
											"end": 8551,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 8563,
											"end": 8883,
											"name": "tag",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 8563,
											"end": 8883,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8607,
											"end": 8613,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8644,
											"end": 8645,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 8638,
											"end": 8642,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8634,
											"end": 8646,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 8624,
											"end": 8646,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8624,
											"end": 8646,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8691,
											"end": 8692,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 8685,
											"end": 8689,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8681,
											"end": 8693,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8712,
											"end": 8730,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8702,
											"end": 8783,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "572"
										},
										{
											"begin": 8702,
											"end": 8783,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8768,
											"end": 8772,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 8760,
											"end": 8766,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8756,
											"end": 8773,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8746,
											"end": 8773,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8746,
											"end": 8773,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8702,
											"end": 8783,
											"name": "tag",
											"source": 13,
											"value": "572"
										},
										{
											"begin": 8702,
											"end": 8783,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8830,
											"end": 8832,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8822,
											"end": 8828,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8819,
											"end": 8833,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 8799,
											"end": 8817,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8796,
											"end": 8834,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8793,
											"end": 8877,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "573"
										},
										{
											"begin": 8793,
											"end": 8877,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8849,
											"end": 8867,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "574"
										},
										{
											"begin": 8849,
											"end": 8867,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "466"
										},
										{
											"begin": 8849,
											"end": 8867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8849,
											"end": 8867,
											"name": "tag",
											"source": 13,
											"value": "574"
										},
										{
											"begin": 8849,
											"end": 8867,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8793,
											"end": 8877,
											"name": "tag",
											"source": 13,
											"value": "573"
										},
										{
											"begin": 8793,
											"end": 8877,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8614,
											"end": 8883,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8563,
											"end": 8883,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8563,
											"end": 8883,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8563,
											"end": 8883,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8563,
											"end": 8883,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8889,
											"end": 9069,
											"name": "tag",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 8889,
											"end": 9069,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8937,
											"end": 9014,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8934,
											"end": 8935,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8927,
											"end": 9015,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9034,
											"end": 9038,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 9031,
											"end": 9032,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9024,
											"end": 9039,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9058,
											"end": 9062,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9055,
											"end": 9056,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9048,
											"end": 9063,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "tag",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9115,
											"end": 9118,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9134,
											"end": 9154,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "577"
										},
										{
											"begin": 9152,
											"end": 9153,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9134,
											"end": 9154,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 9134,
											"end": 9154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9134,
											"end": 9154,
											"name": "tag",
											"source": 13,
											"value": "577"
										},
										{
											"begin": 9134,
											"end": 9154,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9129,
											"end": 9154,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9129,
											"end": 9154,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "578"
										},
										{
											"begin": 9186,
											"end": 9187,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 9168,
											"end": 9188,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "tag",
											"source": 13,
											"value": "578"
										},
										{
											"begin": 9168,
											"end": 9188,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9163,
											"end": 9188,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9163,
											"end": 9188,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9211,
											"end": 9212,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9208,
											"end": 9209,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9204,
											"end": 9213,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9197,
											"end": 9213,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9197,
											"end": 9213,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9232,
											"end": 9235,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9229,
											"end": 9230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9226,
											"end": 9236,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 9223,
											"end": 9259,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9223,
											"end": 9259,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "579"
										},
										{
											"begin": 9223,
											"end": 9259,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "580"
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 9239,
											"end": 9257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "tag",
											"source": 13,
											"value": "580"
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9223,
											"end": 9259,
											"name": "tag",
											"source": 13,
											"value": "579"
										},
										{
											"begin": 9223,
											"end": 9259,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9075,
											"end": 9266,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "tag",
											"source": 13,
											"value": "190"
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9310,
											"end": 9313,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "582"
										},
										{
											"begin": 9345,
											"end": 9346,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 9329,
											"end": 9347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "tag",
											"source": 13,
											"value": "582"
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9347,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9324,
											"end": 9347,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9361,
											"end": 9379,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "583"
										},
										{
											"begin": 9377,
											"end": 9378,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9361,
											"end": 9379,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 9361,
											"end": 9379,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9361,
											"end": 9379,
											"name": "tag",
											"source": 13,
											"value": "583"
										},
										{
											"begin": 9361,
											"end": 9379,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9356,
											"end": 9379,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9356,
											"end": 9379,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9402,
											"end": 9403,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9399,
											"end": 9400,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9395,
											"end": 9404,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9388,
											"end": 9404,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9388,
											"end": 9404,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9425,
											"end": 9429,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 9420,
											"end": 9423,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9417,
											"end": 9430,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 9414,
											"end": 9453,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9414,
											"end": 9453,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "584"
										},
										{
											"begin": 9414,
											"end": 9453,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "585"
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 9433,
											"end": 9451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "tag",
											"source": 13,
											"value": "585"
										},
										{
											"begin": 9433,
											"end": 9451,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9414,
											"end": 9453,
											"name": "tag",
											"source": 13,
											"value": "584"
										},
										{
											"begin": 9414,
											"end": 9453,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9272,
											"end": 9460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "tag",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9506,
											"end": 9510,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9526,
											"end": 9546,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "587"
										},
										{
											"begin": 9544,
											"end": 9545,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9526,
											"end": 9546,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 9526,
											"end": 9546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9526,
											"end": 9546,
											"name": "tag",
											"source": 13,
											"value": "587"
										},
										{
											"begin": 9526,
											"end": 9546,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9521,
											"end": 9546,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9521,
											"end": 9546,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9560,
											"end": 9580,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "588"
										},
										{
											"begin": 9578,
											"end": 9579,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9560,
											"end": 9580,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 9560,
											"end": 9580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9560,
											"end": 9580,
											"name": "tag",
											"source": 13,
											"value": "588"
										},
										{
											"begin": 9560,
											"end": 9580,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9555,
											"end": 9580,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9555,
											"end": 9580,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9604,
											"end": 9605,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9601,
											"end": 9602,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9597,
											"end": 9606,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 9589,
											"end": 9606,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9589,
											"end": 9606,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9628,
											"end": 9629,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9622,
											"end": 9626,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9619,
											"end": 9630,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 9616,
											"end": 9653,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9616,
											"end": 9653,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "589"
										},
										{
											"begin": 9616,
											"end": 9653,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9633,
											"end": 9651,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "590"
										},
										{
											"begin": 9633,
											"end": 9651,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 9633,
											"end": 9651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9633,
											"end": 9651,
											"name": "tag",
											"source": 13,
											"value": "590"
										},
										{
											"begin": 9633,
											"end": 9651,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9616,
											"end": 9653,
											"name": "tag",
											"source": 13,
											"value": "589"
										},
										{
											"begin": 9616,
											"end": 9653,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9466,
											"end": 9660,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "tag",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9815,
											"end": 9819,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9853,
											"end": 9855,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 9842,
											"end": 9851,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9838,
											"end": 9856,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9830,
											"end": 9856,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9830,
											"end": 9856,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9866,
											"end": 9937,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "592"
										},
										{
											"begin": 9934,
											"end": 9935,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9923,
											"end": 9932,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9919,
											"end": 9936,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9910,
											"end": 9916,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 9866,
											"end": 9937,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 9866,
											"end": 9937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9866,
											"end": 9937,
											"name": "tag",
											"source": 13,
											"value": "592"
										},
										{
											"begin": 9866,
											"end": 9937,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9947,
											"end": 10019,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "593"
										},
										{
											"begin": 10015,
											"end": 10017,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10004,
											"end": 10013,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10018,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9991,
											"end": 9997,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 9947,
											"end": 10019,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 9947,
											"end": 10019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9947,
											"end": 10019,
											"name": "tag",
											"source": 13,
											"value": "593"
										},
										{
											"begin": 9947,
											"end": 10019,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10029,
											"end": 10101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "594"
										},
										{
											"begin": 10097,
											"end": 10099,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10086,
											"end": 10095,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10082,
											"end": 10100,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10073,
											"end": 10079,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10029,
											"end": 10101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 10029,
											"end": 10101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10029,
											"end": 10101,
											"name": "tag",
											"source": 13,
											"value": "594"
										},
										{
											"begin": 10029,
											"end": 10101,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 10108,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10114,
											"end": 10216,
											"name": "tag",
											"source": 13,
											"value": "468"
										},
										{
											"begin": 10114,
											"end": 10216,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10156,
											"end": 10164,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10208,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10200,
											"end": 10201,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 10196,
											"end": 10209,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 10175,
											"end": 10209,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10175,
											"end": 10209,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10114,
											"end": 10216,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10114,
											"end": 10216,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10114,
											"end": 10216,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10114,
											"end": 10216,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "tag",
											"source": 13,
											"value": "469"
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10283,
											"end": 10288,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10290,
											"end": 10294,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10314,
											"end": 10320,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10305,
											"end": 10320,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10305,
											"end": 10320,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10338,
											"end": 10343,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10329,
											"end": 10343,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10329,
											"end": 10343,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "tag",
											"source": 13,
											"value": "597"
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10373,
											"end": 10374,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 10363,
											"end": 10371,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 10360,
											"end": 10375,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "599"
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10468,
											"end": 10472,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10463,
											"end": 10466,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 10459,
											"end": 10473,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 10453,
											"end": 10457,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10450,
											"end": 10474,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 10447,
											"end": 10497,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10447,
											"end": 10497,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "600"
										},
										{
											"begin": 10447,
											"end": 10497,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10477,
											"end": 10495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "601"
										},
										{
											"begin": 10477,
											"end": 10495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 10477,
											"end": 10495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10477,
											"end": 10495,
											"name": "tag",
											"source": 13,
											"value": "601"
										},
										{
											"begin": 10477,
											"end": 10495,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10447,
											"end": 10497,
											"name": "tag",
											"source": 13,
											"value": "600"
										},
										{
											"begin": 10447,
											"end": 10497,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10527,
											"end": 10528,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 10517,
											"end": 10525,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 10513,
											"end": 10529,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10510,
											"end": 10961,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10510,
											"end": 10961,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "602"
										},
										{
											"begin": 10510,
											"end": 10961,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10942,
											"end": 10946,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10935,
											"end": 10940,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10931,
											"end": 10947,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 10922,
											"end": 10947,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10922,
											"end": 10947,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10510,
											"end": 10961,
											"name": "tag",
											"source": 13,
											"value": "602"
										},
										{
											"begin": 10510,
											"end": 10961,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10992,
											"end": 10996,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10986,
											"end": 10990,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10982,
											"end": 10997,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 10974,
											"end": 10997,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10974,
											"end": 10997,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11022,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "603"
										},
										{
											"begin": 11045,
											"end": 11053,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 11022,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "468"
										},
										{
											"begin": 11022,
											"end": 11054,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11022,
											"end": 11054,
											"name": "tag",
											"source": 13,
											"value": "603"
										},
										{
											"begin": 11022,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11054,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11054,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "597"
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "tag",
											"source": 13,
											"value": "599"
										},
										{
											"begin": 10352,
											"end": 11064,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10222,
											"end": 11070,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "tag",
											"source": 13,
											"value": "470"
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11130,
											"end": 11135,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11321,
											"end": 11329,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11311,
											"end": 11351,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "605"
										},
										{
											"begin": 11311,
											"end": 11351,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11342,
											"end": 11343,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 11333,
											"end": 11343,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11333,
											"end": 11343,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11344,
											"end": 11349,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11344,
											"end": 11349,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11311,
											"end": 11351,
											"name": "tag",
											"source": 13,
											"value": "605"
										},
										{
											"begin": 11311,
											"end": 11351,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11370,
											"end": 11374,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11360,
											"end": 11396,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "606"
										},
										{
											"begin": 11360,
											"end": 11396,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11387,
											"end": 11388,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 11378,
											"end": 11388,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11378,
											"end": 11388,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11389,
											"end": 11394,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11389,
											"end": 11394,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11360,
											"end": 11396,
											"name": "tag",
											"source": 13,
											"value": "606"
										},
										{
											"begin": 11360,
											"end": 11396,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11456,
											"end": 11460,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11504,
											"end": 11505,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "608"
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11540,
											"end": 11541,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11449,
											"end": 11726,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "607"
										},
										{
											"begin": 11449,
											"end": 11726,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "tag",
											"source": 13,
											"value": "608"
										},
										{
											"begin": 11499,
											"end": 11526,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11517,
											"end": 11518,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 11508,
											"end": 11518,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 11508,
											"end": 11518,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11519,
											"end": 11524,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11519,
											"end": 11524,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11519,
											"end": 11524,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "tag",
											"source": 13,
											"value": "609"
										},
										{
											"begin": 11535,
											"end": 11726,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11580,
											"end": 11583,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 11570,
											"end": 11578,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11567,
											"end": 11584,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 11564,
											"end": 11607,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 11564,
											"end": 11607,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 11564,
											"end": 11607,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11587,
											"end": 11605,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "611"
										},
										{
											"begin": 11587,
											"end": 11605,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 11587,
											"end": 11605,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11587,
											"end": 11605,
											"name": "tag",
											"source": 13,
											"value": "611"
										},
										{
											"begin": 11587,
											"end": 11605,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11564,
											"end": 11607,
											"name": "tag",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 11564,
											"end": 11607,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11636,
											"end": 11644,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11633,
											"end": 11634,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 11629,
											"end": 11645,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 11620,
											"end": 11645,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 11620,
											"end": 11645,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11671,
											"end": 11674,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11664,
											"end": 11669,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11661,
											"end": 11675,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 11658,
											"end": 11698,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 11658,
											"end": 11698,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "612"
										},
										{
											"begin": 11658,
											"end": 11698,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11678,
											"end": 11696,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 11678,
											"end": 11696,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 11678,
											"end": 11696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11678,
											"end": 11696,
											"name": "tag",
											"source": 13,
											"value": "613"
										},
										{
											"begin": 11678,
											"end": 11696,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11658,
											"end": 11698,
											"name": "tag",
											"source": 13,
											"value": "612"
										},
										{
											"begin": 11658,
											"end": 11698,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11711,
											"end": 11716,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11711,
											"end": 11716,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11711,
											"end": 11716,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11449,
											"end": 11726,
											"name": "tag",
											"source": 13,
											"value": "607"
										},
										{
											"begin": 11449,
											"end": 11726,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11449,
											"end": 11726,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11835,
											"end": 11837,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11825,
											"end": 11833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11822,
											"end": 11838,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 11816,
											"end": 11819,
											"name": "PUSH",
											"source": 13,
											"value": "133"
										},
										{
											"begin": 11810,
											"end": 11814,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11807,
											"end": 11820,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 11803,
											"end": 11839,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 11785,
											"end": 11787,
											"name": "PUSH",
											"source": 13,
											"value": "4E"
										},
										{
											"begin": 11775,
											"end": 11783,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11772,
											"end": 11788,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 11767,
											"end": 11769,
											"name": "PUSH",
											"source": 13,
											"value": "B"
										},
										{
											"begin": 11761,
											"end": 11765,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11758,
											"end": 11770,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 11754,
											"end": 11789,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 11738,
											"end": 11849,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 11735,
											"end": 11981,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 11735,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 11735,
											"end": 11981,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11891,
											"end": 11899,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11885,
											"end": 11889,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11881,
											"end": 11900,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 11872,
											"end": 11900,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11872,
											"end": 11900,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11926,
											"end": 11929,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 11919,
											"end": 11924,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11916,
											"end": 11930,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 11913,
											"end": 11953,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 11913,
											"end": 11953,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 11913,
											"end": 11953,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 11933,
											"end": 11951,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "616"
										},
										{
											"begin": 11933,
											"end": 11951,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 11933,
											"end": 11951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11933,
											"end": 11951,
											"name": "tag",
											"source": 13,
											"value": "616"
										},
										{
											"begin": 11933,
											"end": 11951,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11913,
											"end": 11953,
											"name": "tag",
											"source": 13,
											"value": "615"
										},
										{
											"begin": 11913,
											"end": 11953,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11966,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11966,
											"end": 11971,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11735,
											"end": 11981,
											"name": "tag",
											"source": 13,
											"value": "614"
										},
										{
											"begin": 11735,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12006,
											"end": 12048,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "617"
										},
										{
											"begin": 12044,
											"end": 12047,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12034,
											"end": 12042,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12028,
											"end": 12032,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12025,
											"end": 12026,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 12006,
											"end": 12048,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "469"
										},
										{
											"begin": 12006,
											"end": 12048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12006,
											"end": 12048,
											"name": "tag",
											"source": 13,
											"value": "617"
										},
										{
											"begin": 12006,
											"end": 12048,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11991,
											"end": 12048,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 11991,
											"end": 12048,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11991,
											"end": 12048,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11991,
											"end": 12048,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12080,
											"end": 12084,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12075,
											"end": 12078,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12071,
											"end": 12085,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 12064,
											"end": 12069,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12061,
											"end": 12086,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 12058,
											"end": 12109,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 12058,
											"end": 12109,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "618"
										},
										{
											"begin": 12058,
											"end": 12109,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 12089,
											"end": 12107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "619"
										},
										{
											"begin": 12089,
											"end": 12107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "467"
										},
										{
											"begin": 12089,
											"end": 12107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12089,
											"end": 12107,
											"name": "tag",
											"source": 13,
											"value": "619"
										},
										{
											"begin": 12089,
											"end": 12107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12058,
											"end": 12109,
											"name": "tag",
											"source": 13,
											"value": "618"
										},
										{
											"begin": 12058,
											"end": 12109,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12138,
											"end": 12142,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12131,
											"end": 12136,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 12127,
											"end": 12143,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 12118,
											"end": 12143,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12118,
											"end": 12143,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "tag",
											"source": 13,
											"value": "604"
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 11076,
											"end": 12149,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "tag",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12213,
											"end": 12218,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12237,
											"end": 12260,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "621"
										},
										{
											"begin": 12255,
											"end": 12259,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12237,
											"end": 12260,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "442"
										},
										{
											"begin": 12237,
											"end": 12260,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12237,
											"end": 12260,
											"name": "tag",
											"source": 13,
											"value": "621"
										},
										{
											"begin": 12237,
											"end": 12260,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12229,
											"end": 12260,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12229,
											"end": 12260,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12281,
											"end": 12306,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "622"
										},
										{
											"begin": 12297,
											"end": 12305,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12281,
											"end": 12306,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 12281,
											"end": 12306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12281,
											"end": 12306,
											"name": "tag",
											"source": 13,
											"value": "622"
										},
										{
											"begin": 12281,
											"end": 12306,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12306,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12269,
											"end": 12306,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12325,
											"end": 12429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "623"
										},
										{
											"begin": 12362,
											"end": 12428,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12352,
											"end": 12360,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12346,
											"end": 12350,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12325,
											"end": 12429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "470"
										},
										{
											"begin": 12325,
											"end": 12429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12325,
											"end": 12429,
											"name": "tag",
											"source": 13,
											"value": "623"
										},
										{
											"begin": 12325,
											"end": 12429,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12316,
											"end": 12429,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12316,
											"end": 12429,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12155,
											"end": 12436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12442,
											"end": 12622,
											"name": "tag",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 12442,
											"end": 12622,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12490,
											"end": 12567,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12487,
											"end": 12488,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12480,
											"end": 12568,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12587,
											"end": 12591,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 12584,
											"end": 12585,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 12577,
											"end": 12592,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12611,
											"end": 12615,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12608,
											"end": 12609,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12601,
											"end": 12616,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "tag",
											"source": 13,
											"value": "373"
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12749,
											"end": 12753,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12787,
											"end": 12789,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 12776,
											"end": 12785,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12772,
											"end": 12790,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12764,
											"end": 12790,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 12764,
											"end": 12790,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12800,
											"end": 12871,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "626"
										},
										{
											"begin": 12868,
											"end": 12869,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 12857,
											"end": 12866,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12853,
											"end": 12870,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12844,
											"end": 12850,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 12800,
											"end": 12871,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 12800,
											"end": 12871,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12800,
											"end": 12871,
											"name": "tag",
											"source": 13,
											"value": "626"
										},
										{
											"begin": 12800,
											"end": 12871,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12881,
											"end": 12953,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "627"
										},
										{
											"begin": 12949,
											"end": 12951,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 12938,
											"end": 12947,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 12934,
											"end": 12952,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12925,
											"end": 12931,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 12881,
											"end": 12953,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 12881,
											"end": 12953,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12881,
											"end": 12953,
											"name": "tag",
											"source": 13,
											"value": "627"
										},
										{
											"begin": 12881,
											"end": 12953,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12628,
											"end": 12960,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "tag",
											"source": 13,
											"value": "377"
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13087,
											"end": 13091,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13125,
											"end": 13127,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 13114,
											"end": 13123,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13110,
											"end": 13128,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13102,
											"end": 13128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13102,
											"end": 13128,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13138,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "629"
										},
										{
											"begin": 13206,
											"end": 13207,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13195,
											"end": 13204,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13191,
											"end": 13208,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13182,
											"end": 13188,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 13138,
											"end": 13209,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 13138,
											"end": 13209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13138,
											"end": 13209,
											"name": "tag",
											"source": 13,
											"value": "629"
										},
										{
											"begin": 13138,
											"end": 13209,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13219,
											"end": 13291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "630"
										},
										{
											"begin": 13287,
											"end": 13289,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 13276,
											"end": 13285,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13272,
											"end": 13290,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13263,
											"end": 13269,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 13219,
											"end": 13291,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 13219,
											"end": 13291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13219,
											"end": 13291,
											"name": "tag",
											"source": 13,
											"value": "630"
										},
										{
											"begin": 13219,
											"end": 13291,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 12966,
											"end": 13298,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13304,
											"end": 13484,
											"name": "tag",
											"source": 13,
											"value": "395"
										},
										{
											"begin": 13304,
											"end": 13484,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13352,
											"end": 13429,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13349,
											"end": 13350,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13342,
											"end": 13430,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13449,
											"end": 13453,
											"name": "PUSH",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 13446,
											"end": 13447,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 13439,
											"end": 13454,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13473,
											"end": 13477,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13470,
											"end": 13471,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13463,
											"end": 13478,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "tag",
											"source": 13,
											"value": "397"
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13520,
											"end": 13521,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "633"
										},
										{
											"begin": 13553,
											"end": 13554,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 13537,
											"end": 13555,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "tag",
											"source": 13,
											"value": "633"
										},
										{
											"begin": 13537,
											"end": 13555,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13532,
											"end": 13555,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 13532,
											"end": 13555,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13569,
											"end": 13587,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "634"
										},
										{
											"begin": 13585,
											"end": 13586,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13569,
											"end": 13587,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "460"
										},
										{
											"begin": 13569,
											"end": 13587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13569,
											"end": 13587,
											"name": "tag",
											"source": 13,
											"value": "634"
										},
										{
											"begin": 13569,
											"end": 13587,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13564,
											"end": 13587,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 13564,
											"end": 13587,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13606,
											"end": 13607,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13596,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "635"
										},
										{
											"begin": 13596,
											"end": 13631,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 13611,
											"end": 13629,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "636"
										},
										{
											"begin": 13611,
											"end": 13629,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 13611,
											"end": 13629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13611,
											"end": 13629,
											"name": "tag",
											"source": 13,
											"value": "636"
										},
										{
											"begin": 13611,
											"end": 13629,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13596,
											"end": 13631,
											"name": "tag",
											"source": 13,
											"value": "635"
										},
										{
											"begin": 13596,
											"end": 13631,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13652,
											"end": 13653,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13649,
											"end": 13650,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13645,
											"end": 13654,
											"name": "MOD",
											"source": 13
										},
										{
											"begin": 13640,
											"end": 13654,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13640,
											"end": 13654,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13490,
											"end": 13660,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "tag",
											"source": 13,
											"value": "401"
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13815,
											"end": 13819,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13853,
											"end": 13855,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 13842,
											"end": 13851,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13838,
											"end": 13856,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13830,
											"end": 13856,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13830,
											"end": 13856,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13866,
											"end": 13937,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "638"
										},
										{
											"begin": 13934,
											"end": 13935,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 13923,
											"end": 13932,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 13919,
											"end": 13936,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13910,
											"end": 13916,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 13866,
											"end": 13937,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 13866,
											"end": 13937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13866,
											"end": 13937,
											"name": "tag",
											"source": 13,
											"value": "638"
										},
										{
											"begin": 13866,
											"end": 13937,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13947,
											"end": 14019,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "639"
										},
										{
											"begin": 14015,
											"end": 14017,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 14004,
											"end": 14013,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 14000,
											"end": 14018,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13991,
											"end": 13997,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 13947,
											"end": 14019,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "462"
										},
										{
											"begin": 13947,
											"end": 14019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 13947,
											"end": 14019,
											"name": "tag",
											"source": 13,
											"value": "639"
										},
										{
											"begin": 13947,
											"end": 14019,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14029,
											"end": 14101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "640"
										},
										{
											"begin": 14097,
											"end": 14099,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 14086,
											"end": 14095,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 14082,
											"end": 14100,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14073,
											"end": 14079,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14029,
											"end": 14101,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "443"
										},
										{
											"begin": 14029,
											"end": 14101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14029,
											"end": 14101,
											"name": "tag",
											"source": 13,
											"value": "640"
										},
										{
											"begin": 14029,
											"end": 14101,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 13666,
											"end": 14108,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14114,
											"end": 14230,
											"name": "tag",
											"source": 13,
											"value": "471"
										},
										{
											"begin": 14114,
											"end": 14230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14184,
											"end": 14205,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "642"
										},
										{
											"begin": 14199,
											"end": 14204,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14184,
											"end": 14205,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "458"
										},
										{
											"begin": 14184,
											"end": 14205,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14184,
											"end": 14205,
											"name": "tag",
											"source": 13,
											"value": "642"
										},
										{
											"begin": 14184,
											"end": 14205,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14177,
											"end": 14182,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14174,
											"end": 14206,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 14164,
											"end": 14224,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 14164,
											"end": 14224,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14220,
											"end": 14221,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14217,
											"end": 14218,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 14210,
											"end": 14222,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 14164,
											"end": 14224,
											"name": "tag",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 14164,
											"end": 14224,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14114,
											"end": 14230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14114,
											"end": 14230,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "tag",
											"source": 13,
											"value": "472"
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14290,
											"end": 14295,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14321,
											"end": 14327,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14315,
											"end": 14328,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 14306,
											"end": 14328,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14306,
											"end": 14328,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14337,
											"end": 14367,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 14361,
											"end": 14366,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14337,
											"end": 14367,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "471"
										},
										{
											"begin": 14337,
											"end": 14367,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14337,
											"end": 14367,
											"name": "tag",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 14337,
											"end": 14367,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14236,
											"end": 14373,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "tag",
											"source": 13,
											"value": "411"
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14446,
											"end": 14452,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14495,
											"end": 14497,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 14483,
											"end": 14492,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14474,
											"end": 14481,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14470,
											"end": 14493,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 14466,
											"end": 14498,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 14463,
											"end": 14582,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 14463,
											"end": 14582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "647"
										},
										{
											"begin": 14463,
											"end": 14582,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 14501,
											"end": 14580,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 14501,
											"end": 14580,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "450"
										},
										{
											"begin": 14501,
											"end": 14580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14501,
											"end": 14580,
											"name": "tag",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 14501,
											"end": 14580,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14463,
											"end": 14582,
											"name": "tag",
											"source": 13,
											"value": "647"
										},
										{
											"begin": 14463,
											"end": 14582,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14621,
											"end": 14622,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14646,
											"end": 14707,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "649"
										},
										{
											"begin": 14699,
											"end": 14706,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 14690,
											"end": 14696,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14679,
											"end": 14688,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 14675,
											"end": 14697,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14646,
											"end": 14707,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "472"
										},
										{
											"begin": 14646,
											"end": 14707,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14646,
											"end": 14707,
											"name": "tag",
											"source": 13,
											"value": "649"
										},
										{
											"begin": 14646,
											"end": 14707,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14636,
											"end": 14707,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14636,
											"end": 14707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14592,
											"end": 14717,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14379,
											"end": 14724,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14730,
											"end": 14828,
											"name": "tag",
											"source": 13,
											"value": "473"
										},
										{
											"begin": 14730,
											"end": 14828,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14781,
											"end": 14787,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14815,
											"end": 14820,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14809,
											"end": 14821,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 14799,
											"end": 14821,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14799,
											"end": 14821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14730,
											"end": 14828,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14730,
											"end": 14828,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14730,
											"end": 14828,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14730,
											"end": 14828,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "tag",
											"source": 13,
											"value": "474"
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14935,
											"end": 14946,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 14972,
											"end": 14975,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 14957,
											"end": 14975,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14957,
											"end": 14975,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14834,
											"end": 14981,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "tag",
											"source": 13,
											"value": "475"
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15091,
											"end": 15094,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15119,
											"end": 15157,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 15151,
											"end": 15156,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15119,
											"end": 15157,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "473"
										},
										{
											"begin": 15119,
											"end": 15157,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15119,
											"end": 15157,
											"name": "tag",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 15119,
											"end": 15157,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15173,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "654"
										},
										{
											"begin": 15254,
											"end": 15260,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15249,
											"end": 15252,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 15173,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "474"
										},
										{
											"begin": 15173,
											"end": 15261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15173,
											"end": 15261,
											"name": "tag",
											"source": 13,
											"value": "654"
										},
										{
											"begin": 15173,
											"end": 15261,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15166,
											"end": 15261,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 15166,
											"end": 15261,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15270,
											"end": 15335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "655"
										},
										{
											"begin": 15328,
											"end": 15334,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15323,
											"end": 15326,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 15316,
											"end": 15320,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15309,
											"end": 15314,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 15305,
											"end": 15321,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15270,
											"end": 15335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "446"
										},
										{
											"begin": 15270,
											"end": 15335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15270,
											"end": 15335,
											"name": "tag",
											"source": 13,
											"value": "655"
										},
										{
											"begin": 15270,
											"end": 15335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15360,
											"end": 15366,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 15355,
											"end": 15358,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15351,
											"end": 15367,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15344,
											"end": 15367,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15344,
											"end": 15367,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15095,
											"end": 15373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14987,
											"end": 15373,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "tag",
											"source": 13,
											"value": "425"
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15509,
											"end": 15512,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15531,
											"end": 15624,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "657"
										},
										{
											"begin": 15620,
											"end": 15623,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15611,
											"end": 15617,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15531,
											"end": 15624,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "475"
										},
										{
											"begin": 15531,
											"end": 15624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15531,
											"end": 15624,
											"name": "tag",
											"source": 13,
											"value": "657"
										},
										{
											"begin": 15531,
											"end": 15624,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15524,
											"end": 15624,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15524,
											"end": 15624,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15641,
											"end": 15644,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15634,
											"end": 15644,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15634,
											"end": 15644,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 15379,
											"end": 15650,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"src/Vaults.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"entryFeeBasisPoints()": "ba0af7a9",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_BasisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\"},\"previewMint(uint256)\":{\"details\":\"Preview adding an entry fee on mint. See {IERC4626-previewMint}.\"},\"previewRedeem(uint256)\":{\"details\":\"Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\"},\"previewWithdraw(uint256)\":{\"details\":\"Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Vaults.sol\":\"Vaults\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol\":{\"keccak256\":\"0x2a8b251fab0e66d9e3d4db2d0af8deff9822da8f34c74f7cd7cd865639d6b981\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3441907ff96ae299bdf82574ef779885f7c5ecc48d0098bd2e123470d84b7ddc\",\"dweb:/ipfs/QmYrVhfCDgfKdnXCnHhALsUBLUvL8mtWJf1vsEs5B59PUT\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"src/Vaults.sol\":{\"keccak256\":\"0xa5828f1bcd18f6e7451088e15f0d530b54a5f7fdf20c4f77467a15cd791b394a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65055d0abfe6eb3ba10df321afd437e9e2568f98c50d944aa5cad07f6ad3660a\",\"dweb:/ipfs/QmXQMtMg8YU7opHf5i7ZAjgd7uidt9pt1SACaNemDcNAKn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 650,
								"contract": "src/Vaults.sol:Vaults",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 656,
								"contract": "src/Vaults.sol:Vaults",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 658,
								"contract": "src/Vaults.sol:Vaults",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 660,
								"contract": "src/Vaults.sol:Vaults",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 662,
								"contract": "src/Vaults.sol:Vaults",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 3602,
								"contract": "src/Vaults.sol:Vaults",
								"label": "owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address_payable"
							},
							{
								"astId": 3604,
								"contract": "src/Vaults.sol:Vaults",
								"label": "entryFeeBasisPoints",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
					"exportedSymbols": {
						"IERC20": [
							1220
						],
						"IERC20Metadata": [
							1931
						],
						"IERC4626": [
							169
						]
					},
					"id": 170,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 1221,
							"src": "133:49:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "../token/ERC20/extensions/IERC20Metadata.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 1932,
							"src": "183:76:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1931,
										"src": "191:14:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"420:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1220,
										"src": "420:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "420:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC20Metadata",
										"nameLocations": [
											"428:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1931,
										"src": "428:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "428:14:0"
								}
							],
							"canonicalName": "IERC4626",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:136:0",
								"text": " @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."
							},
							"fullyImplemented": false,
							"id": 169,
							"linearizedBaseContracts": [
								169,
								1931,
								1220
							],
							"name": "IERC4626",
							"nameLocation": "408:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7",
									"id": 20,
									"name": "Deposit",
									"nameLocation": "455:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "479:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "463:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "503:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "487:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "518:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "510:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "510:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "534:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "462:79:0"
									},
									"src": "449:93:0"
								},
								{
									"anonymous": false,
									"eventSelector": "fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db",
									"id": 32,
									"name": "Withdraw",
									"nameLocation": "554:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "588:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "572:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "620:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "604:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "654:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "638:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "638:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "677:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "669:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "701:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "693:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:151:0"
									},
									"src": "548:166:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "720:207:0",
										"text": " @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."
									},
									"functionSelector": "38d52e0f",
									"id": 38,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "941:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:0"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "assetTokenAddress",
												"nameLocation": "980:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "972:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:27:0"
									},
									"scope": 169,
									"src": "932:67:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "1005:286:0",
										"text": " @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."
									},
									"functionSelector": "01e1d114",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "1305:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "totalManagedAssets",
												"nameLocation": "1350:18:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1342:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:28:0"
									},
									"scope": 169,
									"src": "1296:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1376:720:0",
										"text": " @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "c6e6f592",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "2110:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2134:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2126:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:16:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2173:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2165:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:16:0"
									},
									"scope": 169,
									"src": "2101:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2187:720:0",
										"text": " @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "07a2d13a",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "2921:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2945:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2937:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2936:16:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2984:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2976:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2976:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2975:16:0"
									},
									"scope": 169,
									"src": "2912:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2998:386:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."
									},
									"functionSelector": "402d267d",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "3398:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3417:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3409:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3408:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "3458:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3450:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3449:19:0"
									},
									"scope": 169,
									"src": "3389:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3475:1012:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "ef8b30f7",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "4501:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "4524:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4516:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4516:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:16:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4563:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4555:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4555:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4554:16:0"
									},
									"scope": 169,
									"src": "4492:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "4577:651:0",
										"text": " @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "6e553f65",
									"id": 86,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "5242:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5258:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5250:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5250:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5274:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5266:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5249:34:0"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "5310:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5302:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5302:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5301:16:0"
									},
									"scope": 169,
									"src": "5233:85:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "5324:341:0",
										"text": " @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."
									},
									"functionSelector": "c63d75b6",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "5679:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5695:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5687:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5687:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:18:0"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "5736:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5728:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 91,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5727:19:0"
									},
									"scope": 169,
									"src": "5670:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "5753:984:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."
									},
									"functionSelector": "b3d7f6b9",
									"id": 102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "6751:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6771:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6763:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6763:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6762:16:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "6810:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6802:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6801:16:0"
									},
									"scope": 169,
									"src": "6742:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "6824:642:0",
										"text": " @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "94bf804d",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7480:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7493:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7485:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7485:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7509:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7501:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7484:34:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7545:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7537:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7537:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7536:16:0"
									},
									"scope": 169,
									"src": "7471:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "7559:293:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "ce96cb77",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "7866:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7886:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7878:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7878:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7877:15:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "7924:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7916:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7916:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7915:19:0"
									},
									"scope": 169,
									"src": "7857:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "7941:1034:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "0a28a477",
									"id": 128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "8989:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9013:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9005:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9004:16:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9052:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9044:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9044:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9043:16:0"
									},
									"scope": 169,
									"src": "8980:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "9066:670:0",
										"text": " @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "b460af94",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "9750:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9767:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9759:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9759:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9801:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9793:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9793:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9758:49:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9834:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9826:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9826:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9825:16:0"
									},
									"scope": 169,
									"src": "9741:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "9848:381:0",
										"text": " @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "d905777e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "10243:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10261:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10253:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10253:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10252:15:0"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "10299:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10291:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10291:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10290:19:0"
									},
									"scope": 169,
									"src": "10234:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "10316:1010:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."
									},
									"functionSelector": "4cdad506",
									"id": 156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "11340:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11362:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11354:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11353:16:0"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11401:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11393:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11393:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11392:16:0"
									},
									"scope": 169,
									"src": "11331:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "11415:661:0",
										"text": " @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "ba087652",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "12090:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "12105:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12097:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12097:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12121:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12113:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12113:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12139:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12131:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12131:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12096:49:0"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "12172:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12164:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12164:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12163:16:0"
									},
									"scope": 169,
									"src": "12081:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 170,
							"src": "398:11784:0",
							"usedErrors": [],
							"usedEvents": [
								20,
								32,
								1154,
								1163
							]
						}
					],
					"src": "107:12076:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							306
						],
						"IERC20Errors": [
							211
						],
						"IERC721Errors": [
							259
						]
					},
					"id": 307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 171,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 211,
							"linearizedBaseContracts": [
								211
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 181,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "652:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "685:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:1"
									},
									"src": "621:80:1"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 186,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:1"
									},
									"src": "864:41:1"
								},
								{
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 191,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1102:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:1"
									},
									"src": "1075:45:1"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 200,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1526:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:1"
									},
									"src": "1476:85:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 205,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1773:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:1"
									},
									"src": "1746:45:1"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 210,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:1"
									},
									"src": "1997:43:1"
								}
							],
							"scope": 307,
							"src": "278:1764:1",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 212,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 259,
							"linearizedBaseContracts": [
								259
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 217,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "2465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:1"
									},
									"src": "2440:40:1"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 222,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "2652:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:1"
									},
									"src": "2623:46:1"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 231,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2996:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3029:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:1"
									},
									"src": "2969:75:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 236,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3233:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:1"
									},
									"src": "3207:42:1"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 241,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3447:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:1"
									},
									"src": "3419:46:1"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 248,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3756:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3774:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:1"
									},
									"src": "3723:68:1"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 253,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "4004:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:1"
									},
									"src": "3976:46:1"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 258,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4258:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:1"
									},
									"src": "4230:46:1"
								}
							],
							"scope": 307,
							"src": "2186:2092:1",
							"usedErrors": [
								217,
								222,
								231,
								236,
								241,
								248,
								253,
								258
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 260,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 306,
							"linearizedBaseContracts": [
								306
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 271,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4854:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4870:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4887:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4903:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:1"
									},
									"src": "4821:99:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 276,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "5110:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:1"
									},
									"src": "5083:43:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 281,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5325:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:1"
									},
									"src": "5296:47:1"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 288,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5645:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5663:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:1"
									},
									"src": "5610:68:1"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 293,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5892:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:1"
									},
									"src": "5863:47:1"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 298,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "6147:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:1"
									},
									"src": "6118:47:1"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 305,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6488:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6507:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:1"
									},
									"src": "6456:73:1"
								}
							],
							"scope": 307,
							"src": "4424:2107:1",
							"usedErrors": [
								271,
								276,
								281,
								288,
								293,
								298,
								305
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
					"exportedSymbols": {
						"ERC4626": [
							1905
						],
						"ERC4626Fees": [
							627
						],
						"IERC20": [
							1220
						],
						"Math": [
							3594
						],
						"SafeERC20": [
							2257
						]
					},
					"id": 628,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../../token/ERC20/IERC20.sol",
							"id": 310,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 628,
							"sourceUnit": 1221,
							"src": "59:52:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 309,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "67:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
							"file": "../../token/ERC20/extensions/ERC4626.sol",
							"id": 312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 628,
							"sourceUnit": 1906,
							"src": "112:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 311,
										"name": "ERC4626",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1905,
										"src": "120:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "../../token/ERC20/utils/SafeERC20.sol",
							"id": 314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 628,
							"sourceUnit": 2258,
							"src": "178:64:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 313,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2257,
										"src": "186:9:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "../../utils/math/Math.sol",
							"id": 316,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 628,
							"sourceUnit": 3595,
							"src": "243:47:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 315,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3594,
										"src": "251:4:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 318,
										"name": "ERC4626",
										"nameLocations": [
											"443:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1905,
										"src": "443:7:2"
									},
									"id": 319,
									"nodeType": "InheritanceSpecifier",
									"src": "443:7:2"
								}
							],
							"canonicalName": "ERC4626Fees",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 317,
								"nodeType": "StructuredDocumentation",
								"src": "292:118:2",
								"text": "@dev ERC4626 vault with entry/exit fees expressed in https://en.wikipedia.org/wiki/Basis_point[basis point (bp)]."
							},
							"fullyImplemented": true,
							"id": 627,
							"linearizedBaseContracts": [
								627,
								1905,
								169,
								1142,
								211,
								1931,
								1220,
								2540
							],
							"name": "ERC4626Fees",
							"nameLocation": "428:11:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 322,
									"libraryName": {
										"id": 320,
										"name": "Math",
										"nameLocations": [
											"463:4:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3594,
										"src": "463:4:2"
									},
									"nodeType": "UsingForDirective",
									"src": "457:23:2",
									"typeName": {
										"id": 321,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "472:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"id": 325,
									"mutability": "constant",
									"name": "_BASIS_POINT_SCALE",
									"nameLocation": "511:18:2",
									"nodeType": "VariableDeclaration",
									"scope": 627,
									"src": "486:49:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 323,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "486:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "316534",
										"id": 324,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "532:3:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10000_by_1",
											"typeString": "int_const 10000"
										},
										"value": "1e4"
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1526
									],
									"body": {
										"id": 349,
										"nodeType": "Block",
										"src": "739:125:2",
										"statements": [
											{
												"assignments": [
													335
												],
												"declarations": [
													{
														"constant": false,
														"id": 335,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "757:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 349,
														"src": "749:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 334,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "749:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 341,
												"initialValue": {
													"arguments": [
														{
															"id": 337,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "775:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 338,
																"name": "_entryFeeBasisPoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 554,
																"src": "783:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "783:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 336,
														"name": "_feeOnTotal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 626,
														"src": "763:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "763:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "749:57:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 344,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "844:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 345,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 335,
																"src": "853:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "844:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 342,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "823:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "829:14:2",
														"memberName": "previewDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1526,
														"src": "823:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "823:34:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 333,
												"id": 348,
												"nodeType": "Return",
												"src": "816:41:2"
											}
										]
									},
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "568:79:2",
										"text": "@dev Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}."
									},
									"functionSelector": "ef8b30f7",
									"id": 350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "661:14:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 330,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "712:8:2"
									},
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "684:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "676:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "676:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "675:16:2"
									},
									"returnParameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "730:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "729:9:2"
									},
									"scope": 627,
									"src": "652:212:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1542
									],
									"body": {
										"id": 374,
										"nodeType": "Block",
										"src": "1032:126:2",
										"statements": [
											{
												"assignments": [
													360
												],
												"declarations": [
													{
														"constant": false,
														"id": 360,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "1050:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 374,
														"src": "1042:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 359,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1042:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 365,
												"initialValue": {
													"arguments": [
														{
															"id": 363,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 353,
															"src": "1077:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 361,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1059:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1065:11:2",
														"memberName": "previewMint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1542,
														"src": "1059:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1059:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1042:42:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 366,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "1101:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [
															{
																"id": 368,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 360,
																"src": "1120:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 369,
																	"name": "_entryFeeBasisPoints",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 554,
																	"src": "1128:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1128:22:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 367,
															"name": "_feeOnRaw",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "1110:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 371,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1110:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1101:50:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 358,
												"id": 373,
												"nodeType": "Return",
												"src": "1094:57:2"
											}
										]
									},
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "870:73:2",
										"text": "@dev Preview adding an entry fee on mint. See {IERC4626-previewMint}."
									},
									"functionSelector": "b3d7f6b9",
									"id": 375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "957:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 355,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1005:8:2"
									},
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "977:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "969:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:16:2"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "1023:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1023:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1022:9:2"
									},
									"scope": 627,
									"src": "948:210:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1558
									],
									"body": {
										"id": 399,
										"nodeType": "Block",
										"src": "1337:123:2",
										"statements": [
											{
												"assignments": [
													385
												],
												"declarations": [
													{
														"constant": false,
														"id": 385,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "1355:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 399,
														"src": "1347:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 384,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1347:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 391,
												"initialValue": {
													"arguments": [
														{
															"id": 387,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 378,
															"src": "1371:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 388,
																"name": "_exitFeeBasisPoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "1379:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1379:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 386,
														"name": "_feeOnRaw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "1361:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1361:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1347:54:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 378,
																"src": "1440:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 395,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "1449:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1440:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 392,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1418:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1424:15:2",
														"memberName": "previewWithdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1558,
														"src": "1418:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1418:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 383,
												"id": 398,
												"nodeType": "Return",
												"src": "1411:42:2"
											}
										]
									},
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "1164:80:2",
										"text": "@dev Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}."
									},
									"functionSelector": "0a28a477",
									"id": 400,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "1258:15:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 380,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1310:8:2"
									},
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1282:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1274:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:16:2"
									},
									"returnParameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1328:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1328:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1327:9:2"
									},
									"scope": 627,
									"src": "1249:211:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1574
									],
									"body": {
										"id": 424,
										"nodeType": "Block",
										"src": "1633:129:2",
										"statements": [
											{
												"assignments": [
													410
												],
												"declarations": [
													{
														"constant": false,
														"id": 410,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "1651:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 424,
														"src": "1643:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 409,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1643:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 415,
												"initialValue": {
													"arguments": [
														{
															"id": 413,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 403,
															"src": "1680:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 411,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1660:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1666:13:2",
														"memberName": "previewRedeem",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1574,
														"src": "1660:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1660:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1643:44:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 416,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 410,
														"src": "1704:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"arguments": [
															{
																"id": 418,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 410,
																"src": "1725:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 419,
																	"name": "_exitFeeBasisPoints",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 562,
																	"src": "1733:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1733:21:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 417,
															"name": "_feeOnTotal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "1713:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 421,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1713:42:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1704:51:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 408,
												"id": 423,
												"nodeType": "Return",
												"src": "1697:58:2"
											}
										]
									},
									"documentation": {
										"id": 401,
										"nodeType": "StructuredDocumentation",
										"src": "1466:76:2",
										"text": "@dev Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}."
									},
									"functionSelector": "4cdad506",
									"id": 425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "1556:13:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 405,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1606:8:2"
									},
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "1578:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1570:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1570:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1569:16:2"
									},
									"returnParameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1624:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1623:9:2"
									},
									"scope": 627,
									"src": "1547:215:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1849
									],
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "1956:316:2",
										"statements": [
											{
												"assignments": [
													439
												],
												"declarations": [
													{
														"constant": false,
														"id": 439,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "1974:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 483,
														"src": "1966:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 438,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1966:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 445,
												"initialValue": {
													"arguments": [
														{
															"id": 441,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "1992:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 442,
																"name": "_entryFeeBasisPoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 554,
																"src": "2000:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2000:22:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 440,
														"name": "_feeOnTotal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 626,
														"src": "1980:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1980:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1966:57:2"
											},
											{
												"assignments": [
													447
												],
												"declarations": [
													{
														"constant": false,
														"id": 447,
														"mutability": "mutable",
														"name": "recipient",
														"nameLocation": "2041:9:2",
														"nodeType": "VariableDeclaration",
														"scope": 483,
														"src": "2033:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 446,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2033:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 450,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 448,
														"name": "_entryFeeRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "2053:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2053:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2033:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 454,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "2099:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 455,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "2107:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 456,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "2117:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 457,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "2125:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 451,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2084:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2090:8:2",
														"memberName": "_deposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1849,
														"src": "2084:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2084:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "2084:48:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 462,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 460,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "2147:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2153:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2147:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 463,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "2158:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"id": 466,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2179:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626Fees_$627",
																		"typeString": "contract ERC4626Fees"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626Fees_$627",
																		"typeString": "contract ERC4626Fees"
																	}
																],
																"id": 465,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2171:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 464,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2171:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2171:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2158:26:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2147:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 482,
												"nodeType": "IfStatement",
												"src": "2143:123:2",
												"trueBody": {
													"id": 481,
													"nodeType": "Block",
													"src": "2186:80:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 474,
																					"name": "asset",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1402,
																					"src": "2230:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2230:7:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 473,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1220,
																			"src": "2223:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$1220_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2223:15:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 477,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 447,
																		"src": "2240:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 478,
																		"name": "fee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 439,
																		"src": "2251:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 470,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2257,
																		"src": "2200:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2257_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2210:12:2",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2017,
																	"src": "2200:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2200:55:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 480,
															"nodeType": "ExpressionStatement",
															"src": "2200:55:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "1768:73:2",
										"text": "@dev Send entry fee to {_entryFeeRecipient}. See {IERC4626-_deposit}."
									},
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deposit",
									"nameLocation": "1855:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 436,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1947:8:2"
									},
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "1872:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "1864:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1888:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "1880:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1880:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1906:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "1898:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1898:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "1922:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "1914:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:66:2"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1956:0:2"
									},
									"scope": 627,
									"src": "1846:426:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1896
									],
									"body": {
										"id": 545,
										"nodeType": "Block",
										"src": "2526:320:2",
										"statements": [
											{
												"assignments": [
													500
												],
												"declarations": [
													{
														"constant": false,
														"id": 500,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "2544:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 545,
														"src": "2536:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 499,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2536:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 506,
												"initialValue": {
													"arguments": [
														{
															"id": 502,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "2560:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 503,
																"name": "_exitFeeBasisPoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "2568:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2568:21:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 501,
														"name": "_feeOnRaw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 604,
														"src": "2550:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2550:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2536:54:2"
											},
											{
												"assignments": [
													508
												],
												"declarations": [
													{
														"constant": false,
														"id": 508,
														"mutability": "mutable",
														"name": "recipient",
														"nameLocation": "2608:9:2",
														"nodeType": "VariableDeclaration",
														"scope": 545,
														"src": "2600:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 507,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2600:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 511,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 509,
														"name": "_exitFeeRecipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "2620:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2620:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2600:39:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "2666:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 516,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "2674:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 517,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 491,
															"src": "2684:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 518,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "2691:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 519,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 495,
															"src": "2699:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 512,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2650:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC4626Fees_$627_$",
																"typeString": "type(contract super ERC4626Fees)"
															}
														},
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2656:9:2",
														"memberName": "_withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1896,
														"src": "2650:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 521,
												"nodeType": "ExpressionStatement",
												"src": "2650:56:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 524,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 522,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "2721:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2727:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2721:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 525,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "2732:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"id": 528,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2753:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626Fees_$627",
																		"typeString": "contract ERC4626Fees"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626Fees_$627",
																		"typeString": "contract ERC4626Fees"
																	}
																],
																"id": 527,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2745:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 526,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2745:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2745:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2732:26:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2721:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 544,
												"nodeType": "IfStatement",
												"src": "2717:123:2",
												"trueBody": {
													"id": 543,
													"nodeType": "Block",
													"src": "2760:80:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 536,
																					"name": "asset",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1402,
																					"src": "2804:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 537,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2804:7:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 535,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1220,
																			"src": "2797:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$1220_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 538,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2797:15:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 539,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 508,
																		"src": "2814:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 540,
																		"name": "fee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 500,
																		"src": "2825:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 532,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2257,
																		"src": "2774:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2257_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2784:12:2",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2017,
																	"src": "2774:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2774:55:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 542,
															"nodeType": "ExpressionStatement",
															"src": "2774:55:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "2278:71:2",
										"text": "@dev Send exit fee to {_exitFeeRecipient}. See {IERC4626-_deposit}."
									},
									"id": 546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdraw",
									"nameLocation": "2363:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 497,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2517:8:2"
									},
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "2390:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2382:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2382:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "2414:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2406:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 488,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2440:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2432:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2432:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2463:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2455:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2487:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2479:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2479:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2372:127:2"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2526:0:2"
									},
									"scope": 627,
									"src": "2354:492:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 553,
										"nodeType": "Block",
										"src": "2958:57:2",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2975:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 550,
												"id": 552,
												"nodeType": "Return",
												"src": "2968:8:2"
											}
										]
									},
									"id": 554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_entryFeeBasisPoints",
									"nameLocation": "2895:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2915:2:2"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "2949:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:9:2"
									},
									"scope": 627,
									"src": "2886:129:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "3092:57:2",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3109:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 558,
												"id": 560,
												"nodeType": "Return",
												"src": "3102:8:2"
											}
										]
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exitFeeBasisPoints",
									"nameLocation": "3030:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:2"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "3083:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3083:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3082:9:2"
									},
									"scope": 627,
									"src": "3021:128:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "3225:74:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 569,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3250:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3242:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 567,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3242:10:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 566,
												"id": 571,
												"nodeType": "Return",
												"src": "3235:17:2"
											}
										]
									},
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_entryFeeRecipient",
									"nameLocation": "3164:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3182:2:2"
									},
									"returnParameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "3216:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3216:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3215:9:2"
									},
									"scope": 627,
									"src": "3155:144:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "3374:74:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3399:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 579,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3391:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 578,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3391:7:2",
															"typeDescriptions": {}
														}
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3391:10:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 577,
												"id": 582,
												"nodeType": "Return",
												"src": "3384:17:2"
											}
										]
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exitFeeRecipient",
									"nameLocation": "3314:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3331:2:2"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "3365:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3365:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3364:9:2"
									},
									"scope": 627,
									"src": "3305:143:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 603,
										"nodeType": "Block",
										"src": "3755:93:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 596,
															"name": "feeBasisPoints",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "3786:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 597,
															"name": "_BASIS_POINT_SCALE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 325,
															"src": "3802:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 598,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "3822:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3827:8:2",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "3822:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3836:4:2",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2548,
															"src": "3822:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 594,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3772:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3779:6:2",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2971,
														"src": "3772:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3772:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 593,
												"id": 602,
												"nodeType": "Return",
												"src": "3765:76:2"
											}
										]
									},
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "3485:175:2",
										"text": "@dev Calculates the fees that should be added to an amount `assets` that does not already include fees.\n Used in {IERC4626-mint} and {IERC4626-withdraw} operations."
									},
									"id": 604,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_feeOnRaw",
									"nameLocation": "3674:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3692:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "3684:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3684:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "feeBasisPoints",
												"nameLocation": "3708:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "3700:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3700:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3683:40:2"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "3746:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3746:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3745:9:2"
									},
									"scope": 627,
									"src": "3665:183:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 625,
										"nodeType": "Block",
										"src": "4102:110:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "feeBasisPoints",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "4133:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 617,
																"name": "feeBasisPoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 609,
																"src": "4149:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 618,
																"name": "_BASIS_POINT_SCALE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "4166:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4149:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 620,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "4186:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4191:8:2",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "4186:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4200:4:2",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2548,
															"src": "4186:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 614,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "4119:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4126:6:2",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2971,
														"src": "4119:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4119:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 613,
												"id": 624,
												"nodeType": "Return",
												"src": "4112:93:2"
											}
										]
									},
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "3854:151:2",
										"text": "@dev Calculates the fee part of an amount `assets` that already includes fees.\n Used in {IERC4626-deposit} and {IERC4626-redeem} operations."
									},
									"id": 626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_feeOnTotal",
									"nameLocation": "4019:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "4039:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "4031:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4031:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "feeBasisPoints",
												"nameLocation": "4055:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "4047:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4047:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4030:40:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 626,
												"src": "4093:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4093:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4092:9:2"
									},
									"scope": 627,
									"src": "4010:202:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 628,
							"src": "410:3804:2",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								1254,
								1263,
								1272,
								1281,
								1984,
								2265,
								2270,
								2273,
								2546
							],
							"usedEvents": [
								20,
								32,
								1154,
								1163
							]
						}
					],
					"src": "33:4182:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							2540
						],
						"ERC20": [
							1142
						],
						"IERC20": [
							1220
						],
						"IERC20Errors": [
							211
						],
						"IERC20Metadata": [
							1931
						]
					},
					"id": 1143,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 629,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 631,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1143,
							"sourceUnit": 1221,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 630,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 633,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1143,
							"sourceUnit": 1932,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 632,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1931,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 635,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1143,
							"sourceUnit": 2541,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 634,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2540,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 637,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1143,
							"sourceUnit": 307,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 636,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 211,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 639,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2540,
										"src": "1428:7:3"
									},
									"id": 640,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 641,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1220,
										"src": "1437:6:3"
									},
									"id": 642,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 643,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1931,
										"src": "1445:14:3"
									},
									"id": 644,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 645,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 211,
										"src": "1461:12:3"
									},
									"id": 646,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 638,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 1142,
							"linearizedBaseContracts": [
								1142,
								211,
								1931,
								1220,
								2540
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 650,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1142,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 649,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 647,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 648,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 656,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 1142,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 655,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 651,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 654,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 652,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 653,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 658,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 1142,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 657,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 660,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 1142,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 659,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 662,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1142,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 661,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 678,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 670,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 660,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 671,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 665,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 673,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 674,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 662,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 675,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 679,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 664,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 666,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 669,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 1142,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1918
									],
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 685,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 660,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 684,
												"id": 686,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 682,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 1142,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1924
									],
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 694,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 662,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 693,
												"id": 695,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 689,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 691,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 1142,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1930
									],
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 702,
												"id": 704,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 700,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 1142,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1169
									],
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 712,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 658,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 711,
												"id": 713,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 1142,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1177
									],
									"body": {
										"id": 727,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 723,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 725,
													"indexExpression": {
														"id": 724,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 722,
												"id": 726,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 728,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 1142,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1187
									],
									"body": {
										"id": 751,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													739
												],
												"declarations": [
													{
														"constant": false,
														"id": 739,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 751,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 738,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 742,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 740,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2522,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 744,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 745,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 746,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 733,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 743,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 748,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 749,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 737,
												"id": 750,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 729,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 735,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 1142,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1197
									],
									"body": {
										"id": 768,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 762,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 764,
														"indexExpression": {
															"id": 763,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 766,
													"indexExpression": {
														"id": 765,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 757,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 761,
												"id": 767,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 753,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 769,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 1142,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1207
									],
									"body": {
										"id": 792,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													780
												],
												"declarations": [
													{
														"constant": false,
														"id": 780,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 792,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 779,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 783,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 781,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2522,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 785,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 786,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 772,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 787,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 774,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 784,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1033,
															1093
														],
														"referencedDeclaration": 1033,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 789,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 790,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 778,
												"id": 791,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 770,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 793,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 793,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 771,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 793,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 793,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 776,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 1142,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1219
									],
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													806
												],
												"declarations": [
													{
														"constant": false,
														"id": 806,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 824,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 805,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 809,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 807,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2522,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 811,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 796,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 812,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 813,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 810,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 815,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 817,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 796,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 818,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 819,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 816,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 821,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 804,
												"id": 823,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 794,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 795,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 797,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 799,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 802,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 1142,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 871,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 835,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 828,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 838,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 837,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 836,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 839,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 849,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 848,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 844,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 842,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 845,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 841,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 846,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 847,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 850,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 851,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 854,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 864,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 863,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 859,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 858,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 857,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 856,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 862,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 866,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 867,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 868,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 865,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 870,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 826,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 1142,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 948,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 882,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 883,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 886,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 919,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																894
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 894,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 919,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 893,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 898,
															"initialValue": {
																"baseExpression": {
																	"id": 895,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 650,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 897,
																"indexExpression": {
																	"id": 896,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 875,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 899,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 894,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 900,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 879,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 909,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 908,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 903,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 875,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 904,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 894,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 905,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 879,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 902,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 181,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 906,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 907,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 918,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 910,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 650,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 912,
																			"indexExpression": {
																				"id": 911,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 875,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 913,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 894,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 914,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 879,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 917,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 920,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 892,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 890,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 888,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 658,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 889,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 879,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 891,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 921,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 924,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 923,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 922,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 925,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 940,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 939,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 937,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 933,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 650,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 935,
																			"indexExpression": {
																				"id": 934,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 877,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 936,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 879,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 938,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 941,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 932,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 931,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 927,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 658,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 928,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 879,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 930,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 943,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 944,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 945,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 942,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1154,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 947,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 949,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 876,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 1142,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 957,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 952,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 960,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 958,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 971,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 970,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 966,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 965,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 964,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 967,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 963,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 969,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 973,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 977,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 952,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 978,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 954,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 972,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 980,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 950,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 951,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 953,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 1142,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1014,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 990,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 985,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 993,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 992,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 991,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 994,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1004,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 1003,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 999,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 997,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1000,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 996,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1002,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1006,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 985,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1009,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1008,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1007,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1010,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1011,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1005,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 949,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1013,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 1015,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 1142,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1026,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1018,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1027,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1020,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1028,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1022,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1029,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1025,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1033,
															1093
														],
														"referencedDeclaration": 1093,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 1016,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 1142,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1045,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1036,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1048,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1047,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1046,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1049,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1059,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 1058,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1054,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1053,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1052,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1055,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1051,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1057,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1060,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1038,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1063,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1061,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1064,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1074,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 1073,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1069,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1067,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1066,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 210,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1071,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1072,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1075,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1078,
															"indexExpression": {
																"id": 1076,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1036,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1079,
														"indexExpression": {
															"id": 1077,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1038,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1080,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1082,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 1083,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1042,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1091,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 1090,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1085,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1036,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1086,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1087,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1040,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1084,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1163,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1089,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1039,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1041,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 1142,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1140,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													1104
												],
												"declarations": [
													{
														"constant": false,
														"id": 1104,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 1140,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1103,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1109,
												"initialValue": {
													"arguments": [
														{
															"id": 1106,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1096,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1107,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1098,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1105,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 769,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1110,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1104,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1112,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1111,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1139,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 1138,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1117,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1104,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1118,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1127,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 1126,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1121,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1098,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1122,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1104,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1123,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1100,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1120,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 200,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 1124,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1125,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 1137,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1129,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1096,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1130,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1098,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1131,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1104,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1132,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1100,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1134,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1128,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				1033,
																				1093
																			],
																			"referencedDeclaration": 1093,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1136,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1099,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 1142,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1143,
							"src": "1401:9741:3",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": [
								1154,
								1163
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1220
						]
					},
					"id": 1221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1144,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1145,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1220,
							"linearizedBaseContracts": [
								1220
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1146,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1154,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1155,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1163,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1157,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 1164,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1169,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1169,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 1220,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1170,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1172,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1177,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1177,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 1220,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1178,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1187,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1184,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 1220,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1188,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 1220,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1204,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 1220,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1216,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 1220,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1221,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								1154,
								1163
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
					"exportedSymbols": {
						"ERC20": [
							1142
						],
						"ERC4626": [
							1905
						],
						"IERC20": [
							1220
						],
						"IERC20Metadata": [
							1931
						],
						"IERC4626": [
							169
						],
						"Math": [
							3594
						],
						"SafeERC20": [
							2257
						]
					},
					"id": 1906,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:5"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1906,
							"sourceUnit": 1143,
							"src": "144:59:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1223,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "152:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1224,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1931,
										"src": "160:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1225,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1142,
										"src": "176:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "../utils/SafeERC20.sol",
							"id": 1228,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1906,
							"sourceUnit": 2258,
							"src": "204:49:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1227,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2257,
										"src": "212:9:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
							"file": "../../../interfaces/IERC4626.sol",
							"id": 1230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1906,
							"sourceUnit": 170,
							"src": "254:58:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1229,
										"name": "IERC4626",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 169,
										"src": "262:8:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "../../../utils/math/Math.sol",
							"id": 1232,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1906,
							"sourceUnit": 3595,
							"src": "313:50:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1231,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3594,
										"src": "321:4:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1234,
										"name": "ERC20",
										"nameLocations": [
											"3187:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1142,
										"src": "3187:5:5"
									},
									"id": 1235,
									"nodeType": "InheritanceSpecifier",
									"src": "3187:5:5"
								},
								{
									"baseName": {
										"id": 1236,
										"name": "IERC4626",
										"nameLocations": [
											"3194:8:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 169,
										"src": "3194:8:5"
									},
									"id": 1237,
									"nodeType": "InheritanceSpecifier",
									"src": "3194:8:5"
								}
							],
							"canonicalName": "ERC4626",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1233,
								"nodeType": "StructuredDocumentation",
								"src": "365:2792:5",
								"text": " @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n contract and not the \"assets\" token which is an independent contract.\n [CAUTION]\n ====\n In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n verifying the amount received is as expected, using a wrapper that performs these checks such as\n https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n expensive than it is profitable. More details about the underlying math can be found\n xref:erc4626.adoc#inflation-attack[here].\n The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n `_convertToShares` and `_convertToAssets` functions.\n To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n ===="
							},
							"fullyImplemented": true,
							"id": 1905,
							"linearizedBaseContracts": [
								1905,
								169,
								1142,
								211,
								1931,
								1220,
								2540
							],
							"name": "ERC4626",
							"nameLocation": "3176:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1240,
									"libraryName": {
										"id": 1238,
										"name": "Math",
										"nameLocations": [
											"3215:4:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3594,
										"src": "3215:4:5"
									},
									"nodeType": "UsingForDirective",
									"src": "3209:23:5",
									"typeName": {
										"id": 1239,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3224:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1243,
									"mutability": "immutable",
									"name": "_asset",
									"nameLocation": "3263:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 1905,
									"src": "3238:31:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$1220",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1242,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1241,
											"name": "IERC20",
											"nameLocations": [
												"3238:6:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1220,
											"src": "3238:6:5"
										},
										"referencedDeclaration": 1220,
										"src": "3238:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$1220",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1245,
									"mutability": "immutable",
									"name": "_underlyingDecimals",
									"nameLocation": "3299:19:5",
									"nodeType": "VariableDeclaration",
									"scope": 1905,
									"src": "3275:43:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1244,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3275:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1246,
										"nodeType": "StructuredDocumentation",
										"src": "3325:92:5",
										"text": " @dev Attempted to deposit more assets than the max amount for `receiver`."
									},
									"errorSelector": "79012fb2",
									"id": 1254,
									"name": "ERC4626ExceededMaxDeposit",
									"nameLocation": "3428:25:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3462:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3454:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3454:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3480:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3472:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3472:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3496:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3488:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3453:47:5"
									},
									"src": "3422:79:5"
								},
								{
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "3507:89:5",
										"text": " @dev Attempted to mint more shares than the max amount for `receiver`."
									},
									"errorSelector": "284ff667",
									"id": 1263,
									"name": "ERC4626ExceededMaxMint",
									"nameLocation": "3607:22:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3638:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "3630:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "3656:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "3648:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3648:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3672:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "3664:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:47:5"
									},
									"src": "3601:76:5"
								},
								{
									"documentation": {
										"id": 1264,
										"nodeType": "StructuredDocumentation",
										"src": "3683:93:5",
										"text": " @dev Attempted to withdraw more assets than the max amount for `receiver`."
									},
									"errorSelector": "fe9cceec",
									"id": 1272,
									"name": "ERC4626ExceededMaxWithdraw",
									"nameLocation": "3787:26:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3822:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "3814:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3814:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3837:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "3829:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3829:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3853:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "3845:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3845:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3813:44:5"
									},
									"src": "3781:77:5"
								},
								{
									"documentation": {
										"id": 1273,
										"nodeType": "StructuredDocumentation",
										"src": "3864:91:5",
										"text": " @dev Attempted to redeem more shares than the max amount for `receiver`."
									},
									"errorSelector": "b94abeec",
									"id": 1281,
									"name": "ERC4626ExceededMaxRedeem",
									"nameLocation": "3966:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3999:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "3991:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3991:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4014:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "4006:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "4030:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "4022:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4022:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:44:5"
									},
									"src": "3960:75:5"
								},
								{
									"body": {
										"id": 1307,
										"nodeType": "Block",
										"src": "4192:168:5",
										"statements": [
											{
												"assignments": [
													1289,
													1291
												],
												"declarations": [
													{
														"constant": false,
														"id": 1289,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4208:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "4203:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1288,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4203:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1291,
														"mutability": "mutable",
														"name": "assetDecimals",
														"nameLocation": "4223:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "4217:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1290,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4217:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1295,
												"initialValue": {
													"arguments": [
														{
															"id": 1293,
															"name": "asset_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1285,
															"src": "4261:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														],
														"id": 1292,
														"name": "_tryGetAssetDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1375,
														"src": "4240:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_contract$_IERC20_$1220_$returns$_t_bool_$_t_uint8_$",
															"typeString": "function (contract IERC20) view returns (bool,uint8)"
														}
													},
													"id": 1294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4240:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
														"typeString": "tuple(bool,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4202:66:5"
											},
											{
												"expression": {
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1296,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "4278:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 1297,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1289,
															"src": "4300:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"hexValue": "3138",
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4326:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															"value": "18"
														},
														"id": 1300,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "4300:28:5",
														"trueExpression": {
															"id": 1298,
															"name": "assetDecimals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1291,
															"src": "4310:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4278:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "4278:50:5"
											},
											{
												"expression": {
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1303,
														"name": "_asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "4338:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1220",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1304,
														"name": "asset_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1285,
														"src": "4347:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1220",
															"typeString": "contract IERC20"
														}
													},
													"src": "4338:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"id": 1306,
												"nodeType": "ExpressionStatement",
												"src": "4338:15:5"
											}
										]
									},
									"documentation": {
										"id": 1282,
										"nodeType": "StructuredDocumentation",
										"src": "4041:119:5",
										"text": " @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
									},
									"id": 1308,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4184:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "4177:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1284,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1283,
														"name": "IERC20",
														"nameLocations": [
															"4177:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "4177:6:5"
													},
													"referencedDeclaration": 1220,
													"src": "4177:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4176:15:5"
									},
									"returnParameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4192:0:5"
									},
									"scope": 1905,
									"src": "4165:195:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1374,
										"nodeType": "Block",
										"src": "4583:453:5",
										"statements": [
											{
												"assignments": [
													1320,
													1322
												],
												"declarations": [
													{
														"constant": false,
														"id": 1320,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4599:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1374,
														"src": "4594:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1319,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4594:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1322,
														"mutability": "mutable",
														"name": "encodedDecimals",
														"nameLocation": "4621:15:5",
														"nodeType": "VariableDeclaration",
														"scope": 1374,
														"src": "4608:28:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1321,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4608:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1335,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1330,
																		"name": "IERC20Metadata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1931,
																		"src": "4695:14:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1931_$",
																			"typeString": "type(contract IERC20Metadata)"
																		}
																	},
																	"id": 1331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4710:8:5",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1930,
																	"src": "4695:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	}
																},
																{
																	"components": [],
																	"id": 1332,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4720:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	},
																	{
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																],
																"expression": {
																	"id": 1328,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4680:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1329,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4684:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "4680:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4680:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1325,
																	"name": "asset_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1312,
																	"src": "4648:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4640:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1323,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4640:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4640:15:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1327,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4656:10:5",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "4640:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4640:93:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4593:140:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1336,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "4747:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1337,
																"name": "encodedDecimals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1322,
																"src": "4758:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4774:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4758:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3332",
															"id": 1339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4784:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "4758:28:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4747:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "4743:260:5",
												"trueBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "4788:215:5",
													"statements": [
														{
															"assignments": [
																1343
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1343,
																	"mutability": "mutable",
																	"name": "returnedDecimals",
																	"nameLocation": "4810:16:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1368,
																	"src": "4802:24:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1342,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4802:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1351,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1346,
																		"name": "encodedDecimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1322,
																		"src": "4840:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 1348,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4858:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1347,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4858:7:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1349,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4857:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	],
																	"expression": {
																		"id": 1344,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "4829:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1345,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4833:6:5",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "4829:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4829:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4802:65:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1358,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1352,
																	"name": "returnedDecimals",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1343,
																	"src": "4885:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4910:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1354,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4910:5:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 1353,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "4905:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4905:11:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 1357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4917:3:5",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "4905:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4885:35:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1367,
															"nodeType": "IfStatement",
															"src": "4881:112:5",
															"trueBody": {
																"id": 1366,
																"nodeType": "Block",
																"src": "4922:71:5",
																"statements": [
																	{
																		"expression": {
																			"components": [
																				{
																					"hexValue": "74727565",
																					"id": 1359,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4948:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				{
																					"arguments": [
																						{
																							"id": 1362,
																							"name": "returnedDecimals",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1343,
																							"src": "4960:16:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1361,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4954:5:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint8_$",
																							"typeString": "type(uint8)"
																						},
																						"typeName": {
																							"id": 1360,
																							"name": "uint8",
																							"nodeType": "ElementaryTypeName",
																							"src": "4954:5:5",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1363,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4954:23:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				}
																			],
																			"id": 1364,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4947:31:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
																				"typeString": "tuple(bool,uint8)"
																			}
																		},
																		"functionReturnParameters": 1318,
																		"id": 1365,
																		"nodeType": "Return",
																		"src": "4940:38:5"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "66616c7365",
															"id": 1370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5020:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"hexValue": "30",
															"id": 1371,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5027:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"id": 1372,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5019:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
														"typeString": "tuple(bool,int_const 0)"
													}
												},
												"functionReturnParameters": 1318,
												"id": 1373,
												"nodeType": "Return",
												"src": "5012:17:5"
											}
										]
									},
									"documentation": {
										"id": 1309,
										"nodeType": "StructuredDocumentation",
										"src": "4366:132:5",
										"text": " @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way."
									},
									"id": 1375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_tryGetAssetDecimals",
									"nameLocation": "4512:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4540:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "4533:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1311,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1310,
														"name": "IERC20",
														"nameLocations": [
															"4533:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "4533:6:5"
													},
													"referencedDeclaration": 1220,
													"src": "4533:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4532:15:5"
									},
									"returnParameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "4570:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1314,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4570:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "4576:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1316,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4576:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4569:13:5"
									},
									"scope": 1905,
									"src": "4503:533:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										706,
										1930
									],
									"body": {
										"id": 1389,
										"nodeType": "Block",
										"src": "5529:63:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1387,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1384,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "5546:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1385,
															"name": "_decimalsOffset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1904,
															"src": "5568:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																"typeString": "function () view returns (uint8)"
															}
														},
														"id": 1386,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5568:17:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5546:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1383,
												"id": 1388,
												"nodeType": "Return",
												"src": "5539:46:5"
											}
										]
									},
									"documentation": {
										"id": 1376,
										"nodeType": "StructuredDocumentation",
										"src": "5042:394:5",
										"text": " @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n See {IERC20Metadata-decimals}."
									},
									"functionSelector": "313ce567",
									"id": 1390,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "5450:8:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1380,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1378,
												"name": "IERC20Metadata",
												"nameLocations": [
													"5490:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1931,
												"src": "5490:14:5"
											},
											{
												"id": 1379,
												"name": "ERC20",
												"nameLocations": [
													"5506:5:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1142,
												"src": "5506:5:5"
											}
										],
										"src": "5481:31:5"
									},
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5458:2:5"
									},
									"returnParameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1390,
												"src": "5522:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1381,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:7:5"
									},
									"scope": 1905,
									"src": "5441:151:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										38
									],
									"body": {
										"id": 1401,
										"nodeType": "Block",
										"src": "5691:39:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1398,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "5716:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														],
														"id": 1397,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5708:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1396,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5708:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5708:15:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1395,
												"id": 1400,
												"nodeType": "Return",
												"src": "5701:22:5"
											}
										]
									},
									"documentation": {
										"id": 1391,
										"nodeType": "StructuredDocumentation",
										"src": "5598:33:5",
										"text": "@dev See {IERC4626-asset}. "
									},
									"functionSelector": "38d52e0f",
									"id": 1402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "5645:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:5"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1402,
												"src": "5682:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5681:9:5"
									},
									"scope": 1905,
									"src": "5636:94:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										44
									],
									"body": {
										"id": 1416,
										"nodeType": "Block",
										"src": "5841:55:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1412,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5883:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1905",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1905",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5875:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1410,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5875:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5875:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1408,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "5858:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														"id": 1409,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5865:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1177,
														"src": "5858:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5858:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1407,
												"id": 1415,
												"nodeType": "Return",
												"src": "5851:38:5"
											}
										]
									},
									"documentation": {
										"id": 1403,
										"nodeType": "StructuredDocumentation",
										"src": "5736:39:5",
										"text": "@dev See {IERC4626-totalAssets}. "
									},
									"functionSelector": "01e1d114",
									"id": 1417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "5789:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5800:2:5"
									},
									"returnParameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "5832:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5832:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5831:9:5"
									},
									"scope": 1905,
									"src": "5780:116:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										52
									],
									"body": {
										"id": 1432,
										"nodeType": "Block",
										"src": "6029:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1426,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1420,
															"src": "6063:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1427,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "6071:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1428,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6076:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "6071:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1429,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6085:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2547,
															"src": "6071:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1425,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1784,
														"src": "6046:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1424,
												"id": 1431,
												"nodeType": "Return",
												"src": "6039:52:5"
											}
										]
									},
									"documentation": {
										"id": 1418,
										"nodeType": "StructuredDocumentation",
										"src": "5902:43:5",
										"text": "@dev See {IERC4626-convertToShares}. "
									},
									"functionSelector": "c6e6f592",
									"id": 1433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "5959:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5983:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1433,
												"src": "5975:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5975:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5974:16:5"
									},
									"returnParameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1433,
												"src": "6020:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6019:9:5"
									},
									"scope": 1905,
									"src": "5950:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 1448,
										"nodeType": "Block",
										"src": "6231:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1442,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "6265:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1443,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "6273:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1444,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6278:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "6273:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6287:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2547,
															"src": "6273:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1441,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "6248:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6248:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1440,
												"id": 1447,
												"nodeType": "Return",
												"src": "6241:52:5"
											}
										]
									},
									"documentation": {
										"id": 1434,
										"nodeType": "StructuredDocumentation",
										"src": "6104:43:5",
										"text": "@dev See {IERC4626-convertToAssets}. "
									},
									"functionSelector": "07a2d13a",
									"id": 1449,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "6161:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6185:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "6177:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6176:16:5"
									},
									"returnParameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "6222:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6222:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6221:9:5"
									},
									"scope": 1905,
									"src": "6152:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										68
									],
									"body": {
										"id": 1463,
										"nodeType": "Block",
										"src": "6416:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6438:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1458,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6438:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1457,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6433:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6433:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6447:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6433:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1456,
												"id": 1462,
												"nodeType": "Return",
												"src": "6426:24:5"
											}
										]
									},
									"documentation": {
										"id": 1450,
										"nodeType": "StructuredDocumentation",
										"src": "6306:38:5",
										"text": "@dev See {IERC4626-maxDeposit}. "
									},
									"functionSelector": "402d267d",
									"id": 1464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "6358:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "6369:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6369:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:9:5"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "6407:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6407:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6406:9:5"
									},
									"scope": 1905,
									"src": "6349:108:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										94
									],
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "6567:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6589:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1473,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6589:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1472,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6584:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1475,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6584:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6598:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6584:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1471,
												"id": 1477,
												"nodeType": "Return",
												"src": "6577:24:5"
											}
										]
									},
									"documentation": {
										"id": 1465,
										"nodeType": "StructuredDocumentation",
										"src": "6463:35:5",
										"text": "@dev See {IERC4626-maxMint}. "
									},
									"functionSelector": "c63d75b6",
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "6512:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "6520:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6520:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6519:9:5"
									},
									"returnParameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "6558:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1469,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6557:9:5"
									},
									"scope": 1905,
									"src": "6503:105:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										120
									],
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "6732:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1489,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1482,
																	"src": "6776:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1488,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 728,
																"src": "6766:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6766:16:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1491,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "6784:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6789:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "6784:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1493,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6798:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2547,
															"src": "6784:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1487,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "6749:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1486,
												"id": 1495,
												"nodeType": "Return",
												"src": "6742:62:5"
											}
										]
									},
									"documentation": {
										"id": 1480,
										"nodeType": "StructuredDocumentation",
										"src": "6614:39:5",
										"text": "@dev See {IERC4626-maxWithdraw}. "
									},
									"functionSelector": "ce96cb77",
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "6667:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6687:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "6679:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6679:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6678:15:5"
									},
									"returnParameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "6723:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6723:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6722:9:5"
									},
									"scope": 1905,
									"src": "6658:153:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										148
									],
									"body": {
										"id": 1509,
										"nodeType": "Block",
										"src": "6931:40:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1506,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "6958:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1505,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 728,
														"src": "6948:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6948:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1504,
												"id": 1508,
												"nodeType": "Return",
												"src": "6941:23:5"
											}
										]
									},
									"documentation": {
										"id": 1498,
										"nodeType": "StructuredDocumentation",
										"src": "6817:37:5",
										"text": "@dev See {IERC4626-maxRedeem}. "
									},
									"functionSelector": "d905777e",
									"id": 1510,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "6868:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6886:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "6878:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6878:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6877:15:5"
									},
									"returnParameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "6922:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6922:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6921:9:5"
									},
									"scope": 1905,
									"src": "6859:112:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										76
									],
									"body": {
										"id": 1525,
										"nodeType": "Block",
										"src": "7102:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1519,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1513,
															"src": "7136:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1520,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "7144:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7149:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "7144:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7158:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2547,
															"src": "7144:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1518,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1784,
														"src": "7119:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1517,
												"id": 1524,
												"nodeType": "Return",
												"src": "7112:52:5"
											}
										]
									},
									"documentation": {
										"id": 1511,
										"nodeType": "StructuredDocumentation",
										"src": "6977:42:5",
										"text": "@dev See {IERC4626-previewDeposit}. "
									},
									"functionSelector": "ef8b30f7",
									"id": 1526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "7033:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1513,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7056:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "7048:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7048:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7047:16:5"
									},
									"returnParameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "7093:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7093:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7092:9:5"
									},
									"scope": 1905,
									"src": "7024:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										102
									],
									"body": {
										"id": 1541,
										"nodeType": "Block",
										"src": "7296:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1535,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "7330:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1536,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "7338:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7343:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "7338:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7352:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2548,
															"src": "7338:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1534,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "7313:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7313:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1533,
												"id": 1540,
												"nodeType": "Return",
												"src": "7306:51:5"
											}
										]
									},
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "7177:39:5",
										"text": "@dev See {IERC4626-previewMint}. "
									},
									"functionSelector": "b3d7f6b9",
									"id": 1542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "7230:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7250:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "7242:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7242:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7241:16:5"
									},
									"returnParameters": {
										"id": 1533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "7287:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7287:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7286:9:5"
									},
									"scope": 1905,
									"src": "7221:143:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										128
									],
									"body": {
										"id": 1557,
										"nodeType": "Block",
										"src": "7497:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1551,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1545,
															"src": "7531:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1552,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "7539:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7544:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "7539:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1554,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7553:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2548,
															"src": "7539:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1550,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1784,
														"src": "7514:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7514:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1549,
												"id": 1556,
												"nodeType": "Return",
												"src": "7507:51:5"
											}
										]
									},
									"documentation": {
										"id": 1543,
										"nodeType": "StructuredDocumentation",
										"src": "7370:43:5",
										"text": "@dev See {IERC4626-previewWithdraw}. "
									},
									"functionSelector": "0a28a477",
									"id": 1558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "7427:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1545,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7451:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "7443:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1544,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7443:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7442:16:5"
									},
									"returnParameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "7488:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7487:9:5"
									},
									"scope": 1905,
									"src": "7418:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										156
									],
									"body": {
										"id": 1573,
										"nodeType": "Block",
										"src": "7694:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1567,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1561,
															"src": "7728:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1568,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3594,
																	"src": "7736:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3594_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7741:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2551,
																"src": "7736:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2551_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1570,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7750:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2547,
															"src": "7736:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1566,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "7711:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7711:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1565,
												"id": 1572,
												"nodeType": "Return",
												"src": "7704:52:5"
											}
										]
									},
									"documentation": {
										"id": 1559,
										"nodeType": "StructuredDocumentation",
										"src": "7571:41:5",
										"text": "@dev See {IERC4626-previewRedeem}. "
									},
									"functionSelector": "4cdad506",
									"id": 1574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "7626:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7648:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "7640:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7639:16:5"
									},
									"returnParameters": {
										"id": 1565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1564,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "7685:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1563,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7685:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7684:9:5"
									},
									"scope": 1905,
									"src": "7617:146:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										86
									],
									"body": {
										"id": 1617,
										"nodeType": "Block",
										"src": "7893:308:5",
										"statements": [
											{
												"assignments": [
													1585
												],
												"declarations": [
													{
														"constant": false,
														"id": 1585,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "7911:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1617,
														"src": "7903:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1584,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7903:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1589,
												"initialValue": {
													"arguments": [
														{
															"id": 1587,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1579,
															"src": "7934:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1586,
														"name": "maxDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1464,
														"src": "7923:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7923:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7903:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1590,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1577,
														"src": "7957:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1591,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1585,
														"src": "7966:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7957:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1600,
												"nodeType": "IfStatement",
												"src": "7953:110:5",
												"trueBody": {
													"id": 1599,
													"nodeType": "Block",
													"src": "7977:86:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1594,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1579,
																		"src": "8024:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1595,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1577,
																		"src": "8034:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1596,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1585,
																		"src": "8042:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1593,
																	"name": "ERC4626ExceededMaxDeposit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1254,
																	"src": "7998:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7998:54:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1598,
															"nodeType": "RevertStatement",
															"src": "7991:61:5"
														}
													]
												}
											},
											{
												"assignments": [
													1602
												],
												"declarations": [
													{
														"constant": false,
														"id": 1602,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "8081:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1617,
														"src": "8073:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1601,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8073:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1606,
												"initialValue": {
													"arguments": [
														{
															"id": 1604,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "8105:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1603,
														"name": "previewDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "8090:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8090:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8073:39:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1608,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "8131:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8131:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1610,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1579,
															"src": "8145:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1611,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1577,
															"src": "8155:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1612,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "8163:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1607,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1849,
														"src": "8122:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8122:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1614,
												"nodeType": "ExpressionStatement",
												"src": "8122:48:5"
											},
											{
												"expression": {
													"id": 1615,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1602,
													"src": "8188:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1583,
												"id": 1616,
												"nodeType": "Return",
												"src": "8181:13:5"
											}
										]
									},
									"documentation": {
										"id": 1575,
										"nodeType": "StructuredDocumentation",
										"src": "7769:35:5",
										"text": "@dev See {IERC4626-deposit}. "
									},
									"functionSelector": "6e553f65",
									"id": 1618,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "7818:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7834:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "7826:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7850:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "7842:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7842:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7825:34:5"
									},
									"returnParameters": {
										"id": 1583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "7884:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7884:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7883:9:5"
									},
									"scope": 1905,
									"src": "7809:392:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										112
									],
									"body": {
										"id": 1661,
										"nodeType": "Block",
										"src": "8549:299:5",
										"statements": [
											{
												"assignments": [
													1629
												],
												"declarations": [
													{
														"constant": false,
														"id": 1629,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "8567:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1661,
														"src": "8559:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1628,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8559:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1633,
												"initialValue": {
													"arguments": [
														{
															"id": 1631,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1623,
															"src": "8587:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1630,
														"name": "maxMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "8579:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8579:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8559:37:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1634,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1621,
														"src": "8610:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1635,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "8619:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8610:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1644,
												"nodeType": "IfStatement",
												"src": "8606:107:5",
												"trueBody": {
													"id": 1643,
													"nodeType": "Block",
													"src": "8630:83:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1638,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1623,
																		"src": "8674:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1639,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1621,
																		"src": "8684:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1640,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1629,
																		"src": "8692:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1637,
																	"name": "ERC4626ExceededMaxMint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1263,
																	"src": "8651:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1641,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8651:51:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1642,
															"nodeType": "RevertStatement",
															"src": "8644:58:5"
														}
													]
												}
											},
											{
												"assignments": [
													1646
												],
												"declarations": [
													{
														"constant": false,
														"id": 1646,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "8731:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1661,
														"src": "8723:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1645,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8723:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1650,
												"initialValue": {
													"arguments": [
														{
															"id": 1648,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1621,
															"src": "8752:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1647,
														"name": "previewMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1542,
														"src": "8740:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8740:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8723:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1652,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "8778:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8778:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1654,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1623,
															"src": "8792:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1655,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "8802:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1656,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1621,
															"src": "8810:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1651,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1849,
														"src": "8769:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8769:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1658,
												"nodeType": "ExpressionStatement",
												"src": "8769:48:5"
											},
											{
												"expression": {
													"id": 1659,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1646,
													"src": "8835:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1627,
												"id": 1660,
												"nodeType": "Return",
												"src": "8828:13:5"
											}
										]
									},
									"documentation": {
										"id": 1619,
										"nodeType": "StructuredDocumentation",
										"src": "8207:256:5",
										"text": "@dev See {IERC4626-mint}.\n As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n In this case, the shares will be minted without requiring any assets to be deposited."
									},
									"functionSelector": "94bf804d",
									"id": 1662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "8477:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1621,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "8490:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "8482:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8482:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8506:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "8498:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8481:34:5"
									},
									"returnParameters": {
										"id": 1627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "8540:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8539:9:5"
									},
									"scope": 1905,
									"src": "8468:380:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										140
									],
									"body": {
										"id": 1708,
										"nodeType": "Block",
										"src": "8995:313:5",
										"statements": [
											{
												"assignments": [
													1675
												],
												"declarations": [
													{
														"constant": false,
														"id": 1675,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "9013:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1708,
														"src": "9005:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1674,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9005:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1679,
												"initialValue": {
													"arguments": [
														{
															"id": 1677,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "9037:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1676,
														"name": "maxWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1497,
														"src": "9025:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9025:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9005:38:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1680,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "9057:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1681,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1675,
														"src": "9066:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9057:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1690,
												"nodeType": "IfStatement",
												"src": "9053:108:5",
												"trueBody": {
													"id": 1689,
													"nodeType": "Block",
													"src": "9077:84:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1684,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1669,
																		"src": "9125:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1685,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1665,
																		"src": "9132:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1686,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1675,
																		"src": "9140:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1683,
																	"name": "ERC4626ExceededMaxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1272,
																	"src": "9098:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9098:52:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1688,
															"nodeType": "RevertStatement",
															"src": "9091:59:5"
														}
													]
												}
											},
											{
												"assignments": [
													1692
												],
												"declarations": [
													{
														"constant": false,
														"id": 1692,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "9179:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1708,
														"src": "9171:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1691,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1696,
												"initialValue": {
													"arguments": [
														{
															"id": 1694,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "9204:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1693,
														"name": "previewWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1558,
														"src": "9188:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9188:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:40:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1698,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "9231:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1699,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9231:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1700,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1667,
															"src": "9245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1701,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "9255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1702,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "9262:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1703,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1692,
															"src": "9270:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1697,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1896,
														"src": "9221:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9221:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1705,
												"nodeType": "ExpressionStatement",
												"src": "9221:56:5"
											},
											{
												"expression": {
													"id": 1706,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1692,
													"src": "9295:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1673,
												"id": 1707,
												"nodeType": "Return",
												"src": "9288:13:5"
											}
										]
									},
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "8854:36:5",
										"text": "@dev See {IERC4626-withdraw}. "
									},
									"functionSelector": "b460af94",
									"id": 1709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "8904:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "8921:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "8913:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8913:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8937:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "8929:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8955:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "8947:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8947:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8912:49:5"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "8986:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8986:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8985:9:5"
									},
									"scope": 1905,
									"src": "8895:413:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										168
									],
									"body": {
										"id": 1755,
										"nodeType": "Block",
										"src": "9451:307:5",
										"statements": [
											{
												"assignments": [
													1722
												],
												"declarations": [
													{
														"constant": false,
														"id": 1722,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "9469:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1755,
														"src": "9461:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1721,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9461:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1726,
												"initialValue": {
													"arguments": [
														{
															"id": 1724,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1716,
															"src": "9491:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1723,
														"name": "maxRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1510,
														"src": "9481:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9481:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9461:36:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1727,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1712,
														"src": "9511:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1728,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1722,
														"src": "9520:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9511:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1737,
												"nodeType": "IfStatement",
												"src": "9507:106:5",
												"trueBody": {
													"id": 1736,
													"nodeType": "Block",
													"src": "9531:82:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1731,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1716,
																		"src": "9577:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1732,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1712,
																		"src": "9584:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1733,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1722,
																		"src": "9592:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1730,
																	"name": "ERC4626ExceededMaxRedeem",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1281,
																	"src": "9552:24:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9552:50:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1735,
															"nodeType": "RevertStatement",
															"src": "9545:57:5"
														}
													]
												}
											},
											{
												"assignments": [
													1739
												],
												"declarations": [
													{
														"constant": false,
														"id": 1739,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "9631:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1755,
														"src": "9623:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1738,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9623:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1743,
												"initialValue": {
													"arguments": [
														{
															"id": 1741,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1712,
															"src": "9654:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1740,
														"name": "previewRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1574,
														"src": "9640:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9640:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9623:38:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1745,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2522,
																"src": "9681:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9681:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1747,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1714,
															"src": "9695:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1748,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1716,
															"src": "9705:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1749,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1739,
															"src": "9712:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1750,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1712,
															"src": "9720:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1744,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1896,
														"src": "9671:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9671:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1752,
												"nodeType": "ExpressionStatement",
												"src": "9671:56:5"
											},
											{
												"expression": {
													"id": 1753,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1739,
													"src": "9745:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1720,
												"id": 1754,
												"nodeType": "Return",
												"src": "9738:13:5"
											}
										]
									},
									"documentation": {
										"id": 1710,
										"nodeType": "StructuredDocumentation",
										"src": "9314:34:5",
										"text": "@dev See {IERC4626-redeem}. "
									},
									"functionSelector": "ba087652",
									"id": 1756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "9362:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9377:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "9369:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9393:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "9385:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9385:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9411:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "9403:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9368:49:5"
									},
									"returnParameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "9442:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9442:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9441:9:5"
									},
									"scope": 1905,
									"src": "9353:405:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1783,
										"nodeType": "Block",
										"src": "9988:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1769,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 715,
																	"src": "10019:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10019:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10035:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1772,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1904,
																		"src": "10041:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10041:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10035:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10019:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1776,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1417,
																	"src": "10060:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10060:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1778,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10076:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10060:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1780,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1762,
															"src": "10079:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1767,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "10005:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1768,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10012:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2971,
														"src": "10005:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10005:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1766,
												"id": 1782,
												"nodeType": "Return",
												"src": "9998:90:5"
											}
										]
									},
									"documentation": {
										"id": 1757,
										"nodeType": "StructuredDocumentation",
										"src": "9764:113:5",
										"text": " @dev Internal conversion function (from assets to shares) with support for rounding direction."
									},
									"id": 1784,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToShares",
									"nameLocation": "9891:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9916:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "9908:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9908:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9938:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "9924:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1761,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1760,
														"name": "Math.Rounding",
														"nameLocations": [
															"9924:4:5",
															"9929:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "9924:13:5"
													},
													"referencedDeclaration": 2551,
													"src": "9924:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:40:5"
									},
									"returnParameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "9979:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9979:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9978:9:5"
									},
									"scope": 1905,
									"src": "9882:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1811,
										"nodeType": "Block",
										"src": "10325:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1797,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1417,
																	"src": "10356:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10356:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10372:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10356:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1801,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 715,
																	"src": "10375:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1802,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10375:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1806,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10391:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1804,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1904,
																		"src": "10397:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10397:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10391:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10375:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1808,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1790,
															"src": "10416:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2551",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1795,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "10342:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10349:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2971,
														"src": "10342:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2551_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10342:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1794,
												"id": 1810,
												"nodeType": "Return",
												"src": "10335:90:5"
											}
										]
									},
									"documentation": {
										"id": 1785,
										"nodeType": "StructuredDocumentation",
										"src": "10101:113:5",
										"text": " @dev Internal conversion function (from shares to assets) with support for rounding direction."
									},
									"id": 1812,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToAssets",
									"nameLocation": "10228:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1787,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10253:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "10245:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10245:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1790,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10275:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "10261:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1789,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1788,
														"name": "Math.Rounding",
														"nameLocations": [
															"10261:4:5",
															"10266:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "10261:13:5"
													},
													"referencedDeclaration": 2551,
													"src": "10261:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10244:40:5"
									},
									"returnParameters": {
										"id": 1794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1793,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "10316:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10316:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10315:9:5"
									},
									"scope": 1905,
									"src": "10219:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1848,
										"nodeType": "Block",
										"src": "10597:729:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1827,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "11191:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1828,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1815,
															"src": "11199:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1831,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "11215:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1905",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1905",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1830,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11207:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1829,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11207:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11207:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1833,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1819,
															"src": "11222:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1824,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2257,
															"src": "11164:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2257_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11174:16:5",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2044,
														"src": "11164:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11164:65:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1835,
												"nodeType": "ExpressionStatement",
												"src": "11164:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1837,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "11245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1838,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "11255:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1836,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "11239:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11239:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1840,
												"nodeType": "ExpressionStatement",
												"src": "11239:23:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1842,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1815,
															"src": "11286:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1843,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "11294:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1844,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1819,
															"src": "11304:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1845,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "11312:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1841,
														"name": "Deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "11278:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11278:41:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1847,
												"nodeType": "EmitStatement",
												"src": "11273:46:5"
											}
										]
									},
									"documentation": {
										"id": 1813,
										"nodeType": "StructuredDocumentation",
										"src": "10438:53:5",
										"text": " @dev Deposit/mint common workflow."
									},
									"id": 1849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deposit",
									"nameLocation": "10505:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1815,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "10522:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "10514:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10514:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10538:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "10530:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1816,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10530:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1819,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "10556:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "10548:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10548:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10572:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "10564:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10564:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10513:66:5"
									},
									"returnParameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10597:0:5"
									},
									"scope": 1905,
									"src": "10496:830:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1895,
										"nodeType": "Block",
										"src": "11556:751:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1863,
														"name": "caller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1852,
														"src": "11570:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1864,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1856,
														"src": "11580:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11570:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1873,
												"nodeType": "IfStatement",
												"src": "11566:84:5",
												"trueBody": {
													"id": 1872,
													"nodeType": "Block",
													"src": "11587:63:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1867,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1856,
																		"src": "11617:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1868,
																		"name": "caller",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1852,
																		"src": "11624:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1869,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1860,
																		"src": "11632:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1866,
																	"name": "_spendAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1141,
																	"src": "11601:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1870,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11601:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1871,
															"nodeType": "ExpressionStatement",
															"src": "11601:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1875,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1856,
															"src": "12163:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1876,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "12170:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1874,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1015,
														"src": "12157:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12157:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1878,
												"nodeType": "ExpressionStatement",
												"src": "12157:20:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1882,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "12210:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1883,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1854,
															"src": "12218:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1884,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1858,
															"src": "12228:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1879,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2257,
															"src": "12187:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2257_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12197:12:5",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2017,
														"src": "12187:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12187:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1886,
												"nodeType": "ExpressionStatement",
												"src": "12187:48:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1888,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1852,
															"src": "12260:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1889,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1854,
															"src": "12268:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1890,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1856,
															"src": "12278:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1891,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1858,
															"src": "12285:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1892,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "12293:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1887,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "12251:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12251:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1894,
												"nodeType": "EmitStatement",
												"src": "12246:54:5"
											}
										]
									},
									"documentation": {
										"id": 1850,
										"nodeType": "StructuredDocumentation",
										"src": "11332:56:5",
										"text": " @dev Withdraw/redeem common workflow."
									},
									"id": 1896,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdraw",
									"nameLocation": "11402:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "11429:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "11421:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11421:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11453:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "11445:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11445:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11479:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "11471:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11471:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11502:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "11494:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1857,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11494:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11526:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "11518:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1859,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11518:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:127:5"
									},
									"returnParameters": {
										"id": 1862,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11556:0:5"
									},
									"scope": 1905,
									"src": "11393:914:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1903,
										"nodeType": "Block",
										"src": "12378:25:5",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1901,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12395:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1900,
												"id": 1902,
												"nodeType": "Return",
												"src": "12388:8:5"
											}
										]
									},
									"id": 1904,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_decimalsOffset",
									"nameLocation": "12322:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12337:2:5"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "12371:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1898,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "12371:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12370:7:5"
									},
									"scope": 1905,
									"src": "12313:90:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1906,
							"src": "3158:9247:5",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								1254,
								1263,
								1272,
								1281,
								1984,
								2265,
								2270,
								2273,
								2546
							],
							"usedEvents": [
								20,
								32,
								1154,
								1163
							]
						}
					],
					"src": "118:12288:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1220
						],
						"IERC20Metadata": [
							1931
						]
					},
					"id": 1932,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1907,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1909,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1932,
							"sourceUnit": 1221,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1908,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1911,
										"name": "IERC20",
										"nameLocations": [
											"305:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1220,
										"src": "305:6:6"
									},
									"id": 1912,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1910,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1931,
							"linearizedBaseContracts": [
								1931,
								1220
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1913,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1918,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:6"
									},
									"returnParameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "416:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1915,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:6"
									},
									"scope": 1931,
									"src": "377:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1919,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1924,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:6"
									},
									"returnParameters": {
										"id": 1923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "539:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1921,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:6"
									},
									"scope": 1931,
									"src": "498:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1925,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1930,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:6"
									},
									"returnParameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1930,
												"src": "673:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1927,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:6"
									},
									"scope": 1931,
									"src": "630:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1932,
							"src": "277:405:6",
							"usedErrors": [],
							"usedEvents": [
								1154,
								1163
							]
						}
					],
					"src": "125:558:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1967
						]
					},
					"id": 1968,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1933,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1934,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:7",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1967,
							"linearizedBaseContracts": [
								1967
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1935,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:7",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1952,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1937,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3022:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1936,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3045:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3070:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1940,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3093:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1945,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3119:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1944,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3136:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1946,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "3155:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1948,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:7"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:7"
									},
									"scope": 1967,
									"src": "2997:183:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:7",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1960,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "3501:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:7"
									},
									"returnParameters": {
										"id": 1959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1958,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "3539:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:7"
									},
									"scope": 1967,
									"src": "3485:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1961,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:7",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1962,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:7"
									},
									"returnParameters": {
										"id": 1965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "3791:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1963,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:7"
									},
									"scope": 1967,
									"src": "3740:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1968,
							"src": "2113:1689:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:7"
				},
				"id": 7
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							2510
						],
						"IERC20": [
							1220
						],
						"IERC20Permit": [
							1967
						],
						"SafeERC20": [
							2257
						]
					},
					"id": 2258,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1969,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:8"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1971,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2258,
							"sourceUnit": 1221,
							"src": "141:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1970,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1220,
										"src": "149:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 1973,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2258,
							"sourceUnit": 1968,
							"src": "179:60:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1972,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1967,
										"src": "187:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 1975,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2258,
							"sourceUnit": 2511,
							"src": "240:51:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1974,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2510,
										"src": "248:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1976,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:8",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2257,
							"linearizedBaseContracts": [
								2257
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1979,
									"libraryName": {
										"id": 1977,
										"name": "Address",
										"nameLocations": [
											"781:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2510,
										"src": "781:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:8",
									"typeName": {
										"id": 1978,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 1980,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:8",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 1984,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1982,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1984,
												"src": "907:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:8"
									},
									"src": "876:46:8"
								},
								{
									"documentation": {
										"id": 1985,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:8",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 1993,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "1043:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "1060:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1991,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "1086:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:8"
									},
									"src": "1004:109:8"
								},
								{
									"body": {
										"id": 2016,
										"nodeType": "Block",
										"src": "1375:88:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2005,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1997,
															"src": "1405:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2008,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1997,
																		"src": "1427:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 2009,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:8",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1187,
																	"src": "1427:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 2010,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1999,
																			"src": "1444:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2011,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2001,
																			"src": "1448:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2012,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 2006,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2007,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2004,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "1385:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2015,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:8"
											}
										]
									},
									"documentation": {
										"id": 1994,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:8",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2017,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2017,
												"src": "1325:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1996,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1995,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "1325:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "1325:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1999,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2017,
												"src": "1339:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2017,
												"src": "1351:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2000,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:8"
									},
									"returnParameters": {
										"id": 2003,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:8"
									},
									"scope": 2257,
									"src": "1303:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2043,
										"nodeType": "Block",
										"src": "1792:98:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2031,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "1822:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2034,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2021,
																		"src": "1844:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 2035,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:8",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1219,
																	"src": "1844:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 2036,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2023,
																			"src": "1865:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2037,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2025,
																			"src": "1871:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2038,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2027,
																			"src": "1875:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2039,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 2032,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2033,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2040,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2030,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "1802:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 2041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2042,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:8"
											}
										]
									},
									"documentation": {
										"id": 2018,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:8",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 2044,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2021,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2044,
												"src": "1728:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2020,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2019,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "1728:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "1728:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2044,
												"src": "1742:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2044,
												"src": "1756:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2044,
												"src": "1768:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:8"
									},
									"returnParameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:8"
									},
									"scope": 2257,
									"src": "1702:188:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2074,
										"nodeType": "Block",
										"src": "2167:139:8",
										"statements": [
											{
												"assignments": [
													2056
												],
												"declarations": [
													{
														"constant": false,
														"id": 2056,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 2074,
														"src": "2177:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2055,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2065,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2061,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2257",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2257",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 2060,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2059,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2063,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2050,
															"src": "2231:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2057,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2048,
															"src": "2200:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														"id": 2058,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:8",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1197,
														"src": "2200:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 2064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2067,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2048,
															"src": "2262:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 2068,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2050,
															"src": "2269:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2071,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2069,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2056,
																"src": "2278:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2070,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2052,
																"src": "2293:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$1220",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2066,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2165,
														"src": "2249:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 2072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2073,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:8"
											}
										]
									},
									"documentation": {
										"id": 2045,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:8",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 2075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2048,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2112:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2047,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2046,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "2112:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "2112:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2126:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2049,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2143:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:8"
									},
									"returnParameters": {
										"id": 2054,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:8"
									},
									"scope": 2257,
									"src": "2081:225:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2117,
										"nodeType": "Block",
										"src": "2607:370:8",
										"statements": [
											{
												"id": 2116,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:8",
												"statements": [
													{
														"assignments": [
															2087
														],
														"declarations": [
															{
																"constant": false,
																"id": 2087,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:8",
																"nodeType": "VariableDeclaration",
																"scope": 2116,
																"src": "2641:24:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2086,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2096,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2092,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2257",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2257",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 2091,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2090,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2093,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2094,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2081,
																	"src": "2699:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2088,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2079,
																	"src": "2668:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2089,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:8",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1197,
																"src": "2668:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 2095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2097,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2087,
																"src": "2725:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2098,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2083,
																"src": "2744:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2107,
														"nodeType": "IfStatement",
														"src": "2721:160:8",
														"trueBody": {
															"id": 2106,
															"nodeType": "Block",
															"src": "2763:118:8",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 2101,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2081,
																				"src": "2821:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 2102,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2087,
																				"src": "2830:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 2103,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2083,
																				"src": "2848:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2100,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1993,
																			"src": "2788:32:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 2104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2105,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:8"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2109,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2079,
																	"src": "2907:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 2110,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2081,
																	"src": "2914:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2111,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2087,
																		"src": "2923:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2112,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2083,
																		"src": "2942:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2108,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2165,
																"src": "2894:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 2114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2115,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2076,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:8",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 2118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "2540:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2078,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2077,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "2540:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "2540:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "2554:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 2118,
												"src": "2571:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:8"
									},
									"returnParameters": {
										"id": 2085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:8"
									},
									"scope": 2257,
									"src": "2509:468:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2164,
										"nodeType": "Block",
										"src": "3373:303:8",
										"statements": [
											{
												"assignments": [
													2130
												],
												"declarations": [
													{
														"constant": false,
														"id": 2130,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 2164,
														"src": "3383:25:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2129,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2139,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 2133,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2122,
																"src": "3426:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1220",
																	"typeString": "contract IERC20"
																}
															},
															"id": 2134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:8",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1207,
															"src": "3426:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 2135,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2124,
																	"src": "3442:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2136,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2126,
																	"src": "3451:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2137,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 2131,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2132,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:8",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 2138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:8"
											},
											{
												"condition": {
													"id": 2144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:8",
													"subExpression": {
														"arguments": [
															{
																"id": 2141,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2122,
																"src": "3498:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$1220",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 2142,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2130,
																"src": "3505:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$1220",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2140,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2256,
															"src": "3474:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 2143,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2163,
												"nodeType": "IfStatement",
												"src": "3469:201:8",
												"trueBody": {
													"id": 2162,
													"nodeType": "Block",
													"src": "3520:150:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2146,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2122,
																		"src": "3554:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 2149,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2122,
																					"src": "3576:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$1220",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 2150,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:8",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1207,
																				"src": "3576:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2151,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2124,
																						"src": "3592:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 2152,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 2153,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 2147,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2148,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:8",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 2154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2145,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2207,
																	"src": "3534:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2156,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2158,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2122,
																		"src": "3639:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 2159,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2130,
																		"src": "3646:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$1220",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2157,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2207,
																	"src": "3619:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1220_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2161,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2119,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:8",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 2165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2122,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2165,
												"src": "3318:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2121,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2120,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "3318:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "3318:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2124,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2165,
												"src": "3332:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2165,
												"src": "3349:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:8"
									},
									"returnParameters": {
										"id": 2128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:8"
									},
									"scope": 2257,
									"src": "3296:380:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2206,
										"nodeType": "Block",
										"src": "4129:559:8",
										"statements": [
											{
												"assignments": [
													2175
												],
												"declarations": [
													{
														"constant": false,
														"id": 2175,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2206,
														"src": "4478:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2174,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2183,
												"initialValue": {
													"arguments": [
														{
															"id": 2181,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2171,
															"src": "4532:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2178,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2169,
																	"src": "4512:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2177,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2176,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:8",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2331,
														"src": "4504:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 2182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2187,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2184,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2175,
																"src": "4551:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:8",
														"subExpression": {
															"arguments": [
																{
																	"id": 2190,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2175,
																	"src": "4589:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 2192,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 2191,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:8",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 2193,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 2188,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:8",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2205,
												"nodeType": "IfStatement",
												"src": "4547:135:8",
												"trueBody": {
													"id": 2204,
													"nodeType": "Block",
													"src": "4610:72:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2200,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2169,
																				"src": "4664:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$1220",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$1220",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 2199,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2198,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2201,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2197,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1984,
																	"src": "4631:24:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2203,
															"nodeType": "RevertStatement",
															"src": "4624:47:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2166,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 2207,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2207,
												"src": "4088:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2168,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2167,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "4088:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "4088:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2207,
												"src": "4102:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2170,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:8"
									},
									"returnParameters": {
										"id": 2173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:8"
									},
									"scope": 2257,
									"src": "4059:629:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2255,
										"nodeType": "Block",
										"src": "5278:489:8",
										"statements": [
											{
												"assignments": [
													2219,
													2221
												],
												"declarations": [
													{
														"constant": false,
														"id": 2219,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 2255,
														"src": "5574:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2218,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2221,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2255,
														"src": "5588:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2220,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2229,
												"initialValue": {
													"arguments": [
														{
															"id": 2227,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2213,
															"src": "5635:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2224,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2211,
																	"src": "5623:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$1220",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 2223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2222,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2226,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:8",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2230,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2219,
															"src": "5657:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 2242,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2231,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2221,
																				"src": "5669:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:8",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2233,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 2237,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2221,
																				"src": "5706:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 2239,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 2238,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 2240,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 2235,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 2236,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:8",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 2243,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2247,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2211,
																			"src": "5738:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$1220",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$1220",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 2246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2245,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2248,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:8",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2217,
												"id": 2254,
												"nodeType": "Return",
												"src": "5650:110:8"
											}
										]
									},
									"documentation": {
										"id": 2208,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "5222:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2210,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2209,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "5222:6:8"
													},
													"referencedDeclaration": 1220,
													"src": "5222:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2213,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "5236:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2212,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:8"
									},
									"returnParameters": {
										"id": 2217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "5272:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2215,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:8"
									},
									"scope": 2257,
									"src": "5189:578:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2258,
							"src": "751:5018:8",
							"usedErrors": [
								1984,
								1993
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:8"
				},
				"id": 8
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							2510
						]
					},
					"id": 2511,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2259,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2260,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:9",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2510,
							"linearizedBaseContracts": [
								2510
							],
							"name": "Address",
							"nameLocation": "203:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2261,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:9",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 2265,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "349:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:9"
									},
									"src": "316:50:9"
								},
								{
									"documentation": {
										"id": 2266,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:9",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 2270,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2268,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2270,
												"src": "475:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:9"
									},
									"src": "452:39:9"
								},
								{
									"documentation": {
										"id": 2271,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:9",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 2273,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:9"
									},
									"src": "591:24:9"
								},
								{
									"body": {
										"id": 2313,
										"nodeType": "Block",
										"src": "1602:260:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2283,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2510",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2510",
																		"typeString": "library Address"
																	}
																],
																"id": 2282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2281,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2285,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2286,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2278,
														"src": "1640:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2296,
												"nodeType": "IfStatement",
												"src": "1612:109:9",
												"trueBody": {
													"id": 2295,
													"nodeType": "Block",
													"src": "1648:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2291,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2510",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2510",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2290,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2289,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2288,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2265,
																	"src": "1669:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2294,
															"nodeType": "RevertStatement",
															"src": "1662:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2298,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2298,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2313,
														"src": "1732:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2297,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2305,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2303,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2299,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2276,
																"src": "1750:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2302,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2301,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2278,
																"src": "1772:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:9"
											},
											{
												"condition": {
													"id": 2307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:9",
													"subExpression": {
														"id": 2306,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2298,
														"src": "1798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2312,
												"nodeType": "IfStatement",
												"src": "1793:63:9",
												"trueBody": {
													"id": 2311,
													"nodeType": "Block",
													"src": "1807:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2308,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2273,
																	"src": "1828:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2310,
															"nodeType": "RevertStatement",
															"src": "1821:24:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2274,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:9",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2276,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2314,
												"src": "1550:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2278,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2314,
												"src": "1577:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:9"
									},
									"returnParameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:9"
									},
									"scope": 2510,
									"src": "1531:331:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2330,
										"nodeType": "Block",
										"src": "2794:62:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2325,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2317,
															"src": "2833:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2326,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2319,
															"src": "2841:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 2324,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2377,
														"src": "2811:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2323,
												"id": 2329,
												"nodeType": "Return",
												"src": "2804:45:9"
											}
										]
									},
									"documentation": {
										"id": 2315,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:9",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 2331,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2317,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "2727:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2319,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "2743:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2318,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:9"
									},
									"returnParameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "2780:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:9"
									},
									"scope": 2510,
									"src": "2705:151:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2376,
										"nodeType": "Block",
										"src": "3293:279:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2345,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2510",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2510",
																		"typeString": "library Address"
																	}
																],
																"id": 2344,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2343,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2338,
														"src": "3331:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2358,
												"nodeType": "IfStatement",
												"src": "3303:108:9",
												"trueBody": {
													"id": 2357,
													"nodeType": "Block",
													"src": "3338:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2353,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2510",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2510",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2351,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2350,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2265,
																	"src": "3359:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2356,
															"nodeType": "RevertStatement",
															"src": "3352:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2360,
													2362
												],
												"declarations": [
													{
														"constant": false,
														"id": 2360,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2376,
														"src": "3421:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2359,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2362,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2376,
														"src": "3435:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2361,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2369,
												"initialValue": {
													"arguments": [
														{
															"id": 2367,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2336,
															"src": "3488:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2363,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2334,
																"src": "3462:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2365,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2338,
																"src": "3481:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2371,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2334,
															"src": "3537:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2372,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2360,
															"src": "3545:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2373,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2362,
															"src": "3554:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2370,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2469,
														"src": "3510:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2342,
												"id": 2375,
												"nodeType": "Return",
												"src": "3503:62:9"
											}
										]
									},
									"documentation": {
										"id": 2332,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 2377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "3211:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2336,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "3227:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2335,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2338,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "3246:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:9"
									},
									"returnParameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "3279:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2340,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:9"
									},
									"scope": 2510,
									"src": "3180:392:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2402,
										"nodeType": "Block",
										"src": "3811:154:9",
										"statements": [
											{
												"assignments": [
													2388,
													2390
												],
												"declarations": [
													{
														"constant": false,
														"id": 2388,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2402,
														"src": "3822:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2387,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2390,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2402,
														"src": "3836:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2389,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2395,
												"initialValue": {
													"arguments": [
														{
															"id": 2393,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2382,
															"src": "3881:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2391,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2380,
															"src": "3863:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:9",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2397,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2380,
															"src": "3930:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2398,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2388,
															"src": "3938:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2399,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2390,
															"src": "3947:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2396,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2469,
														"src": "3903:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2386,
												"id": 2401,
												"nodeType": "Return",
												"src": "3896:62:9"
											}
										]
									},
									"documentation": {
										"id": 2378,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 2403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "3739:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "3755:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2381,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:9"
									},
									"returnParameters": {
										"id": 2386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2385,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "3797:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2384,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:9"
									},
									"scope": 2510,
									"src": "3711:254:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2428,
										"nodeType": "Block",
										"src": "4203:156:9",
										"statements": [
											{
												"assignments": [
													2414,
													2416
												],
												"declarations": [
													{
														"constant": false,
														"id": 2414,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2428,
														"src": "4214:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2413,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2416,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2428,
														"src": "4228:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2415,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2421,
												"initialValue": {
													"arguments": [
														{
															"id": 2419,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2408,
															"src": "4275:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2417,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2406,
															"src": "4255:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:9",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2423,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2406,
															"src": "4324:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2424,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "4332:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2425,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2416,
															"src": "4341:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2422,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2469,
														"src": "4297:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2412,
												"id": 2427,
												"nodeType": "Return",
												"src": "4290:62:9"
											}
										]
									},
									"documentation": {
										"id": 2404,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 2429,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2406,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4136:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2408,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4152:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2407,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:9"
									},
									"returnParameters": {
										"id": 2412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2411,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4189:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2410,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:9"
									},
									"scope": 2510,
									"src": "4106:253:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2468,
										"nodeType": "Block",
										"src": "4783:424:9",
										"statements": [
											{
												"condition": {
													"id": 2442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:9",
													"subExpression": {
														"id": 2441,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2434,
														"src": "4798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2466,
													"nodeType": "Block",
													"src": "4857:344:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2448,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2436,
																			"src": "5045:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2449,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 2452,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2432,
																				"src": "5071:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 2453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:9",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2463,
															"nodeType": "IfStatement",
															"src": "5041:119:9",
															"trueBody": {
																"id": 2462,
																"nodeType": "Block",
																"src": "5096:64:9",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2459,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2432,
																					"src": "5138:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2458,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2270,
																				"src": "5121:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 2460,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2461,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:9"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2464,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2436,
																"src": "5180:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2440,
															"id": 2465,
															"nodeType": "Return",
															"src": "5173:17:9"
														}
													]
												},
												"id": 2467,
												"nodeType": "IfStatement",
												"src": "4793:408:9",
												"trueBody": {
													"id": 2447,
													"nodeType": "Block",
													"src": "4807:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2444,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2436,
																		"src": "4829:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2443,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2509,
																	"src": "4821:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2446,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2430,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:9",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 2469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2432,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "4670:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2434,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "4694:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2436,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "4716:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2435,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:9"
									},
									"returnParameters": {
										"id": 2440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "4769:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2438,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:9"
									},
									"scope": 2510,
									"src": "4625:582:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2490,
										"nodeType": "Block",
										"src": "5509:122:9",
										"statements": [
											{
												"condition": {
													"id": 2480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:9",
													"subExpression": {
														"id": 2479,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2472,
														"src": "5524:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2488,
													"nodeType": "Block",
													"src": "5583:42:9",
													"statements": [
														{
															"expression": {
																"id": 2486,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2474,
																"src": "5604:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2478,
															"id": 2487,
															"nodeType": "Return",
															"src": "5597:17:9"
														}
													]
												},
												"id": 2489,
												"nodeType": "IfStatement",
												"src": "5519:106:9",
												"trueBody": {
													"id": 2485,
													"nodeType": "Block",
													"src": "5533:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2482,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2474,
																		"src": "5555:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2481,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2509,
																	"src": "5547:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2484,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2470,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:9",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 2491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2472,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2491,
												"src": "5433:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2471,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2474,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2491,
												"src": "5447:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:9"
									},
									"returnParameters": {
										"id": 2478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2491,
												"src": "5495:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2476,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:9"
									},
									"scope": 2510,
									"src": "5407:224:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2508,
										"nodeType": "Block",
										"src": "5798:461:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2497,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2494,
															"src": "5874:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2499,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2506,
													"nodeType": "Block",
													"src": "6204:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2503,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2273,
																	"src": "6225:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2504,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2505,
															"nodeType": "RevertStatement",
															"src": "6218:24:9"
														}
													]
												},
												"id": 2507,
												"nodeType": "IfStatement",
												"src": "5870:383:9",
												"trueBody": {
													"id": 2502,
													"nodeType": "Block",
													"src": "5897:301:9",
													"statements": [
														{
															"AST": {
																"nativeSrc": "6055:133:9",
																"nodeType": "YulBlock",
																"src": "6055:133:9",
																"statements": [
																	{
																		"nativeSrc": "6073:40:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nativeSrc": "6102:10:9",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "6096:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:9"
																			},
																			"nativeSrc": "6096:17:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:9"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nativeSrc": "6077:15:9",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "6141:2:9",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:9",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nativeSrc": "6145:10:9",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6137:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:9"
																					},
																					"nativeSrc": "6137:19:9",
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:9"
																				},
																				{
																					"name": "returndata_size",
																					"nativeSrc": "6158:15:9",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:9"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6130:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:9"
																			},
																			"nativeSrc": "6130:44:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:9"
																		},
																		"nativeSrc": "6130:44:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:9"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 2494,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:9",
																	"valueSize": 1
																},
																{
																	"declaration": 2494,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:9",
																	"valueSize": 1
																}
															],
															"id": 2501,
															"nodeType": "InlineAssembly",
															"src": "6046:142:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2492,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:9",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 2509,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2494,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2509,
												"src": "5760:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2493,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:9"
									},
									"returnParameters": {
										"id": 2496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:9"
									},
									"scope": 2510,
									"src": "5743:516:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2511,
							"src": "195:6066:9",
							"usedErrors": [
								2265,
								2270,
								2273
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:9"
				},
				"id": 9
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							2540
						]
					},
					"id": 2541,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2512,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2513,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2540,
							"linearizedBaseContracts": [
								2540
							],
							"name": "Context",
							"nameLocation": "642:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2521,
										"nodeType": "Block",
										"src": "718:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2518,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2517,
												"id": 2520,
												"nodeType": "Return",
												"src": "728:17:10"
											}
										]
									},
									"id": 2522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:10"
									},
									"returnParameters": {
										"id": 2517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2522,
												"src": "709:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:10"
									},
									"scope": 2540,
									"src": "656:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2530,
										"nodeType": "Block",
										"src": "825:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2527,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:10",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2526,
												"id": 2529,
												"nodeType": "Return",
												"src": "835:15:10"
											}
										]
									},
									"id": 2531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:10"
									},
									"returnParameters": {
										"id": 2526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2531,
												"src": "809:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:10"
									},
									"scope": 2540,
									"src": "758:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2538,
										"nodeType": "Block",
										"src": "935:25:10",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 2536,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 2535,
												"id": 2537,
												"nodeType": "Return",
												"src": "945:8:10"
											}
										]
									},
									"id": 2539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:10"
									},
									"returnParameters": {
										"id": 2535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2539,
												"src": "926:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:10"
									},
									"scope": 2540,
									"src": "863:97:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2541,
							"src": "624:338:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:10"
				},
				"id": 10
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3594
						]
					},
					"id": 3595,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2542,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2543,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:11",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3594,
							"linearizedBaseContracts": [
								3594
							],
							"name": "Math",
							"nameLocation": "211:4:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2544,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:11",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2546,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:11"
									},
									"src": "277:29:11"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2551,
									"members": [
										{
											"id": 2547,
											"name": "Floor",
											"nameLocation": "336:5:11",
											"nodeType": "EnumValue",
											"src": "336:5:11"
										},
										{
											"id": 2548,
											"name": "Ceil",
											"nameLocation": "379:4:11",
											"nodeType": "EnumValue",
											"src": "379:4:11"
										},
										{
											"id": 2549,
											"name": "Trunc",
											"nameLocation": "421:5:11",
											"nodeType": "EnumValue",
											"src": "421:5:11"
										},
										{
											"id": 2550,
											"name": "Expand",
											"nameLocation": "451:6:11",
											"nodeType": "EnumValue",
											"src": "451:6:11"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:11",
									"nodeType": "EnumDefinition",
									"src": "312:169:11"
								},
								{
									"body": {
										"id": 2582,
										"nodeType": "Block",
										"src": "661:140:11",
										"statements": [
											{
												"id": 2581,
												"nodeType": "UncheckedBlock",
												"src": "671:124:11",
												"statements": [
													{
														"assignments": [
															2564
														],
														"declarations": [
															{
																"constant": false,
																"id": 2564,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2581,
																"src": "695:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2563,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2568,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2565,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2554,
																"src": "707:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2566,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2556,
																"src": "711:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2571,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2569,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2564,
																"src": "730:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2570,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2554,
																"src": "734:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2576,
														"nodeType": "IfStatement",
														"src": "726:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2572,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2574,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2562,
															"id": 2575,
															"nodeType": "Return",
															"src": "737:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2578,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2564,
																	"src": "782:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2579,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2562,
														"id": 2580,
														"nodeType": "Return",
														"src": "768:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2552,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:11",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2554,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2583,
												"src": "601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2583,
												"src": "612:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:11"
									},
									"returnParameters": {
										"id": 2562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2583,
												"src": "646:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2558,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2583,
												"src": "652:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:11"
									},
									"scope": 3594,
									"src": "585:216:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2610,
										"nodeType": "Block",
										"src": "984:113:11",
										"statements": [
											{
												"id": 2609,
												"nodeType": "UncheckedBlock",
												"src": "994:97:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2595,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2588,
																"src": "1022:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2596,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2586,
																"src": "1026:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2602,
														"nodeType": "IfStatement",
														"src": "1018:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2600,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2594,
															"id": 2601,
															"nodeType": "Return",
															"src": "1029:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2604,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2586,
																		"src": "1074:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2605,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2588,
																		"src": "1078:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2607,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2594,
														"id": 2608,
														"nodeType": "Return",
														"src": "1060:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2584,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:11",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2586,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "924:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2588,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "935:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:11"
									},
									"returnParameters": {
										"id": 2594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2591,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "969:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2590,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "975:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:11"
									},
									"scope": 3594,
									"src": "908:189:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2652,
										"nodeType": "Block",
										"src": "1283:417:11",
										"statements": [
											{
												"id": 2651,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2623,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2614,
																"src": "1551:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2624,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2630,
														"nodeType": "IfStatement",
														"src": "1547:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2626,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2628,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2622,
															"id": 2629,
															"nodeType": "Return",
															"src": "1559:16:11"
														}
													},
													{
														"assignments": [
															2632
														],
														"declarations": [
															{
																"constant": false,
																"id": 2632,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2651,
																"src": "1589:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2631,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2636,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2633,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2614,
																"src": "1601:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2634,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2616,
																"src": "1605:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2637,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2632,
																	"src": "1624:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2638,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2614,
																	"src": "1628:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2640,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2616,
																"src": "1633:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2646,
														"nodeType": "IfStatement",
														"src": "1620:33:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2642,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2643,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2644,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2622,
															"id": 2645,
															"nodeType": "Return",
															"src": "1636:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2648,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2632,
																	"src": "1681:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2649,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2622,
														"id": 2650,
														"nodeType": "Return",
														"src": "1667:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2612,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:11",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2614,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2653,
												"src": "1223:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2616,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2653,
												"src": "1234:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:11"
									},
									"returnParameters": {
										"id": 2622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2653,
												"src": "1268:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2618,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2653,
												"src": "1274:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:11"
									},
									"scope": 3594,
									"src": "1207:493:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2680,
										"nodeType": "Block",
										"src": "1887:114:11",
										"statements": [
											{
												"id": 2679,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2665,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2658,
																"src": "1925:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2666,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2672,
														"nodeType": "IfStatement",
														"src": "1921:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2668,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2670,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2664,
															"id": 2671,
															"nodeType": "Return",
															"src": "1933:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2676,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2674,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2656,
																		"src": "1978:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2675,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2658,
																		"src": "1982:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2677,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2664,
														"id": 2678,
														"nodeType": "Return",
														"src": "1964:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2654,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:11",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2681,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2681,
												"src": "1827:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2658,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2681,
												"src": "1838:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:11"
									},
									"returnParameters": {
										"id": 2664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2681,
												"src": "1872:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2660,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2681,
												"src": "1878:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:11"
									},
									"scope": 3594,
									"src": "1811:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2708,
										"nodeType": "Block",
										"src": "2198:114:11",
										"statements": [
											{
												"id": 2707,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2693,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2686,
																"src": "2236:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2700,
														"nodeType": "IfStatement",
														"src": "2232:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2696,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2697,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2698,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2692,
															"id": 2699,
															"nodeType": "Return",
															"src": "2244:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2702,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2684,
																		"src": "2289:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2703,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2686,
																		"src": "2293:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2705,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2692,
														"id": 2706,
														"nodeType": "Return",
														"src": "2275:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2682,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:11",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2684,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "2138:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2686,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "2149:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:11"
									},
									"returnParameters": {
										"id": 2692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2689,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "2183:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2688,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "2189:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:11"
									},
									"scope": 3594,
									"src": "2122:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2726,
										"nodeType": "Block",
										"src": "2449:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2721,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2719,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2712,
															"src": "2466:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2720,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2714,
															"src": "2470:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2723,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2714,
														"src": "2478:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:11",
													"trueExpression": {
														"id": 2722,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2712,
														"src": "2474:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2718,
												"id": 2725,
												"nodeType": "Return",
												"src": "2459:20:11"
											}
										]
									},
									"documentation": {
										"id": 2710,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:11",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2727,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2712,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2727,
												"src": "2395:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2714,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2727,
												"src": "2406:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:11"
									},
									"returnParameters": {
										"id": 2718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2717,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2727,
												"src": "2440:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:11"
									},
									"scope": 3594,
									"src": "2382:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2744,
										"nodeType": "Block",
										"src": "2624:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2739,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2737,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2730,
															"src": "2641:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2738,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2732,
															"src": "2645:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2741,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2732,
														"src": "2653:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:11",
													"trueExpression": {
														"id": 2740,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2730,
														"src": "2649:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2736,
												"id": 2743,
												"nodeType": "Return",
												"src": "2634:20:11"
											}
										]
									},
									"documentation": {
										"id": 2728,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:11",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2745,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2730,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2745,
												"src": "2570:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2732,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2745,
												"src": "2581:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:11"
									},
									"returnParameters": {
										"id": 2736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2745,
												"src": "2615:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:11"
									},
									"scope": 3594,
									"src": "2557:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2767,
										"nodeType": "Block",
										"src": "2845:82:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2757,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2755,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2748,
																	"src": "2900:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2756,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2750,
																	"src": "2904:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2758,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2761,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2759,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2748,
																		"src": "2910:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2760,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2750,
																		"src": "2914:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2762,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2754,
												"id": 2766,
												"nodeType": "Return",
												"src": "2892:28:11"
											}
										]
									},
									"documentation": {
										"id": 2746,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:11",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2748,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "2791:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2750,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "2802:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:11"
									},
									"returnParameters": {
										"id": 2754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2753,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "2836:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:11"
									},
									"scope": 3594,
									"src": "2774:153:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2801,
										"nodeType": "Block",
										"src": "3219:260:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2778,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2773,
														"src": "3233:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2779,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2786,
												"nodeType": "IfStatement",
												"src": "3229:127:11",
												"trueBody": {
													"id": 2785,
													"nodeType": "Block",
													"src": "3241:115:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2783,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2781,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2771,
																	"src": "3340:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2782,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2773,
																	"src": "3344:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2777,
															"id": 2784,
															"nodeType": "Return",
															"src": "3333:12:11"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2789,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2787,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2771,
															"src": "3444:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2798,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2793,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2791,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2771,
																			"src": "3458:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2792,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2794,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2795,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2773,
																"src": "3467:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:11",
													"trueExpression": {
														"hexValue": "30",
														"id": 2790,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2777,
												"id": 2800,
												"nodeType": "Return",
												"src": "3437:35:11"
											}
										]
									},
									"documentation": {
										"id": 2769,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:11",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2771,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2802,
												"src": "3165:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2773,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2802,
												"src": "3176:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:11"
									},
									"returnParameters": {
										"id": 2777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2802,
												"src": "3210:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2775,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:11"
									},
									"scope": 3594,
									"src": "3148:331:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2927,
										"nodeType": "Block",
										"src": "3901:4018:11",
										"statements": [
											{
												"id": 2926,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:11",
												"statements": [
													{
														"assignments": [
															2815
														],
														"declarations": [
															{
																"constant": false,
																"id": 2815,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2926,
																"src": "4232:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2814,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2819,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2816,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2805,
																"src": "4248:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2817,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2807,
																"src": "4252:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:11"
													},
													{
														"assignments": [
															2821
														],
														"declarations": [
															{
																"constant": false,
																"id": 2821,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2926,
																"src": "4312:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2820,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2822,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:11"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:11",
															"nodeType": "YulBlock",
															"src": "4392:122:11",
															"statements": [
																{
																	"nativeSrc": "4410:30:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:11",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:11"
																				},
																				"nativeSrc": "4433:6:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:11"
																		},
																		"nativeSrc": "4420:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:11"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:11",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:11",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:11"
																				},
																				"nativeSrc": "4470:14:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:11"
																				},
																				"nativeSrc": "4486:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:11"
																		},
																		"nativeSrc": "4466:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2805,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2807,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:11",
																"valueSize": 1
															}
														],
														"id": 2823,
														"nodeType": "InlineAssembly",
														"src": "4383:131:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2824,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2821,
																"src": "4595:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2832,
														"nodeType": "IfStatement",
														"src": "4591:368:11",
														"trueBody": {
															"id": 2831,
															"nodeType": "Block",
															"src": "4607:352:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2827,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2815,
																			"src": "4925:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2828,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2809,
																			"src": "4933:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2813,
																	"id": 2830,
																	"nodeType": "Return",
																	"src": "4918:26:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2833,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2809,
																"src": "5065:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2834,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2821,
																"src": "5080:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2840,
														"nodeType": "IfStatement",
														"src": "5061:88:11",
														"trueBody": {
															"id": 2839,
															"nodeType": "Block",
															"src": "5087:62:11",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2836,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2546,
																			"src": "5112:20:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2838,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:11"
																}
															]
														}
													},
													{
														"assignments": [
															2842
														],
														"declarations": [
															{
																"constant": false,
																"id": 2842,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:11",
																"nodeType": "VariableDeclaration",
																"scope": 2926,
																"src": "5404:17:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2841,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2843,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:11"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:11",
															"nodeType": "YulBlock",
															"src": "5444:291:11",
															"statements": [
																{
																	"nativeSrc": "5513:38:11",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:11"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:11"
																		},
																		"nativeSrc": "5526:25:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:11"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:11",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:11",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:11"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:11"
																				},
																				"nativeSrc": "5653:20:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:11"
																		},
																		"nativeSrc": "5642:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:11",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:11"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:11"
																		},
																		"nativeSrc": "5700:21:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2809,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2842,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2842,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2842,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2805,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2807,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:11",
																"valueSize": 1
															}
														],
														"id": 2844,
														"nodeType": "InlineAssembly",
														"src": "5435:300:11"
													},
													{
														"assignments": [
															2846
														],
														"declarations": [
															{
																"constant": false,
																"id": 2846,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:11",
																"nodeType": "VariableDeclaration",
																"scope": 2926,
																"src": "5939:12:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2845,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2853,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2847,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2809,
																"src": "5954:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2848,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2849,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2809,
																			"src": "5973:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2851,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:11"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:11",
															"nodeType": "YulBlock",
															"src": "6008:362:11",
															"statements": [
																{
																	"nativeSrc": "6073:37:11",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:11"
																		},
																		"nativeSrc": "6088:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:11"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:11",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:11",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:11"
																		},
																		"nativeSrc": "6186:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:11",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:11",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:11",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:11",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:11"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:11"
																						},
																						"nativeSrc": "6333:12:11",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:11"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:11"
																				},
																				"nativeSrc": "6329:23:11",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:11",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:11"
																		},
																		"nativeSrc": "6325:31:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:11"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:11",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2809,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2809,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2815,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2846,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2846,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2846,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2846,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2846,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:11",
																"valueSize": 1
															}
														],
														"id": 2854,
														"nodeType": "InlineAssembly",
														"src": "5999:371:11"
													},
													{
														"expression": {
															"id": 2859,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2855,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "6436:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2858,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2856,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2821,
																	"src": "6445:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2857,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2846,
																	"src": "6453:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2860,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:11"
													},
													{
														"assignments": [
															2862
														],
														"declarations": [
															{
																"constant": false,
																"id": 2862,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:11",
																"nodeType": "VariableDeclaration",
																"scope": 2926,
																"src": "6775:15:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2861,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2869,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2865,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2864,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2809,
																			"src": "6798:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2866,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2867,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:11"
													},
													{
														"expression": {
															"id": 2876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2870,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7031:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2874,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2872,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7046:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2873,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7060:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2877,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:11"
													},
													{
														"expression": {
															"id": 2884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2878,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7100:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2880,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7115:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2881,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7129:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2885,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:11"
													},
													{
														"expression": {
															"id": 2892,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2886,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7170:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2887,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2888,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7185:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2889,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7199:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2893,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:11"
													},
													{
														"expression": {
															"id": 2900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2894,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7240:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2895,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2896,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7255:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2897,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7269:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2901,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:11"
													},
													{
														"expression": {
															"id": 2908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2902,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7310:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2904,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7325:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2905,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7339:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2909,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:11"
													},
													{
														"expression": {
															"id": 2916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2910,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2862,
																"src": "7381:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2912,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2809,
																		"src": "7396:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2913,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2862,
																		"src": "7410:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2917,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:11"
													},
													{
														"expression": {
															"id": 2922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2918,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2812,
																"src": "7851:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2919,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2815,
																	"src": "7860:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2920,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2862,
																	"src": "7868:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2923,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:11"
													},
													{
														"expression": {
															"id": 2924,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2812,
															"src": "7896:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2813,
														"id": 2925,
														"nodeType": "Return",
														"src": "7889:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2803,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:11",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2805,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "3819:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2807,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "3830:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2806,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2809,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "3841:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:11"
									},
									"returnParameters": {
										"id": 2813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "3885:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:11"
									},
									"scope": 3594,
									"src": "3803:4116:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2970,
										"nodeType": "Block",
										"src": "8161:192:11",
										"statements": [
											{
												"assignments": [
													2944
												],
												"declarations": [
													{
														"constant": false,
														"id": 2944,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2970,
														"src": "8171:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2943,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2950,
												"initialValue": {
													"arguments": [
														{
															"id": 2946,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2931,
															"src": "8195:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2947,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2933,
															"src": "8198:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2948,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2935,
															"src": "8201:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2945,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2928,
															2971
														],
														"referencedDeclaration": 2928,
														"src": "8188:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2952,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2938,
																"src": "8244:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2551",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2551",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2951,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3593,
															"src": "8227:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2551_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2953,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2960,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2955,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2931,
																	"src": "8264:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2956,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2933,
																	"src": "8267:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2957,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2935,
																	"src": "8270:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2954,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2959,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2967,
												"nodeType": "IfStatement",
												"src": "8223:101:11",
												"trueBody": {
													"id": 2966,
													"nodeType": "Block",
													"src": "8288:36:11",
													"statements": [
														{
															"expression": {
																"id": 2964,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2962,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2944,
																	"src": "8302:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2965,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2968,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2944,
													"src": "8340:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2942,
												"id": 2969,
												"nodeType": "Return",
												"src": "8333:13:11"
											}
										]
									},
									"documentation": {
										"id": 2929,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:11",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2971,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2931,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "8067:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2933,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "8078:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2935,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "8089:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2938,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "8110:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2937,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2936,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "8110:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "8110:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:11"
									},
									"returnParameters": {
										"id": 2942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2941,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "8152:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2940,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:11"
									},
									"scope": 3594,
									"src": "8051:302:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3082,
										"nodeType": "Block",
										"src": "8644:1585:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2979,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2974,
														"src": "8658:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2980,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2985,
												"nodeType": "IfStatement",
												"src": "8654:45:11",
												"trueBody": {
													"id": 2984,
													"nodeType": "Block",
													"src": "8666:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2978,
															"id": 2983,
															"nodeType": "Return",
															"src": "8680:8:11"
														}
													]
												}
											},
											{
												"assignments": [
													2987
												],
												"declarations": [
													{
														"constant": false,
														"id": 2987,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3082,
														"src": "9378:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2986,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2996,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2990,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2974,
																			"src": "9406:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2989,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3250,
																			3285
																		],
																		"referencedDeclaration": 3250,
																		"src": "9401:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2994,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:11"
											},
											{
												"id": 3081,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:11",
												"statements": [
													{
														"expression": {
															"id": 3006,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2997,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "9839:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3005,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3002,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2998,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "9849:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3001,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2999,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "9858:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3000,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "9862:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3003,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3004,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3007,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:11"
													},
													{
														"expression": {
															"id": 3017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3008,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "9888:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3016,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3013,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3009,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "9898:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3012,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3010,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "9907:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3011,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "9911:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3014,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3015,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3018,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:11"
													},
													{
														"expression": {
															"id": 3028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3019,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "9937:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3027,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3024,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3020,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "9947:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3023,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3021,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "9956:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3022,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "9960:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3025,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3029,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:11"
													},
													{
														"expression": {
															"id": 3039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3030,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "9986:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3038,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3035,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3031,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "9996:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3034,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3032,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "10005:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3033,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "10009:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3036,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3040,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:11"
													},
													{
														"expression": {
															"id": 3050,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3041,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "10035:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3049,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3046,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3042,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "10045:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3045,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3043,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "10054:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3044,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "10058:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3047,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3048,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3051,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:11"
													},
													{
														"expression": {
															"id": 3061,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3052,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "10084:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3060,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3057,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3053,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "10094:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3056,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3054,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "10103:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3055,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "10107:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3058,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3062,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:11"
													},
													{
														"expression": {
															"id": 3072,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3063,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2987,
																"src": "10133:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3071,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3064,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2987,
																				"src": "10143:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3067,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3065,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2974,
																					"src": "10152:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3066,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2987,
																					"src": "10156:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3069,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3070,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3073,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:11"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3075,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2987,
																	"src": "10193:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3078,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3076,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2974,
																		"src": "10201:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3077,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2987,
																		"src": "10205:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3074,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2745,
																"src": "10189:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2978,
														"id": 3080,
														"nodeType": "Return",
														"src": "10182:30:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2972,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:11",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2974,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "8601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2973,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:11"
									},
									"returnParameters": {
										"id": 2978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3083,
												"src": "8635:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:11"
									},
									"scope": 3594,
									"src": "8587:1642:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3117,
										"nodeType": "Block",
										"src": "10405:164:11",
										"statements": [
											{
												"id": 3116,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:11",
												"statements": [
													{
														"assignments": [
															3095
														],
														"declarations": [
															{
																"constant": false,
																"id": 3095,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3116,
																"src": "10439:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3094,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3099,
														"initialValue": {
															"arguments": [
																{
																	"id": 3097,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3086,
																	"src": "10461:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3096,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3083,
																	3118
																],
																"referencedDeclaration": 3083,
																"src": "10456:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3100,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3095,
																"src": "10484:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3109,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3102,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3089,
																						"src": "10511:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3101,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3593,
																					"src": "10494:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2551_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3103,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3108,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3106,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3104,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3095,
																						"src": "10524:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3105,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3095,
																						"src": "10533:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3107,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3086,
																					"src": "10542:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3111,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3110,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3113,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3093,
														"id": 3115,
														"nodeType": "Return",
														"src": "10477:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3084,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:11",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3118,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3086,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "10343:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3089,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "10354:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3088,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3087,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "10354:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "10354:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:11"
									},
									"returnParameters": {
										"id": 3093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3092,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3118,
												"src": "10396:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:11"
									},
									"scope": 3594,
									"src": "10329:240:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3249,
										"nodeType": "Block",
										"src": "10760:922:11",
										"statements": [
											{
												"assignments": [
													3127
												],
												"declarations": [
													{
														"constant": false,
														"id": 3127,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3249,
														"src": "10770:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3126,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3129,
												"initialValue": {
													"hexValue": "30",
													"id": 3128,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:11"
											},
											{
												"id": 3246,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3130,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "10826:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3144,
														"nodeType": "IfStatement",
														"src": "10822:99:11",
														"trueBody": {
															"id": 3143,
															"nodeType": "Block",
															"src": "10844:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 3137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3135,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "10862:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3138,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:11"
																},
																{
																	"expression": {
																		"id": 3141,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3139,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "10893:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3140,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3142,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3145,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "10938:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3148,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3159,
														"nodeType": "IfStatement",
														"src": "10934:96:11",
														"trueBody": {
															"id": 3158,
															"nodeType": "Block",
															"src": "10955:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 3152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3150,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "10973:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3151,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3153,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:11"
																},
																{
																	"expression": {
																		"id": 3156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3154,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11003:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3155,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3157,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3160,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11047:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3163,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3174,
														"nodeType": "IfStatement",
														"src": "11043:96:11",
														"trueBody": {
															"id": 3173,
															"nodeType": "Block",
															"src": "11064:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 3167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3165,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "11082:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3168,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:11"
																},
																{
																	"expression": {
																		"id": 3171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3169,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11112:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3172,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3175,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11156:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3189,
														"nodeType": "IfStatement",
														"src": "11152:96:11",
														"trueBody": {
															"id": 3188,
															"nodeType": "Block",
															"src": "11173:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 3182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3180,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "11191:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3183,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:11"
																},
																{
																	"expression": {
																		"id": 3186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3184,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11221:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3187,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3192,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3190,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11265:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3204,
														"nodeType": "IfStatement",
														"src": "11261:93:11",
														"trueBody": {
															"id": 3203,
															"nodeType": "Block",
															"src": "11281:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3195,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "11299:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3198,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:11"
																},
																{
																	"expression": {
																		"id": 3201,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3199,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11328:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3200,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3202,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3205,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11371:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3219,
														"nodeType": "IfStatement",
														"src": "11367:93:11",
														"trueBody": {
															"id": 3218,
															"nodeType": "Block",
															"src": "11387:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3210,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "11405:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3213,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:11"
																},
																{
																	"expression": {
																		"id": 3216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3214,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11434:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3215,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3217,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3220,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11477:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3234,
														"nodeType": "IfStatement",
														"src": "11473:93:11",
														"trueBody": {
															"id": 3233,
															"nodeType": "Block",
															"src": "11493:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 3227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3225,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3121,
																			"src": "11511:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3226,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3228,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:11"
																},
																{
																	"expression": {
																		"id": 3231,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3229,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11540:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3232,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3235,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3121,
																	"src": "11583:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3245,
														"nodeType": "IfStatement",
														"src": "11579:64:11",
														"trueBody": {
															"id": 3244,
															"nodeType": "Block",
															"src": "11599:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3240,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3127,
																			"src": "11617:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3243,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3247,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3127,
													"src": "11669:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3125,
												"id": 3248,
												"nodeType": "Return",
												"src": "11662:13:11"
											}
										]
									},
									"documentation": {
										"id": 3119,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:11",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3121,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3250,
												"src": "10713:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:11"
									},
									"returnParameters": {
										"id": 3125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3250,
												"src": "10751:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:11"
									},
									"scope": 3594,
									"src": "10699:983:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3284,
										"nodeType": "Block",
										"src": "11915:168:11",
										"statements": [
											{
												"id": 3283,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:11",
												"statements": [
													{
														"assignments": [
															3262
														],
														"declarations": [
															{
																"constant": false,
																"id": 3262,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3283,
																"src": "11949:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3261,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3266,
														"initialValue": {
															"arguments": [
																{
																	"id": 3264,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3253,
																	"src": "11971:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3263,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3250,
																	3285
																],
																"referencedDeclaration": 3250,
																"src": "11966:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3267,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3262,
																"src": "11998:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3276,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3269,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3256,
																						"src": "12025:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3268,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3593,
																					"src": "12008:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2551_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3270,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3275,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3271,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3272,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3262,
																						"src": "12043:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3274,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3253,
																					"src": "12052:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3278,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3279,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3277,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3280,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3260,
														"id": 3282,
														"nodeType": "Return",
														"src": "11991:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3251,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:11",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3253,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "11849:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3256,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "11864:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3254,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "11864:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "11864:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:11"
									},
									"returnParameters": {
										"id": 3260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3259,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "11906:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:11"
									},
									"scope": 3594,
									"src": "11835:248:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3413,
										"nodeType": "Block",
										"src": "12276:854:11",
										"statements": [
											{
												"assignments": [
													3294
												],
												"declarations": [
													{
														"constant": false,
														"id": 3294,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3413,
														"src": "12286:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3293,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3296,
												"initialValue": {
													"hexValue": "30",
													"id": 3295,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:11"
											},
											{
												"id": 3410,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3297,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12342:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3298,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3313,
														"nodeType": "IfStatement",
														"src": "12338:103:11",
														"trueBody": {
															"id": 3312,
															"nodeType": "Block",
															"src": "12361:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3302,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12379:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3305,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3303,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3304,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3307,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:11"
																},
																{
																	"expression": {
																		"id": 3310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3308,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12414:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3311,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3314,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12458:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3330,
														"nodeType": "IfStatement",
														"src": "12454:103:11",
														"trueBody": {
															"id": 3329,
															"nodeType": "Block",
															"src": "12477:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3323,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3319,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12495:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3322,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3320,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3324,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:11"
																},
																{
																	"expression": {
																		"id": 3327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3325,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12530:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3328,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3331,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12574:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3334,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3347,
														"nodeType": "IfStatement",
														"src": "12570:103:11",
														"trueBody": {
															"id": 3346,
															"nodeType": "Block",
															"src": "12593:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3340,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3336,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12611:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3339,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3337,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3338,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3341,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:11"
																},
																{
																	"expression": {
																		"id": 3344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3342,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12646:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3345,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3348,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12690:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3351,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3364,
														"nodeType": "IfStatement",
														"src": "12686:100:11",
														"trueBody": {
															"id": 3363,
															"nodeType": "Block",
															"src": "12708:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3353,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12726:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3356,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3354,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3358,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:11"
																},
																{
																	"expression": {
																		"id": 3361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3359,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12760:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3362,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3365,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12803:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3381,
														"nodeType": "IfStatement",
														"src": "12799:100:11",
														"trueBody": {
															"id": 3380,
															"nodeType": "Block",
															"src": "12821:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3370,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12839:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3371,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3372,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3375,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:11"
																},
																{
																	"expression": {
																		"id": 3378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3376,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12873:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3377,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3379,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3382,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "12916:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3398,
														"nodeType": "IfStatement",
														"src": "12912:100:11",
														"trueBody": {
															"id": 3397,
															"nodeType": "Block",
															"src": "12934:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3391,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3387,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3288,
																			"src": "12952:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3390,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3388,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3389,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3392,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:11"
																},
																{
																	"expression": {
																		"id": 3395,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3393,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "12986:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3394,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3396,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3399,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3288,
																"src": "13029:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3409,
														"nodeType": "IfStatement",
														"src": "13025:66:11",
														"trueBody": {
															"id": 3408,
															"nodeType": "Block",
															"src": "13047:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3404,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3294,
																			"src": "13065:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3405,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3407,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3411,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3294,
													"src": "13117:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3292,
												"id": 3412,
												"nodeType": "Return",
												"src": "13110:13:11"
											}
										]
									},
									"documentation": {
										"id": 3286,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:11",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3288,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "12229:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:11"
									},
									"returnParameters": {
										"id": 3292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "12267:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:11"
									},
									"scope": 3594,
									"src": "12214:916:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3448,
										"nodeType": "Block",
										"src": "13365:170:11",
										"statements": [
											{
												"id": 3447,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:11",
												"statements": [
													{
														"assignments": [
															3426
														],
														"declarations": [
															{
																"constant": false,
																"id": 3426,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3447,
																"src": "13399:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3425,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3430,
														"initialValue": {
															"arguments": [
																{
																	"id": 3428,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3417,
																	"src": "13422:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3427,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3414,
																	3449
																],
																"referencedDeclaration": 3414,
																"src": "13416:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3445,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3431,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3426,
																"src": "13449:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3440,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3433,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3420,
																						"src": "13476:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3432,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3593,
																					"src": "13459:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2551_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3434,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3439,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3437,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3435,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3436,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3426,
																						"src": "13495:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3438,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3417,
																					"src": "13504:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3442,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3443,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3441,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3444,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3424,
														"id": 3446,
														"nodeType": "Return",
														"src": "13442:76:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3415,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3449,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3417,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3449,
												"src": "13299:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3420,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3449,
												"src": "13314:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3419,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3418,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "13314:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "13314:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:11"
									},
									"returnParameters": {
										"id": 3424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3449,
												"src": "13356:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:11"
									},
									"scope": 3594,
									"src": "13284:251:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3535,
										"nodeType": "Block",
										"src": "13855:600:11",
										"statements": [
											{
												"assignments": [
													3458
												],
												"declarations": [
													{
														"constant": false,
														"id": 3458,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3535,
														"src": "13865:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3457,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3460,
												"initialValue": {
													"hexValue": "30",
													"id": 3459,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:11"
											},
											{
												"id": 3532,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3463,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3461,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "13921:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3462,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3464,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3475,
														"nodeType": "IfStatement",
														"src": "13917:98:11",
														"trueBody": {
															"id": 3474,
															"nodeType": "Block",
															"src": "13939:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 3468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3466,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3452,
																			"src": "13957:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3467,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3469,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:11"
																},
																{
																	"expression": {
																		"id": 3472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3470,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "13988:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3473,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3476,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "14032:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3490,
														"nodeType": "IfStatement",
														"src": "14028:95:11",
														"trueBody": {
															"id": 3489,
															"nodeType": "Block",
															"src": "14049:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3481,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3452,
																			"src": "14067:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3484,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:11"
																},
																{
																	"expression": {
																		"id": 3487,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3485,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "14097:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3488,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3495,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3491,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "14140:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3492,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3494,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3505,
														"nodeType": "IfStatement",
														"src": "14136:95:11",
														"trueBody": {
															"id": 3504,
															"nodeType": "Block",
															"src": "14157:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3496,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3452,
																			"src": "14175:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3497,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3499,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:11"
																},
																{
																	"expression": {
																		"id": 3502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3500,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "14205:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3501,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3503,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3510,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3506,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "14248:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3507,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3509,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3520,
														"nodeType": "IfStatement",
														"src": "14244:95:11",
														"trueBody": {
															"id": 3519,
															"nodeType": "Block",
															"src": "14265:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3511,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3452,
																			"src": "14283:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3512,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3514,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:11"
																},
																{
																	"expression": {
																		"id": 3517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3515,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "14313:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3516,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3518,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3521,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3452,
																	"src": "14356:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3524,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3531,
														"nodeType": "IfStatement",
														"src": "14352:64:11",
														"trueBody": {
															"id": 3530,
															"nodeType": "Block",
															"src": "14372:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3526,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "14390:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3527,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3529,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3533,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3458,
													"src": "14442:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3456,
												"id": 3534,
												"nodeType": "Return",
												"src": "14435:13:11"
											}
										]
									},
									"documentation": {
										"id": 3450,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:11",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3452,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3536,
												"src": "13808:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:11"
									},
									"returnParameters": {
										"id": 3456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3536,
												"src": "13846:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:11"
									},
									"scope": 3594,
									"src": "13792:663:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3573,
										"nodeType": "Block",
										"src": "14692:177:11",
										"statements": [
											{
												"id": 3572,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:11",
												"statements": [
													{
														"assignments": [
															3548
														],
														"declarations": [
															{
																"constant": false,
																"id": 3548,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3572,
																"src": "14726:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3547,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3552,
														"initialValue": {
															"arguments": [
																{
																	"id": 3550,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3539,
																	"src": "14750:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3549,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3536,
																	3574
																],
																"referencedDeclaration": 3536,
																"src": "14743:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3553,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3548,
																"src": "14777:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3555,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3542,
																						"src": "14804:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2551",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3554,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3593,
																					"src": "14787:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2551_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3556,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3564,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3562,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3557,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3560,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3558,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3548,
																									"src": "14823:6:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3559,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3561,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3563,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3539,
																					"src": "14838:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3567,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3569,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3546,
														"id": 3571,
														"nodeType": "Return",
														"src": "14770:82:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3537,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:11",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3539,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3574,
												"src": "14626:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3542,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3574,
												"src": "14641:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3541,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3540,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "14641:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "14641:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:11"
									},
									"returnParameters": {
										"id": 3546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3574,
												"src": "14683:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3544,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:11"
									},
									"scope": 3594,
									"src": "14610:259:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3592,
										"nodeType": "Block",
										"src": "15067:48:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3585,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3578,
																	"src": "15090:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2551",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2551",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3583,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 3586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3589,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3582,
												"id": 3591,
												"nodeType": "Return",
												"src": "15077:31:11"
											}
										]
									},
									"documentation": {
										"id": 3575,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:11",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3578,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3593,
												"src": "15019:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2551",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3577,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3576,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2551,
														"src": "15019:8:11"
													},
													"referencedDeclaration": 2551,
													"src": "15019:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2551",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:11"
									},
									"returnParameters": {
										"id": 3582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3593,
												"src": "15061:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3580,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:11"
									},
									"scope": 3594,
									"src": "14993:122:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3595,
							"src": "203:14914:11",
							"usedErrors": [
								2546
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:11"
				},
				"id": 11
			},
			"src/Vaults.sol": {
				"ast": {
					"absolutePath": "src/Vaults.sol",
					"exportedSymbols": {
						"Context": [
							2540
						],
						"ERC20": [
							1142
						],
						"ERC4626": [
							1905
						],
						"ERC4626Fees": [
							627
						],
						"IERC20": [
							1220
						],
						"IERC20Errors": [
							211
						],
						"IERC20Metadata": [
							1931
						],
						"Math": [
							3594
						],
						"SafeERC20": [
							2257
						],
						"Vaults": [
							3651
						]
					},
					"id": 3652,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3596,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:12"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol",
							"file": "@openzeppelin/contracts/mocks/docs/ERC4626Fees.sol",
							"id": 3597,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3652,
							"sourceUnit": 628,
							"src": "57:60:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3598,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3652,
							"sourceUnit": 1143,
							"src": "118:55:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3599,
										"name": "ERC4626Fees",
										"nameLocations": [
											"194:11:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 627,
										"src": "194:11:12"
									},
									"id": 3600,
									"nodeType": "InheritanceSpecifier",
									"src": "194:11:12"
								}
							],
							"canonicalName": "Vaults",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3651,
							"linearizedBaseContracts": [
								3651,
								627,
								1905,
								169,
								1142,
								211,
								1931,
								1220,
								2540
							],
							"name": "Vaults",
							"nameLocation": "184:6:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 3602,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "235:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 3651,
									"src": "212:28:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 3601,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "212:15:12",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ba0af7a9",
									"id": 3604,
									"mutability": "mutable",
									"name": "entryFeeBasisPoints",
									"nameLocation": "261:19:12",
									"nodeType": "VariableDeclaration",
									"scope": 3651,
									"src": "246:34:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3603,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "246:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 3631,
										"nodeType": "Block",
										"src": "385:88:12",
										"statements": [
											{
												"expression": {
													"id": 3625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3619,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3602,
														"src": "395:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 3622,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "411:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3623,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "415:6:12",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "411:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 3621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "403:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 3620,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "403:8:12",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 3624,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "403:19:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "395:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 3626,
												"nodeType": "ExpressionStatement",
												"src": "395:27:12"
											},
											{
												"expression": {
													"id": 3629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3627,
														"name": "entryFeeBasisPoints",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3604,
														"src": "432:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3628,
														"name": "_BasisPoints",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3609,
														"src": "454:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "432:34:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3630,
												"nodeType": "ExpressionStatement",
												"src": "432:34:12"
											}
										]
									},
									"id": 3632,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3612,
													"name": "_asset",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3607,
													"src": "344:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												}
											],
											"id": 3613,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3611,
												"name": "ERC4626",
												"nameLocations": [
													"336:7:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1905,
												"src": "336:7:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "336:15:12"
										},
										{
											"arguments": [
												{
													"hexValue": "42726f6b656e204d616e20486f6c65",
													"id": 3615,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "358:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_54b9df431559c88f67b3cf000c63ea279142e183cffbc2c2524645a351259ce3",
														"typeString": "literal_string \"Broken Man Hole\""
													},
													"value": "Broken Man Hole"
												},
												{
													"hexValue": "76424d48",
													"id": 3616,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "377:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_3273bb9e33902d5a25e446e7fb7e073f8b45920c403a127a5b0d284f1456a567",
														"typeString": "literal_string \"vBMH\""
													},
													"value": "vBMH"
												}
											],
											"id": 3617,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3614,
												"name": "ERC20",
												"nameLocations": [
													"352:5:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1142,
												"src": "352:5:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "352:32:12"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3607,
												"mutability": "mutable",
												"name": "_asset",
												"nameLocation": "306:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3632,
												"src": "299:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1220",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 3606,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3605,
														"name": "IERC20",
														"nameLocations": [
															"299:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1220,
														"src": "299:6:12"
													},
													"referencedDeclaration": 1220,
													"src": "299:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1220",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3609,
												"mutability": "mutable",
												"name": "_BasisPoints",
												"nameLocation": "322:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 3632,
												"src": "314:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "314:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "298:37:12"
									},
									"returnParameters": {
										"id": 3618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "385:0:12"
									},
									"scope": 3651,
									"src": "287:186:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										554
									],
									"body": {
										"id": 3640,
										"nodeType": "Block",
										"src": "552:43:12",
										"statements": [
											{
												"expression": {
													"id": 3638,
													"name": "entryFeeBasisPoints",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3604,
													"src": "569:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3637,
												"id": 3639,
												"nodeType": "Return",
												"src": "562:26:12"
											}
										]
									},
									"id": 3641,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_entryFeeBasisPoints",
									"nameLocation": "488:20:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3634,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "525:8:12"
									},
									"parameters": {
										"id": 3633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "508:2:12"
									},
									"returnParameters": {
										"id": 3637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3636,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3641,
												"src": "543:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "543:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "542:9:12"
									},
									"scope": 3651,
									"src": "479:116:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										573
									],
									"body": {
										"id": 3649,
										"nodeType": "Block",
										"src": "672:29:12",
										"statements": [
											{
												"expression": {
													"id": 3647,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3602,
													"src": "689:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 3646,
												"id": 3648,
												"nodeType": "Return",
												"src": "682:12:12"
											}
										]
									},
									"id": 3650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_entryFeeRecipient",
									"nameLocation": "610:18:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3643,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "645:8:12"
									},
									"parameters": {
										"id": 3642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "628:2:12"
									},
									"returnParameters": {
										"id": 3646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3645,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3650,
												"src": "663:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "663:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "662:9:12"
									},
									"scope": 3651,
									"src": "601:100:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3652,
							"src": "175:528:12",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								1254,
								1263,
								1272,
								1281,
								1984,
								2265,
								2270,
								2273,
								2546
							],
							"usedEvents": [
								20,
								32,
								1154,
								1163
							]
						}
					],
					"src": "32:671:12"
				},
				"id": 12
			}
		}
	}
}